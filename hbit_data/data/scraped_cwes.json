[{"cwe_id":1004,"name":"Sensitive Cookie Without 'HttpOnly' Flag","description":"The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.","extended_description":"The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.","likelihood_of_exploit":"medium","background_details":["An HTTP cookie is a small piece of data attributed to a specific website and stored on the user's computer by the user's web browser. This data can be leveraged for a variety of purposes including saving information entered into form fields, recording user activity, and for authentication purposes. Cookies used to save or record information generated by the user are accessed and modified by script code embedded in a web page. While cookies used for authentication are created by the website's server and sent to the user to be attached to future requests. These authentication cookies are often not meant to be accessed by the web page sent to the user, and are instead just supposed to be attached to future requests to verify authentication details."],"potential_mitigations":[{"description":"Leverage the HttpOnly flag when setting a sensitive cookie in a response.","effectiveness":"high","effectiveness_notes":"While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1007,"name":"Insufficient Visual Distinction of Homoglyphs Presented to User","description":"The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.","extended_description":"Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase \"l\" (ell) and uppercase \"I\" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter \"A\" and the Greek capital letter \"Α\" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark \"À\" and its equivalent \"Á\" with the acute accent. Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs. Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.","effectiveness":"","effectiveness_notes":""},{"description":"Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox. Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Dynamic Analysis","description":"If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.","effectiveness":"moderate"}]},{"cwe_id":102,"name":"Struts: Duplicate Validation Forms","description":"The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.","extended_description":"If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1021,"name":"Improper Restriction of Rendered UI Layers or Frames","description":"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.","extended_description":"A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content. The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.","effectiveness":"","effectiveness_notes":""},{"description":"A developer can use a \"frame-breaker\" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned. It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The \"frame-breaking\" script does not intuitively account for multiple nested frames that can be presented to the user.","effectiveness":"","effectiveness_notes":""},{"description":"This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the \"frame-ancestors\" directive or the \"frame-src\" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1022,"name":"Use of Web Link to Untrusted Target with window.opener Access","description":"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.","extended_description":"When a user clicks a link to an external site (\"target\"), the target=\"_blank\" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link.  If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin.  An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Specify in the design that any linked external document must not be granted access to the location object of the calling page.","effectiveness":"","effectiveness_notes":""},{"description":"When creating a link to an external document using the <a> tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\". If opening the external document in a new window via javascript, then reset the opener by setting it equal to null.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use \"_blank\" targets. However, this can affect the usability of the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1023,"name":"Incomplete Comparison with Missing Factors","description":"The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.","extended_description":"An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1024,"name":"Comparison of Incompatible Types","description":"The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.","extended_description":"In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed.  In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string \"123\" might be converted to a number type.  See examples.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1025,"name":"Comparison Using Wrong Factors","description":"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.","extended_description":"This can lead to incorrect results and resultant weaknesses.  For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two \"equal\" objects to be considered unequal.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":103,"name":"Struts: Incomplete validate() Method Definition","description":"The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().","extended_description":"If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.","likelihood_of_exploit":"","background_details":["The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If the code creates a class that extends one of these classes, and if that class implements custom validation logic by overriding the validate() method, the code must call super.validate() in the validate() implementation."],"potential_mitigations":[{"description":"Implement the validate() method and call super.validate() within that method.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1037,"name":"Processor Optimization Removal or Modification of Security-critical Code","description":"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.","extended_description":"","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"White Box","description":"In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.","effectiveness":"opportunistic"}]},{"cwe_id":1038,"name":"Insecure Automated Optimizations","description":"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.","extended_description":"","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1039,"name":"Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations","description":"The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.","extended_description":"When techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision.  If the automated mechanism is not developed or \"trained\" with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification. Targeted technologies include, but are not necessarily limited to: automated speech recognition automated image recognition For example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":104,"name":"Struts: Form Bean Does Not Extend Validation Class","description":"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.","extended_description":"","likelihood_of_exploit":"","background_details":["In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. One of these classes must be extended because the Struts Validator ties in to the application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator."],"potential_mitigations":[{"description":"Ensure that all forms extend one of the Validation Classes.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1041,"name":"Use of Redundant Code","description":"The product has multiple functions, methods, procedures, macros, etc. that\n\t\t\t\t\tcontain the same code.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Merge common functionality into a single function and then call that function from across the entire code base.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1042,"name":"Static Member Data Element outside of a Singleton Class Element","description":"The code contains a member element that is declared as static (but not final), in which\n\t\t\t\t\tits parent class element \n\t\t\t\t\tis not a singleton class - that is, a class element that can be used only once in\n\t\t\t\t\tthe 'to' association of a Create action.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1043,"name":"Data Element Aggregating an Excessively Large Number of Non-Primitive Elements","description":"The product uses a data element that has an excessively large\n\t\t\t\t\tnumber of sub-elements with non-primitive data types such as structures or aggregated objects.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of \"excessively large\" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1044,"name":"Architecture with Number of Horizontal Layers Outside of Expected Range","description":"The product's architecture contains too many - or too few -\n\t\t\t\t\thorizontal layers.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"expected range\" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1045,"name":"Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor","description":"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.","extended_description":"This issue can prevent the product from running reliably, since the child might not perform essential destruction operations.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1046,"name":"Creation of Immutable Text Using String Concatenation","description":"The product creates an immutable text string using string concatenation operations.","extended_description":"When building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1047,"name":"Modules with Circular Dependencies","description":"The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.","extended_description":"As an example, with Java, this weakness might indicate cycles between packages. This issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1048,"name":"Invokable Control Element with Large Number of Outward Calls","description":"The code contains callable control elements that\n         contain an excessively large number of references to other\n         application objects external to the context of the callable,\n         i.e. a Fan-Out value that is excessively large.","extended_description":"While the interpretation of \"excessively large Fan-Out value\" may vary for each product or developer, CISQ recommends a default of 5 referenced objects. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1049,"name":"Excessive Data Query Operations in a Large Data Table","description":"The product performs a data query with a large number of joins\n\t\t\t\t\tand sub-queries on a large data table.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of \"large data table\" and \"large number of joins or sub-queries\" may vary for each product or developer, CISQ recommends a default of 1 million rows for a \"large\" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":105,"name":"Struts: Form Field Without Validator","description":"The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.","extended_description":"Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1050,"name":"Excessive Platform Resource Consumption within a Loop","description":"The product has a loop body or loop condition that contains a control element that directly or\n\t\t\t\t\tindirectly consumes platform resources, e.g. messaging, sessions, locks, or file\n\t\t\t\t\tdescriptors.","extended_description":"This issue can make the product perform more slowly.  If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1051,"name":"Initialization with Hard-Coded Network Resource Configuration Data","description":"The product initializes data using hard-coded values that act as network resource identifiers.","extended_description":"This issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1052,"name":"Excessive Use of Hard-Coded Literals in Initialization","description":"The product initializes a data element using a hard-coded\n\t\t\t\t\tliteral that is not a simple integer or static constant element.","extended_description":"This issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1053,"name":"Missing Documentation for Design","description":"The product does not have documentation that represents how it is designed.","extended_description":"This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1054,"name":"Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer","description":"The code at one architectural layer invokes code that resides\n\t\t\t\t\tat a deeper layer than the adjacent layer, i.e., the invocation skips at least one\n\t\t\t\t\tlayer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.","extended_description":"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1055,"name":"Multiple Inheritance from Concrete Classes","description":"The product contains a class with inheritance from more than\n\t\t\t\t\tone concrete class.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1056,"name":"Invokable Control Element with Variadic Parameters","description":"A named-callable or method control element has a signature that\n\t\t\t\t\tsupports a variable (variadic) number of parameters or arguments.","extended_description":"This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1057,"name":"Data Access Operations Outside of Expected Data Manager Component","description":"The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.","extended_description":"This issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1058,"name":"Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element","description":"The code contains a function or method that\n\t\t operates in a multi-threaded environment but owns an unsafe non-final\n\t\t                     static storable or member data element.","extended_description":"This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1059,"name":"Insufficient Technical Documentation","description":"The product does not contain sufficient\n         technical or engineering documentation (whether on paper or\n         in electronic form) that contains descriptions of all the\n         relevant software/hardware elements of the product, such as\n         its usage, structure, architectural components, interfaces, design, implementation,\n         configuration, operation, etc.","extended_description":"When technical documentation is limited or lacking, products are more difficult to maintain.  This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. When using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations. With respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that design documentation is detailed enough to allow for post-manufacturing verification.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":106,"name":"Struts: Plug-in Framework not in Use","description":"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.","extended_description":"Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an input validation framework such as Struts.","effectiveness":"","effectiveness_notes":""},{"description":"Use an input validation framework such as Struts.","effectiveness":"","effectiveness_notes":""},{"description":"Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition","effectiveness":"","effectiveness_notes":""},{"description":"Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1060,"name":"Excessive Number of Inefficient Server-Side Data Accesses","description":"The product performs too many data queries without using efficient data processing functionality such as stored procedures.","extended_description":"This issue can make the product perform more slowly due to computational expense.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of \"too many data queries\" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1061,"name":"Insufficient Encapsulation","description":"The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1062,"name":"Parent Class with References to Child Class","description":"The code has a parent class that contains references to a child class, its methods, or its members.","extended_description":"This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1063,"name":"Creation of Class Instance within a Static Code Block","description":"A static code block creates an instance of a class.","extended_description":"This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static. This issue can make the product perform more slowly by performing initialization before it is needed.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1064,"name":"Invokable Control Element with Signature Containing an Excessive Number of Parameters","description":"The product contains a function, subroutine, or method whose signature has an unnecessarily large number of\n\t\t\t\t\tparameters/arguments.","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"large number of parameters.\" may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1065,"name":"Runtime Resource Management Control Element in a Component Built to Run on Application Servers","description":"The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.","extended_description":"This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1066,"name":"Missing Serialization Control Element","description":"The product contains a serializable data element that does not\n\t\t\t\t\thave an associated serialization method.","extended_description":"This issue can prevent the product from running reliably, e.g. by triggering an exception.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1067,"name":"Excessive Execution of Sequential Searches of Data Resource","description":"The product contains a data query against an SQL table or view\n\t\t\t\t\tthat is configured in a way that does not utilize an index and may cause\n\t\t\t\t\tsequential searches to be performed.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1068,"name":"Inconsistency Between Implementation and Documented Design","description":"The implementation of the product is not consistent with the\n\t\t\t\t\tdesign as described within the relevant documentation.","extended_description":"This issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1069,"name":"Empty Exception Block","description":"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.","extended_description":"When an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For every exception block add code that handles the specific exception in the way intended by the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":107,"name":"Struts: Unused Validation Form","description":"An unused validation form indicates that validation logic is not up-to-date.","extended_description":"It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove the unused Validation Form from the validation.xml file.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1070,"name":"Serializable Data Element Containing non-Serializable Item Elements","description":"The product contains a serializable, storable data element such as a field or member,\n\t\t\t\t\tbut the data element contains member elements that are not\n\t\t\t\t\tserializable.","extended_description":"This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1071,"name":"Empty Code Block","description":"The source code contains a block that does not contain any code, i.e., the block is empty.","extended_description":"Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc.  While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc.  For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1072,"name":"Data Resource Access without Use of Connection Pooling","description":"The product accesses a data resource through a database without using a\n\t\t\t\t\tconnection pooling capability.","extended_description":"This issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1073,"name":"Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses","description":"The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of \"large number of data accesses/queries\" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1074,"name":"Class with Excessively Deep Inheritance","description":"A class has an inheritance level that is too high, i.e., it\n\t\t\t\t\thas a large number of parent classes.","extended_description":"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"large number of parent classes\" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1075,"name":"Unconditional Control Flow Transfer outside of Switch Block","description":"The product performs unconditional control transfer (such as a\n\t\t\t\t\t\"goto\") in code outside of a branching structure such as a switch\n\t\t\t\t\tblock.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1076,"name":"Insufficient Adherence to Expected Conventions","description":"The product's architecture, source code, design, documentation,\n\t\t\t\t\tor other artifact does not follow required conventions.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1077,"name":"Floating Point Comparison with Incorrect Operator","description":"The code performs a comparison such as an\n        equality test between two float (floating point) values, but\n        it uses comparison operators that do not account for the\n        possibility of loss of precision.","extended_description":"Numeric calculation using floating point values\n\t   can generate imprecise results because of rounding errors.\n\t   As a result, two different calculations might generate\n\t   numbers that are mathematically equal, but have slightly\n\t   different bit representations that do not translate to the\n\t   same mathematically-equal values.  As a result, an equality\n\t   test or other comparison might produce unexpected\n\t   results. This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1078,"name":"Inappropriate Source Code Style or Formatting","description":"The source code does not follow\n\t\t\t\tdesired style or formatting for indentation, white\n\t\t\t\tspace, comments, etc.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1079,"name":"Parent Class without Virtual Destructor Method","description":"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.","extended_description":"This issue can prevent the product from running reliably due to undefined or unexpected behaviors.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":108,"name":"Struts: Unvalidated Action Form","description":"Every Action Form must have a corresponding validation form.","extended_description":"If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Map every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1080,"name":"Source Code File with Excessive Number of Lines of Code","description":"A source code file has too many lines of\n\t\t\t\t\tcode.","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"too many lines of code\" may vary for each product or developer, CISQ recommends a default threshold value of 1000.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1082,"name":"Class Instance Self Destruction Control Element","description":"The code contains a class instance that calls the method or function to delete or destroy itself.","extended_description":"For example, in C++, \"delete this\" will cause the object to delete itself. This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1083,"name":"Data Access from Outside Expected Data Manager Component","description":"The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.","extended_description":"When the product has a data access component, the design may be intended to handle all data access operations through that component.  If a data access operation is performed outside of that component, then this may indicate a violation of the intended design. This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1084,"name":"Invokable Control Element with Excessive File or Data Access Operations","description":"A function or method contains too many\n\t\t\t\t\toperations that utilize a data manager or file resource.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"too many operations\" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1085,"name":"Invokable Control Element with Excessive Volume of Commented-out Code","description":"A function, method, procedure, etc. contains an excessive amount of code that has been\n\t\t\t\t\tcommented out within its body.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"excessive volume\" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1086,"name":"Class with Excessive Number of Child Classes","description":"A class contains an unnecessarily large number of\n\t\t\t\t\tchildren.","extended_description":"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. While the interpretation of \"large number of children\" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1087,"name":"Class with Virtual Method without a Virtual Destructor","description":"A class contains a virtual method, but the method does not have an associated virtual destructor.","extended_description":"This issue can prevent the product from running reliably, e.g. due to undefined behavior.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1088,"name":"Synchronous Access of Remote Resource without Timeout","description":"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.","extended_description":"This issue can prevent the product from running reliably, since an outage for the remote resource can cause the product to hang.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1089,"name":"Large Data Table with Excessive Number of Indices","description":"The product uses a large data table that contains an excessively large number of\n\t\t\t\t\tindices.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of \"large data table\" and \"excessively large number of indices\" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a \"large\" table and a default threshold of 3 indices.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":109,"name":"Struts: Validator Turned Off","description":"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that an action form mapping enables validation. Set the validate field to true.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1090,"name":"Method Containing Access of a Member Element from Another Class","description":"A method for a class performs an operation that directly\n\t\t\t\t\taccesses a member element from another class.","extended_description":"This issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1091,"name":"Use of Object without Invoking Destructor Method","description":"The product contains a method that accesses an object but does not later invoke\n\t\t\t\t\tthe element's associated finalize/destructor method.","extended_description":"This issue can make the product perform more slowly by retaining memory and/or other resources longer than necessary.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1092,"name":"Use of Same Invokable Control Element in Multiple Architectural Layers","description":"The product uses the same control element across multiple\n\t\t\t\t\tarchitectural layers.","extended_description":"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1093,"name":"Excessively Complex Data Representation","description":"The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.","extended_description":"This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1094,"name":"Excessive Index Range Scan for a Data Resource","description":"The product contains an index range scan for a large data table,\n\t\t\t\t\tbut the scan can cover a large number of rows.","extended_description":"This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of \"large data table\" and \"excessive index range\" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1095,"name":"Loop Condition Value Update within the Loop","description":"The product uses a loop with a control flow condition based on\n\t\t\t\t\ta value that is updated within the body of the loop.","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1096,"name":"Singleton Class Instance Creation without Proper Locking or Synchronization","description":"The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.","extended_description":"This issue can prevent the product from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1097,"name":"Persistent Storable Data Element without Associated Comparison Control Element","description":"The product uses a storable data element that does not have\n\t\t\t\t\tall of the associated functions or methods that are necessary to support\n\t\t\t\t\tcomparison.","extended_description":"For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined. This issue can prevent the product from running reliably, due to incorrect or unexpected comparison results.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1098,"name":"Data Element containing Pointer Item without Proper Copy Control Element","description":"The code contains a data element with a pointer that does not have an associated copy or constructor method.","extended_description":"This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1099,"name":"Inconsistent Naming Conventions for Identifiers","description":"The product's code, documentation, or other artifacts do not\n\t\t\t\t\tconsistently use the same naming conventions for variables, callables, groups of\n\t\t\t\t\trelated callables, I/O capabilities, data types, file names, or similar types of\n\t\t\t\t\telements.","extended_description":"This issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":11,"name":"ASP.NET Misconfiguration: Creating Debug Binary","description":"Debugging messages help attackers learn about the system and plan a form of attack.","extended_description":"ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.","likelihood_of_exploit":"","background_details":["The debug attribute of the <compilation> tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user."],"potential_mitigations":[{"description":"Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":110,"name":"Struts: Validator Without Form Field","description":"Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.","extended_description":"It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.","effectiveness":"moderate"},{"method":"Manual Static Analysis","description":"To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.","effectiveness":"moderate"}]},{"cwe_id":1100,"name":"Insufficient Isolation of System-Dependent Functions","description":"The product or code does not isolate system-dependent\n\t\t\t\t\tfunctionality into separate standalone modules.","extended_description":"This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1101,"name":"Reliance on Runtime Component in Generated Code","description":"The product uses automatically-generated code that cannot be\n\t\t\t\t\texecuted without a specific runtime support component.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1102,"name":"Reliance on Machine-Dependent Data Representation","description":"The code uses a data representation that relies on low-level\n\t\t\t\t\tdata representation or constructs that may vary across different processors,\n\t\t\t\t\tphysical machines, OSes, or other physical components.","extended_description":"This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1103,"name":"Use of Platform-Dependent Third Party Components","description":"The product relies on third-party components that do\n\t\t\t\t\tnot provide equivalent functionality across all desirable\n\t\t\t\t\tplatforms.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1104,"name":"Use of Unmaintained Third Party Components","description":"The product relies on third-party components that are not\n\t\t\t\t\tactively supported or maintained by the original developer or a trusted proxy\n\t\t\t\t\tfor the original developer.","extended_description":"Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1105,"name":"Insufficient Encapsulation of Machine-Dependent Functionality","description":"The product or code uses machine-dependent functionality, but\n\t\t\t\t\tit does not sufficiently encapsulate or isolate this functionality from\n\t\t\t\t\tthe rest of the code.","extended_description":"This issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1106,"name":"Insufficient Use of Symbolic Constants","description":"The source code uses literal constants that may need to change\n\t\t\t\t\tor evolve over time, instead of using symbolic constants.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1107,"name":"Insufficient Isolation of Symbolic Constant Definitions","description":"The source code uses symbolic constants, but it does not\n\t\t\t\t\tsufficiently place the definitions of these constants into a more centralized or\n\t\t\t\t\tisolated location.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1108,"name":"Excessive Reliance on Global Variables","description":"The code is structured in a way that relies too much on using\n\t\t\t\t\tor setting global variables throughout various points in the code, instead of\n\t\t\t\t\tpreserving the associated information in a narrower, more local\n\t\t\t\t\tcontext.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1109,"name":"Use of Same Variable for Multiple Purposes","description":"The code contains a callable, block, or other code element in\n\t\t\t\t\twhich the same variable is used to control more than one unique task or store\n\t\t\t\t\tmore than one instance of data.","extended_description":"Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":111,"name":"Direct Use of Unsafe JNI","description":"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.","extended_description":"Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement error handling around the JNI call.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use JNI calls if you don't trust the native library.","effectiveness":"","effectiveness_notes":""},{"description":"Be reluctant to use JNI calls. A Java API equivalent may exist.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1110,"name":"Incomplete Design Documentation","description":"The product's design documentation does not adequately describe\n\t\t\t\t\tcontrol flow, data flow, system initialization, relationships between tasks,\n\t\t\t\t\tcomponents, rationales, or other important aspects of the\n\t\t\t\t\tdesign.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1111,"name":"Incomplete I/O Documentation","description":"The product's documentation does not adequately define inputs,\n\t\t\t\t\toutputs, or system/software interfaces.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1112,"name":"Incomplete Documentation of Program Execution","description":"The document does not fully define all mechanisms that are used\n\t\t\t\t\tto control or influence how product-specific programs are\n\t\t\t\t\texecuted.","extended_description":"This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1113,"name":"Inappropriate Comment Style","description":"The source code uses comment styles or formats that are\n\t\t\t\t\tinconsistent or do not follow expected standards for the\n\t\t\t\t\tproduct.","extended_description":"This issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1114,"name":"Inappropriate Whitespace Style","description":"The source code contains whitespace that is inconsistent across\n\t\t\t\t\tthe code or does not follow expected standards for the\n\t\t\t\t\tproduct.","extended_description":"This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1115,"name":"Source Code Element without Standard Prologue","description":"The source code contains elements such as source files \n\t\t\t\t\tthat do not consistently provide a prologue or header that has been\n\t\t\t\t\tstandardized for the project.","extended_description":"The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc. This issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1116,"name":"Inaccurate Comments","description":"The source code contains comments that do not accurately\n\t\t\t\t\tdescribe or explain aspects of the portion of the code with which the comment is\n\t\t\t\t\tassociated.","extended_description":"When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly. This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Verify that each comment accurately reflects what is intended to happen during execution of the code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1117,"name":"Callable with Insufficient Behavioral Summary","description":"The code contains a function or method whose signature and/or associated\n\t\t\t\t\tinline documentation does not sufficiently describe the callable's inputs, outputs,\n\t\t\t\t\tside effects, assumptions, or return codes.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1118,"name":"Insufficient Documentation of Error Handling Techniques","description":"The documentation does not sufficiently describe the techniques\n\t\t\t\t\tthat are used for error handling, exception processing, or similar\n\t\t\t\t\tmechanisms.","extended_description":"Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1119,"name":"Excessive Use of Unconditional Branching","description":"The code uses too many unconditional branches (such as\n\t\t\t\t\t\"goto\").","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":112,"name":"Missing XML Validation","description":"The product accepts XML from an untrusted source but does not validate the XML against the proper schema.","extended_description":"Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always validate XML input against a known XML Schema or DTD. It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1120,"name":"Excessive Code Complexity","description":"The code is too complex, as calculated using a well-defined,\n\t\t\t\t\tquantitative measure.","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities. This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1121,"name":"Excessive McCabe Cyclomatic Complexity","description":"The code contains McCabe cyclomatic complexity that exceeds a\n\tdesirable maximum.","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1122,"name":"Excessive Halstead Complexity","description":"The code is structured in a way that a Halstead complexity\n\t\t\t\t\tmeasure exceeds a desirable maximum.","extended_description":"A variety of Halstead complexity measures exist, such as program vocabulary size or volume. This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1123,"name":"Excessive Use of Self-Modifying Code","description":"The product uses too much self-modifying\n\t\t\t\t\tcode.","extended_description":"This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1124,"name":"Excessively Deep Nesting","description":"The code contains a callable or other code grouping in which\n\t\t\t\t\tthe nesting / branching is too deep.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1125,"name":"Excessive Attack Surface","description":"The product has an attack surface whose quantitative\n\t\t\t\t\tmeasurement exceeds a desirable maximum.","extended_description":"Originating from software security, an \"attack surface\" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses.  In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1126,"name":"Declaration of Variable with Unnecessarily Wide Scope","description":"The source code declares a variable in one scope, but the\n\t\t\t\t\tvariable is only used within a narrower scope.","extended_description":"This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1127,"name":"Compilation with Insufficient Warnings or Errors","description":"The code is compiled without sufficient warnings enabled, which\n\t\t\t\t\tmay prevent the detection of subtle bugs or quality\n\t\t\t\t\tissues.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":113,"name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","description":"The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.","extended_description":"HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response. When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as \"splitting\" the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or \\r, and LF is line feed, also given by %0a or \\n. In addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or \\t) and SP (space, also given as + sign or %20). These types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second \"split\" message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks. HTTP response splitting weaknesses may be present when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Construct HTTP headers very carefully, avoiding the use of non-validated input data.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":114,"name":"Process Control","description":"Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.","extended_description":"Process control vulnerabilities take two forms: An attacker can change the command that the program executes: the attacker explicitly controls what the command is. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":115,"name":"Misinterpretation of Input","description":"The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":116,"name":"Improper Encoding or Escaping of Output","description":"The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.","extended_description":"Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\"). If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.","effectiveness":"","effectiveness_notes":""},{"description":"If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.","effectiveness":"","effectiveness_notes":""},{"description":"Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.","effectiveness":"","effectiveness_notes":""},{"description":"In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.","effectiveness":"","effectiveness_notes":""},{"description":"Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).","effectiveness":"","effectiveness_notes":""},{"description":"Fully specify which encodings are required by components that will be communicating with each other.","effectiveness":"","effectiveness_notes":""},{"description":"When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.","effectiveness":"moderate"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":""}]},{"cwe_id":1164,"name":"Irrelevant Code","description":"The product contains code that is not essential for execution,\n\t     i.e. makes no state changes and has no side effects that alter\n\t     data or control flow, such that removal of the code would have no impact\n\t     to functionality or correctness.","extended_description":"Irrelevant code could include dead code,\n\t     initialization that is not used, empty blocks, code that could be entirely\n\t     removed due to optimization, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":117,"name":"Improper Output Neutralization for Logs","description":"The product does not neutralize or incorrectly neutralizes output that is written to logs.","extended_description":"This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file.","likelihood_of_exploit":"medium","background_details":["Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information."],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1173,"name":"Improper Use of Validation Framework","description":"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.","extended_description":"Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Properly use provided input validation frameworks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.","effectiveness":""}]},{"cwe_id":1174,"name":"ASP.NET Misconfiguration: Improper Model Validation","description":"The ASP.NET application does not use, or incorrectly uses, the model validation framework.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1176,"name":"Inefficient CPU Computation","description":"The product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.","extended_description":"This issue can make the product perform more slowly, possibly in ways that are noticeable to the users.  If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1177,"name":"Use of Prohibited Code","description":"The product uses a function, library, or third party component\n\t     that has been explicitly prohibited, whether by the developer or\n\t     the customer.","extended_description":"The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc. To reduce risk of vulnerabilities, the developer might maintain a list of \"banned\" functions that programmers must avoid using because the functions are difficult or impossible to use securely.  This issue can also make the product more costly and difficult to maintain.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":118,"name":"Incorrect Access of Indexable Resource ('Range Error')","description":"The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1187,"name":"DEPRECATED: Use of Uninitialized Resource","description":"This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1188,"name":"Initialization of a Resource with an Insecure Default","description":"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.","extended_description":"Developers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value.  However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1189,"name":"Improper Isolation of Shared Resources on System-on-a-Chip (SoC)","description":"The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.","extended_description":"A System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.","effectiveness":"high"}]},{"cwe_id":119,"name":"Improper Restriction of Operations within the Bounds of a Memory Buffer","description":"The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.","extended_description":"","likelihood_of_exploit":"high","background_details":["Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced."],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.","effectiveness":"","effectiveness_notes":"This is not a complete solution, since many buffer overflows are not related to strings."},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.","effectiveness":"moderate","effectiveness_notes":"This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode Quality Analysis Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Source Code Quality Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":1190,"name":"DMA Device Enabled Too Early in Boot Phase","description":"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.","extended_description":"DMA is included in a number of devices because it allows\n              data transfer between the computer and the connected device, using\n              direct hardware access to read or write directly to main memory\n              without any OS interaction. An attacker could exploit this to\n              access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually\n              configured/setup during boot time. However, certain IPs that are\n              powered up before boot is complete (known as early boot IPs) may\n              be DMA capable. Such IPs, if not trusted, could launch DMA\n              attacks and gain access to assets that should otherwise be\n              protected.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Utilize an IOMMU to orchestrate IO access from\n                 the start of the boot process.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1191,"name":"On-Chip Debug and Test Interface With Improper Access Control","description":"The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.","extended_description":"A device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present. If authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface. Sometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Authentication and authorization of debug and test interfaces should be part of the architecture and design review process. Withholding of private register documentation from the debug and test interface public specification (\"Security by obscurity\") should not be considered as sufficient security.","effectiveness":""},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Dynamic tests should be done in the pre-silicon and post-silicon stages to verify that the debug and test interfaces are not open by default.","effectiveness":""},{"method":"Fuzzing","description":"Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.","effectiveness":"moderate"}]},{"cwe_id":1192,"name":"Improper Identifier for IP Block used in System-On-Chip (SOC)","description":"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.","extended_description":"A System-on-Chip (SoC) comprises several components (IP) with varied\n           trust requirements. It is required that each IP is identified\n           uniquely and should distinguish itself from other entities in\n           the SoC without any ambiguity. The unique secured identity is\n           required for various purposes. Most of the time the identity is used\n           to route a transaction or perform certain actions, including \n           resetting, retrieving a sensitive information, and acting upon or on\n           behalf of something else. There are several variants of this weakness: A \"missing\" identifier is when the SoC does not define\n\t      any mechanism to uniquely identify the IP. An \"insufficient\" identifier might provide\n\t      some defenses - for example, against the most common\n\t      attacks - but it does not protect against everything\n\t      that is intended. A \"misconfigured\" mechanism occurs when a mechanism\n              is available but not implemented correctly. An \"ignored\" identifier occurs when the SoC/IP has not applied\n\t      any policies or does not act upon the identifier securely.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Every identity generated in the SoC should be unique and\n                    immutable in hardware. The actions that an IP is trusted or\n                    not trusted should be clearly defined, implemented,\n                    configured, and tested. If the definition is implemented via a\n                    policy, then the policy should be immutable or protected with\n                    clear authentication and authorization.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1193,"name":"Power-On of Untrusted Execution Core Before Enabling Fabric Access Control","description":"The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.","extended_description":"After initial reset, System-on-Chip (SoC) fabric access controls and other\n           security features need to be programmed by trusted firmware as part\n           of the boot sequence. If untrusted IPs or peripheral microcontrollers\n\t   are enabled first, then the untrusted component can master\n           transactions on the hardware bus and target memory or other assets to\n           compromise the SoC boot firmware.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":12,"name":"ASP.NET Misconfiguration: Missing Custom Error Page","description":"An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.","extended_description":"","likelihood_of_exploit":"","background_details":["The mode attribute of the <customErrors> tag defines whether custom or default error pages are used."],"potential_mitigations":[{"description":"Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.","effectiveness":"","effectiveness_notes":""},{"description":"Do not attempt to process an error or attempt to mask it.","effectiveness":"","effectiveness_notes":""},{"description":"Verify return values are correct and do not supply sensitive information about the system.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":120,"name":"Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')","description":"The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.","extended_description":"A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the \"classic\" case in which the product copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.","effectiveness":"","effectiveness_notes":"This is not a complete solution, since many buffer overflows are not related to strings."},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Consider adhering to the following rules when allocating and managing an application's memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.","effectiveness":"","effectiveness_notes":""},{"description":"Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.","effectiveness":"moderate","effectiveness_notes":"This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":""},{"method":"Manual Analysis","description":"Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":1204,"name":"Generation of Weak Initialization Vector (IV)","description":"The product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.","extended_description":"By design, some cryptographic primitives\n\t\t\t  (such as block ciphers) require that IVs\n\t\t\t  must have certain properties for the\n\t\t\t  uniqueness and/or unpredictability of an\n\t\t\t  IV. Primitives may vary in how important\n\t\t\t  these properties are. If these properties\n\t\t\t  are not maintained, e.g. by a bug in the\n\t\t\t  code, then the cryptography may be weakened\n\t\t\t  or broken by attacking the IVs themselves.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Different cipher\n\t\t\t    modes have different requirements for\n\t\t\t    their IVs. When choosing and implementing\n\t\t\t    a mode, it is important to understand\n\t\t\t    those requirements in order to keep\n\t\t\t    security guarantees intact. Generally, it\n\t\t\t    is safest to generate a random IV, since\n\t\t\t    it will be both unpredictable and have a\n\t\t\t    very low chance of being non-unique. IVs\n\t\t\t    do not have to be kept secret, so if\n\t\t\t    generating duplicate IVs is a concern, a\n\t\t\t    list of already-used IVs can be kept and\n\t\t\t    checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1209,"name":"Failure to Disable Reserved Bits","description":"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.","extended_description":"Reserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design.  However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Include a feature to disable reserved bits.","effectiveness":"","effectiveness_notes":""},{"description":"Any writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":121,"name":"Stack-based Buffer Overflow","description":"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).","extended_description":"","likelihood_of_exploit":"high","background_details":["There are generally several security-critical data on an execution stack that can lead to arbitrary code execution. The most prominent is the stored return address, the memory address at which execution should continue once the current function is finished executing. The attacker can overwrite this value with some memory address to which the attacker also has write access, into which they place arbitrary code to be run with the full privileges of the vulnerable program. Alternately, the attacker can supply the address of an important call, for instance the POSIX system() call, leaving arguments to the call on the stack. This is often called a return into libc exploit, since the attacker generally forces the program to jump at return time into an interesting routine in the C standard library (libc). Other important data commonly on the stack include the stack pointer and frame pointer, two values that indicate offsets for computing memory addresses. Modifying those values can often be leveraged into a \"write-what-where\" condition."],"potential_mitigations":[{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Use an abstraction library to abstract away risky APIs. Not a complete solution.","effectiveness":"","effectiveness_notes":""},{"description":"Implement and perform bounds checking on input.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":122,"name":"Heap-based Buffer Overflow","description":"A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Pre-design: Use a language or compiler that performs automatic bounds checking.","effectiveness":"","effectiveness_notes":""},{"description":"Use an abstraction library to abstract away risky APIs. Not a complete solution.","effectiveness":"","effectiveness_notes":""},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"},{"description":"Implement and perform bounds checking on input.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.","effectiveness":"","effectiveness_notes":""},{"description":"Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":1220,"name":"Insufficient Granularity of Access Control","description":"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.","extended_description":"Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1221,"name":"Incorrect Register Defaults or Module Parameters","description":"Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.","extended_description":"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design. The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.","effectiveness":"","effectiveness_notes":""},{"description":"The default values of these security sensitive settings need to be defined as part of the design review phase.","effectiveness":"","effectiveness_notes":""},{"description":"Testing phase should use automated tools to test that values are configured per design specifications.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1222,"name":"Insufficient Granularity of Address Regions Protected by Register Locks","description":"The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.","extended_description":"Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later. A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks. As an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1223,"name":"Race Condition for Write-Once Attributes","description":"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.","extended_description":"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"During hardware design all register write-once or sticky fields must be evaluated for proper configuration.","effectiveness":"","effectiveness_notes":""},{"description":"The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1224,"name":"Improper Restriction of Write-Once Bit Fields","description":"The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.","extended_description":"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or \"sticky.\" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value \"1\", wherein they would work as \"write-1-once\" and not \"write-once\".","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"During hardware design all register write-once or sticky fields must be evaluated for proper configuration.","effectiveness":"","effectiveness_notes":""},{"description":"The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1229,"name":"Creation of Emergent Resource","description":"The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.","extended_description":"A product is only expected to behave in a way that was specifically intended by the developer.  Resource allocation and management is expected to be performed explicitly by the associated code.  However, in systems with complex behavior, the product might indirectly produce new kinds of resources that were never intended in the original design.  For example, a covert channel is a resource that was never explicitly intended by the developer, but it is useful to attackers.  \"Parasitic computing,\" while not necessarily malicious in nature, effectively tricks a product into performing unintended computations on behalf of another party.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":123,"name":"Write-what-where Condition","description":"Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a language that provides appropriate memory abstractions.","effectiveness":"","effectiveness_notes":""},{"description":"Use OS-level preventative functionality integrated after the fact. Not a complete solution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1230,"name":"Exposure of Sensitive Information Through Metadata","description":"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.","extended_description":"Developers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources.  If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details.  For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1231,"name":"Improper Prevention of Lock Bit Modification","description":"The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.","extended_description":"In integrated circuits and hardware\n\t\t\t  intellectual property (IP) cores, device configuration\n\t\t\t  controls are commonly programmed after a device power\n\t\t\t  reset by a trusted firmware or software module (e.g.,\n\t\t\t  BIOS/bootloader) and then locked from any further\n\t\t\t  modification. This behavior is commonly implemented using a trusted lock bit. \n\t\t\t  When set, the lock bit disables writes to a protected set of\n\t\t\t  registers or address regions. Design or coding errors in\n\t\t\t  the implementation of the lock bit protection feature\n\t\t\t  may allow the lock bit to be modified or cleared by\n\t\t\t  software after it has been set. Attackers might be able to unlock the system and\n\t\t\t  features that the bit is intended to protect.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Set the lock bit. Power cycle the\n\t     device. Attempt to clear the lock bit.  If the\n\t     information is changed, implement a design\n\t     fix. Retest. Also, attempt to indirectly clear the lock\n\t     bit or bypass it.","effectiveness":"high"}]},{"cwe_id":1232,"name":"Improper Lock Behavior After Power State Transition","description":"Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.","extended_description":"Devices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions. After a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security Lock bit protections should be reviewed for behavior across supported power state transitions. Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1233,"name":"Security-Sensitive Hardware Controls with Missing Lock Bit Protection","description":"The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.","extended_description":"Integrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). However, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Set the lock bit. Attempt to modify the\n\t     information protected by the lock bit. If the information\n\t     is changed, implement a design fix. Retest. Also, attempt\n\t     to indirectly clear the lock bit or bypass\n\t     it.","effectiveness":"high"}]},{"cwe_id":1234,"name":"Hardware Internal or Debug Modes Allow Override of Locks","description":"System configuration protection may be bypassed during debug mode.","extended_description":"Device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security Lock bit protections should be reviewed for any bypass/override modes supported. Any supported override modes either should be removed or protected using authenticated debug modes. Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1235,"name":"Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations","description":"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.","extended_description":"Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner. However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support \"impedance mismatch\" between reference types and primitives.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters.  Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1236,"name":"Improper Neutralization of Formula Elements in a CSV File","description":"The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.","extended_description":"User-provided data is often saved to traditional databases.  This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc.  This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software.  The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV.  Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).","effectiveness":"moderate","effectiveness_notes":"Unfortunately, there is no perfect solution, since different spreadsheet products act differently."},{"description":"If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.","effectiveness":"moderate","effectiveness_notes":"It is not clear how effective this mitigation is with other spreadsheet software."},{"description":"Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.","effectiveness":"limited","effectiveness_notes":"This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely."}],"detection_methods":[]},{"cwe_id":1239,"name":"Improper Zeroization of Hardware Register","description":"The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.","extended_description":"Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.","effectiveness":"","effectiveness_notes":"Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data.  For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055]."}],"detection_methods":[]},{"cwe_id":124,"name":"Buffer Underwrite ('Buffer Underflow')","description":"The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.","extended_description":"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Choose a language that is not susceptible to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1240,"name":"Use of a Cryptographic Primitive with a Risky Implementation","description":"To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.","extended_description":"Cryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of \"primitive\" can vary depending on point of view. See \"Terminology Notes\" for further explanation of some concepts. Cryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time. If a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is \"broken\"). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack. Cryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered.  As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences. This weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].","effectiveness":"high","effectiveness_notes":""},{"description":"Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].","effectiveness":"high","effectiveness_notes":""},{"description":"Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.","effectiveness":"discouraged common practice","effectiveness_notes":""},{"description":"Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.","effectiveness":"discouraged common practice","effectiveness_notes":""},{"description":"Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].","effectiveness":"discouraged common practice","effectiveness_notes":""},{"description":"Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.","effectiveness":"discouraged common practice","effectiveness_notes":""},{"description":"Do not use a checksum as a substitute for a cryptographically generated hash.","effectiveness":"discouraged common practice","effectiveness_notes":""},{"description":"Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.","effectiveness":"high","effectiveness_notes":""},{"description":"When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.","effectiveness":"moderate","effectiveness_notes":""},{"description":"Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.","effectiveness":"high"},{"method":"Manual Analysis","description":"Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.","effectiveness":"moderate"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"For hardware, during the implementation (pre-Silicon / post-Silicon) phase, dynamic tests should be done to ensure that outputs from cryptographic routines are indeed working properly, such as test vectors provided by NIST [REF-1236].","effectiveness":"moderate"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).","effectiveness":"moderate"}]},{"cwe_id":1241,"name":"Use of Predictable Algorithm in Random Number Generator","description":"The device uses an algorithm that is predictable and generates a pseudo-random number.","extended_description":"Pseudo-random number generator algorithms are predictable because their registers have a finite number of possible states, which eventually lead to repeating patterns. As a result, pseudo-random number generators (PRNGs) can compromise their randomness or expose their internal state to various attacks, such as reverse engineering or tampering. It is highly recommended to use hardware-based true random number generators (TRNGs) to ensure the security of encryption schemes. TRNGs generate unpredictable, unbiased, and independent random numbers because they employ physical phenomena, e.g., electrical noise, as sources to generate random numbers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"A true random number generator should be specified for cryptographic algorithms.","effectiveness":"","effectiveness_notes":""},{"description":"A true random number generator should be implemented for cryptographic algorithms.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1242,"name":"Inclusion of Undocumented Features or Chicken Bits","description":"The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.","extended_description":"A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as \"chicken bits\". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1243,"name":"Sensitive Non-Volatile Information Not Protected During Debug","description":"Access to security-sensitive information stored in fuses is not limited during debug.","extended_description":"Several security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Disable access to security-sensitive information stored in fuses directly and also reflected from  temporary storage locations when in debug mode.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1244,"name":"Internal Asset Exposed to Unsafe Debug Access Level or State","description":"The product uses physical debug or test\n        interfaces with support for multiple access levels, but it\n        assigns the wrong debug access level to an internal asset,\n        providing unintended access to the asset from untrusted debug\n        agents.","extended_description":"Debug authorization can have multiple levels of\n\t  access, defined such that different system internal assets\n\t  are accessible based on the current authorized debug\n\t  level. Other than debugger authentication (e.g., using\n\t  passwords or challenges), the authorization can also be\n\t  based on the system state or boot stage. For example, full\n\t  system debug access might only be allowed early in boot\n\t  after a system reset to ensure that previous session data is\n\t  not accessible to the authenticated debugger. If this protection mechanism does not ensure that\n          internal assets have the correct debug access level during\n          each boot stage or change in system state, an attacker could\n          obtain sensitive information from the internal asset using a\n          debugger.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.","effectiveness":"high","effectiveness_notes":""},{"description":"Apply blinding [REF-1219] or masking techniques in strategic areas.","effectiveness":"limited","effectiveness_notes":""},{"description":"Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.","effectiveness":"limited","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Check 2 devices for their passcode to authenticate access to JTAG/debugging ports. If the passcodes are missing or the same, update the design to fix and retest. Check communications over JTAG/debugging ports for encryption. If the communications are not encrypted, fix the design and retest.","effectiveness":"moderate"}]},{"cwe_id":1245,"name":"Improper Finite State Machines (FSMs) in Hardware Logic","description":"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.","extended_description":"The functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1246,"name":"Improper Write Handling in Limited-write Non-Volatile Memories","description":"The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.","extended_description":"Non-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Include secure wear leveling algorithms and ensure they may not be bypassed.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1247,"name":"Improper Protection Against Voltage and Clock Glitches","description":"The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.","extended_description":"A device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Put the processor in an infinite\n\t\t\tloop, which is then followed by instructions\n\t\t\tthat should not ever be executed, since the\n\t\t\tloop is not expected to exit.  After the loop,\n\t\t\ttoggle an I/O bit (for oscilloscope monitoring\n\t\t\tpurposes), print a console message, and\n\t\t\treenter the loop.  Note that to ensure that\n\t\t\tthe loop exit is actually captured, many NOP\n\t\t\tinstructions should be coded after the loop\n\t\t\tbranch instruction and before the I/O bit\n\t\t\ttoggle and the print statement. Margining the clock consists of varying the clock\n\t\t\tfrequency until an anomaly occurs. This could be a\n\t\t\tcontinuous frequency change or it could be a single\n\t\t\tcycle. The single cycle method is described here. For\n\t\t\tevery 1000th clock pulse, the clock cycle is shortened by\n\t\t\t10 percent. If no effect is observed, the width is\n\t\t\tshortened by 20%. This process is continued in 10%\n\t\t\tincrements up to and including 50%. Note that the cycle\n\t\t\ttime may be increased as well, down to seconds per\n\t\t\tcycle. Separately, the voltage is margined. Note that\n\t\t\tthe voltage could be increased or decreased. Increasing\n\t\t\tthe voltage has limits, as the circuitry may not be able\n\t\t\tto withstand a drastically increased voltage. This process\n\t\t\tstarts with a 5% reduction of the DC supply to the CPU\n\t\t\tchip for 5 millisecond repeated at 1KHz. If this has no\n\t\t\teffect, the process is repeated, but a 10% reduction is\n\t\t\tused. This process is repeated at 10% increments down to a\n\t\t\t50% reduction. If no effects are observed at 5\n\t\t\tmillisecond, the whole process is repeated using a 10\n\t\t\tmillisecond pulse. If no effects are observed, the process\n\t\t\tis repeated in 10 millisecond increments out to 100\n\t\t\tmillisecond pulses. While these are suggested starting points for\n\t\t\ttesting circuitry for weaknesses, the limits may need to\n\t\t\tbe pushed further at the risk of device damage. See\n\t\t\t[REF-1217] for descriptions of Smart Card attacks against\n\t\t\ta clock (section 14.6.2) and using a voltage glitch\n\t\t\t(section 15.5.3).","effectiveness":"moderate"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.","effectiveness":""},{"method":"Architecture or Design Review","description":"Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\".","effectiveness":""},{"method":"Architecture or Design Review","description":"Many SoCs come equipped with a built-in Dynamic Voltage and Frequency Scaling (DVFS) that can control the voltage and clocks via software alone. However, there have been demonstrated attacks (like Plundervolt and CLKSCREW) that target this DVFS [REF-1081] [REF-1082]. During the design and implementation phases, one needs to check if the interface to this power management feature is available from unprivileged SW (CWE-1256), which would make the attack very easy.","effectiveness":""}]},{"cwe_id":1248,"name":"Semiconductor Defects in Hardware Logic with Security-Sensitive Implications","description":"The security-sensitive hardware module contains semiconductor defects.","extended_description":"A semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, the security objectives of the hardware module may be compromised.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"While semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.","effectiveness":"","effectiveness_notes":""},{"description":"Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects.  When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1249,"name":"Application-Level Admin Tool with Inconsistent View of Underlying Operating System","description":"The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.","extended_description":"Many products provide web-based applications or other interfaces for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems.  When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise. For example, numerous systems utilize a web\n\t\t\t\tfront-end for administrative control. They also offer\n\t\t\t\tthe ability to add, alter, and drop users with various\n\t\t\t\tprivileges as it relates to the functionality of the\n\t\t\t\tsystem.  A potential architectural weakness may exist\n\t\t\t\twhere the user information reflected in the web\n\t\t\t\tinterface does not mirror the users in the underlying\n\t\t\t\toperating system.  Many web UI or REST APIs use the\n\t\t\t\tunderlying operating system for authentication; the\n\t\t\t\tsystem's logic may also track an additional set of\n\t\t\t\tuser capabilities within configuration files\n\t\t\t\tand datasets for authorization capabilities. When\n\t\t\t\tthere is a discrepancy between the user information in\n\t\t\t\tthe UI or REST API's interface system and the\n\t\t\t\tunderlying operating system's user listing, this may\n\t\t\t\tintroduce a weakness into the system.  For example, if an\n\t\t\t\tattacker compromises the OS and adds a new user\n\t\t\t\taccount - a \"ghost\" account - then the attacker could escape detection if\n\t\t\t\tthe management tool does not list the newly-added\n\t\t\t\taccount. This discrepancy could be exploited in several ways: A rogue admin could insert a new account into a system that will\npersist if they are terminated or wish to take action on a system that\ncannot be directly associated with them. An attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh. An attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all. An attacker could create an admin\n\t\t\t\t\t  account which is viewable by an administrator,\n\t\t\t\t\t  use this account to create the ghost account,\n\t\t\t\t\t  delete logs and delete the first created admin\n\t\t\t\t\t  account. Many of these attacker scenarios can be\n\t\t\t\trealized by leveraging separate vulnerabilities\n\t\t\t\trelated to XSS, command injection, authentication\n\t\t\t\tbypass, or logic flaws on the various systems.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":125,"name":"Out-of-bounds Read","description":"The product reads data past the end, or before the beginning, of the intended buffer.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that provides appropriate memory abstractions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1250,"name":"Improper Preservation of Consistency Between Independent Representations of Shared State","description":"The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.","extended_description":"In highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same \"view\" of the overall system and operate in a coordinated fashion.  For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same \"view\" of the world.  Alternately, a processor's Memory Management Unit (MMU) might have \"shadow\" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory. In such environments, it becomes critical for\n\t\tthe product to ensure that this \"shared state\" is\n\t\tconsistently modified across all distributed systems.\n\t\tIf state is not consistently maintained across all\n\t\tsystems, then critical transactions might take place\n\t\tout of order, or some users might not get the same\n\t\tdata as other users.  When this inconsistency affects\n\t\tcorrectness of operations, it can introduce\n\t\tvulnerabilities in mechanisms that depend on\n\t\tconsistent state.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1251,"name":"Mirrored Regions with Different Values","description":"The product's architecture mirrors regions without ensuring that their contents always stay in sync.","extended_description":"Having mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise. In the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a \"local\" copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true. During hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called \"shadow copies\" or \"mirrored copies.\" If the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast. This situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: After the values in the original copy change, due to some reason the original copy does not send the \"update\" request to its shadow copies. After the values in the original copy change, the original copy dutifully sends the \"update\" request to its shadow copies, but due to some reason the shadow copy does not \"execute\" this update request. After the values in the original copy change, the original copy sends the \"update\" request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has \"new\" values and the shadow copy is still holding the \"old\" values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins. The attacker might send a \"spoofed\" update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker. Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the \"old\" value, and the shadow copy has the \"new\" value.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are: Make this out-of-sync time period as small as possible, and Make the update process as robust as possible.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1252,"name":"CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations","description":"The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.","extended_description":"CPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).","effectiveness":"","effectiveness_notes":""},{"description":"If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1253,"name":"Incorrect Selection of Fuse Values","description":"The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.","extended_description":"Fuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1254,"name":"Incorrect Comparison Logic Granularity","description":"The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.","extended_description":"Comparison logic is used to compare a variety of objects including passwords, Message \n         Authentication Codes (MACs), and responses to verification challenges. When comparison logic is \n         implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a \n         comparison failure, an attacker can exploit this implementation to identify when exactly \n         the failure occurred. With multiple attempts, the attacker may be able to guesses the correct \n         password/response to challenge and elevate their privileges.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1255,"name":"Comparison Logic is Vulnerable to Power Side-Channel Attacks","description":"A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.","extended_description":"The power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a \"good\" entry and a \"bad\" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.","effectiveness":"","effectiveness_notes":""},{"description":"Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.","effectiveness":"","effectiveness_notes":""},{"description":"An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.","effectiveness":"","effectiveness_notes":""},{"description":"If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.","effectiveness":"","effectiveness_notes":""},{"description":"During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1256,"name":"Improper Restriction of Software Interfaces to Hardware Features","description":"The product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.","extended_description":"It is frequently assumed that physical attacks\n              such as fault injection and side-channel analysis\n              require an attacker to have physical access to the\n              target device.  This assumption may be false if the\n              device has improperly secured power management features,\n              or similar features.  For mobile devices, minimizing\n              power consumption is critical, but these devices run a\n              wide variety of applications with different performance\n              requirements. Software-controllable mechanisms to\n              dynamically scale device voltage and frequency and\n              monitor power consumption are common features in today's\n              chipsets, but they also enable attackers to mount fault\n              injection and side-channel attacks without having\n              physical access to the device. Fault injection attacks involve strategic\n              manipulation of bits in a device to achieve a desired\n              effect such as skipping an authentication step,\n              elevating privileges, or altering the output of a\n              cryptographic operation.  Manipulation of the device\n              clock and voltage supply is a well-known technique to\n              inject faults and is cheap to implement with physical\n              device access.  Poorly protected power management\n              features allow these attacks to be performed from\n              software.  Other features, such as the ability to write\n              repeatedly to DRAM at a rapid rate from unprivileged\n              software, can result in bit flips in other memory\n              locations (Rowhammer, [REF-1083]). Side channel analysis requires gathering\n\t\t\t  measurement traces of physical quantities such as power\n\t\t\t  consumption.  Modern processors often include power\n\t\t\t  metering capabilities in the hardware itself (e.g.,\n\t\t\t  Intel RAPL) which if not adequately protected enable\n\t\t\t  attackers to gather measurements necessary for\n\t\t\t  performing side-channel attacks from software.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Perform a security evaluation of system-level\n\t\tarchitecture and design with software-aided physical attacks\n\t\tin scope.","effectiveness":""},{"method":"Automated Dynamic Analysis","description":"Use custom software to change registers that control clock settings or power settings to try to bypass security locks, or repeatedly write DRAM to try to change adjacent locations. This can be effective in extracting or changing data. The drawback is that it cannot be run before manufacturing, and it may require specialized software.","effectiveness":"moderate"}]},{"cwe_id":1257,"name":"Improper Access Control Applied to Mirrored or Aliased Memory Regions","description":"Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.","extended_description":"Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO). Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell. This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address. A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory. An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.","effectiveness":"","effectiveness_notes":""},{"description":"The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1258,"name":"Exposure of Sensitive System Information Due to Uncleared Debug Information","description":"The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.","extended_description":"Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1259,"name":"Improper Restriction of Security Token Assignment","description":"The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.","extended_description":"Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security Token assignment review checks for design inconsistency and common weaknesses. Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":126,"name":"Buffer Over-read","description":"The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.","extended_description":"This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1260,"name":"Improper Handling of Overlap Between Protected Memory Ranges","description":"The product allows address regions to overlap, which can result in the bypassing of intended memory protection.","extended_description":"Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software. If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.","effectiveness":"","effectiveness_notes":""},{"description":"For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied.  In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.","effectiveness":"high"}]},{"cwe_id":1261,"name":"Improper Handling of Single Event Upsets","description":"The hardware logic does not effectively handle when single-event upsets (SEUs) occur.","extended_description":"Technology trends such as CMOS-transistor down-sizing, use of \n            new materials, and system-on-chip architectures continue to increase the \n            sensitivity of systems to soft errors. These errors are random, and \n            their causes might be internal (e.g., interconnect coupling) or external \n            (e.g., cosmic radiation). These soft errors are not permanent in nature \n            and cause temporary bit flips known as single-event upsets (SEUs). \n            SEUs are induced errors in circuits caused when charged particles lose \n            energy by ionizing the medium through which they pass, leaving behind a \n            wake of electron-hole pairs that cause temporary failures. If these \n            failures occur in security-sensitive modules in a chip, it might \n            compromise the security guarantees of the chip. For instance, these \n            temporary failures could be bit flips that change the privilege of\n\t    a regular user to root.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement triple-modular redundancy around security-sensitive modules.","effectiveness":"","effectiveness_notes":""},{"description":"SEUs mostly affect SRAMs.  For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1262,"name":"Improper Access Control for Register Interface","description":"The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.","extended_description":"Software commonly accesses peripherals in a System-on-Chip (SoC) or other device through a memory-mapped register interface. Malicious software could tamper with any security-critical hardware data that is accessible directly or indirectly through the register interface, which could lead to a loss of confidentiality and integrity.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Design proper policies for hardware register access from software.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that access control policies for register access are implemented in accordance with the specified design.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This is applicable in the Architecture phase before implementation started. Make sure access policy is specified for the entire memory map. Manual analysis may not ensure the implementation is correct.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"Registers controlling hardware should have access control implemented. This access control may be checked manually for correct implementation. Items to check consist of how are trusted parties set, how are trusted parties verified, how are accesses verified, etc. Effectiveness of a manual analysis will vary depending upon how complicated the interface is constructed.","effectiveness":"moderate"},{"method":"Simulation / Emulation","description":"Functional simulation is applicable during the Implementation Phase. Testcases must be created and executed for memory mapped registers to verify adherence to the access control policy. This method can be effective, since functional verification needs to be performed on the design, and verification for this weakness will be included. There can be difficulty covering the entire memory space during the test.","effectiveness":"moderate"},{"method":"Formal Verification","description":"Formal verification is applicable during the Implementation phase. Assertions need to be created in order to capture illegal register access scenarios and prove that they cannot occur. Formal methods are exhaustive and can be very effective, but creating the cases for large designs may be complex and difficult.","effectiveness":"high"},{"method":"Automated Analysis","description":"Information flow tracking can be applicable during the Implementation phase. Security sensitive data (assets) - for example, as stored in registers - is automatically tracked over time through the design to verify the data doesn't reach illegal destinations that violate the access policies for the memory map. This method can be very effective when used together with simulation and emulation, since detecting violations doesn't rely on specific scenarios or data values. This method does rely on simulation and emulation, so testcases must exist in order to use this method.","effectiveness":"high"},{"method":"Architecture or Design Review","description":"Manual documentation review of the system memory map, register specification, and permissions associated with accessing security-relevant functionality exposed via memory-mapped registers.","effectiveness":"moderate"},{"method":"Fuzzing","description":"Perform penetration testing (either manual or semi-automated with fuzzing) to verify that access control mechanisms such as the memory protection units or on-chip bus firewall settings adequately protect critical hardware registers from software access.","effectiveness":"moderate"}]},{"cwe_id":1263,"name":"Improper Physical Access Control","description":"The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.","extended_description":"Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.","effectiveness":"","effectiveness_notes":""},{"description":"The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1264,"name":"Hardware Logic with Insecure De-Synchronization between Control and Data Channels","description":"The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.","extended_description":"Many high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1265,"name":"Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls","description":"During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.","extended_description":"In a complex product, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently a concern in products that execute scripts from untrusted sources. Examples of such products are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.","effectiveness":"high","effectiveness_notes":""},{"description":"Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1266,"name":"Improper Scrubbing of Sensitive Data from Decommissioned Device","description":"The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.","extended_description":"When a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. \"scrubbing.\"  Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.","effectiveness":"","effectiveness_notes":""},{"description":"The manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility.","effectiveness":"","effectiveness_notes":""},{"description":"If the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1267,"name":"Policy Uses Obsolete Encoding","description":"The product uses an obsolete encoding mechanism to implement access controls.","extended_description":"Within a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security Token Decoders should be reviewed for design inconsistency and common weaknesses. Access and programming flows should be tested in both pre-silicon and post-silicon testing.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1268,"name":"Policy Privileges are not Assigned Consistently Between Control and Data Agents","description":"The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.","extended_description":"Integrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves. Resources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1269,"name":"Product Released in Non-Release Configuration","description":"The product released to market is released in pre-production or manufacturing configuration.","extended_description":"Products in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to: Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity) Ability to read/write/modify/dump internal state (including registers and memory) Ability to change system configurations Ability to run hidden or private commands that are not allowed during production (as they expose IP). The above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state. Complexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called \"complete\" and have the \"Manufacturing Complete\" fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":127,"name":"Buffer Under-read","description":"The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.","extended_description":"This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1270,"name":"Generation of Incorrect Security Tokens","description":"The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.","extended_description":"Systems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be \"read\", \"write\", \"program\", \"reset\", \"fetch\", \"compute\", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses. Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1271,"name":"Uninitialized Value on Reset for Registers Holding Security Settings","description":"Security-critical logic is not set to a known value on reset.","extended_description":"When the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.","effectiveness":"","effectiveness_notes":""},{"description":"All registers holding security-critical information should be set to a specific value on reset.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1272,"name":"Sensitive Information Uncleared Before Debug/Power State Transition","description":"The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.","extended_description":"A device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"During state transitions, information not needed in the next state should be removed before the transition to the next state.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.","effectiveness":"high"}]},{"cwe_id":1273,"name":"Device Unlock Credential Sharing","description":"The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.","extended_description":"\"Unlocking a device\" often means activating certain unadvertised debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is \"locked\" in the production part. Unless the device gets unlocked by supplying the proper credentials, the debug capabilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are all employed by the same company, the risk of compromise of the credentials is greatly reduced. However, the risk is greater when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1274,"name":"Improper Access Control for Volatile Memory Containing Boot Code","description":"The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.","extended_description":"Adversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code. As a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code. If the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.","effectiveness":"","effectiveness_notes":""},{"description":"Test the volatile-memory protections to ensure they are safe from modification or untrusted code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Ensure the volatile memory is lockable or has locks. Ensure the volatile memory is locked for writes from untrusted agents or adversaries. Try modifying the volatile memory from an untrusted agent, and ensure these writes are dropped.","effectiveness":"high"},{"method":"Manual Analysis","description":"Analyze the device using the following steps: Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory. Identify the volatile memory regions that are used for storing loaded system executable program. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1. Only trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.","effectiveness":"moderate"}]},{"cwe_id":1275,"name":"Sensitive Cookie with Improper SameSite Attribute","description":"The SameSite attribute for sensitive cookies is not set, or an insecure value is used.","extended_description":"The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.","effectiveness":"high","effectiveness_notes":"While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1276,"name":"Hardware Child Block Incorrectly Connected to Parent System","description":"Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.","extended_description":"Individual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1277,"name":"Firmware Not Updateable","description":"The product does not provide its\n\t\t\tusers with the ability to update or patch its\n\t\t\tfirmware to address any vulnerabilities or\n\t\t\tweaknesses that may be present.","extended_description":"Without the ability to\n\t\t\tpatch or update firmware, consumers will be\n\t\t\tleft vulnerable to exploitation of any known\n\t\t\tvulnerabilities, or any vulnerabilities that\n\t\t\tare discovered in the future. This can expose\n\t\t\tconsumers to permanent risk throughout the\n\t\t\tentire lifetime of the device, which could be\n\t\t\tyears or decades. Some external protective\n\t\t\tmeasures and mitigations might be employed to\n\t\t\taid in preventing or reducing the risk of\n\t\t\tmalicious attack, but the root weakness cannot\n\t\t\tbe corrected.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.","effectiveness":"","effectiveness_notes":""},{"description":"Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.","effectiveness":"","effectiveness_notes":""},{"description":"Implement the necessary functionality to allow the firmware to be updated.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Create a new installable boot image of the current build with a minor version number change. Use the standard installation method to update the boot image. Verify that the minor version number has changed. Create a fake image. Verify that the boot updater will not install the fake image and generates an \"invalid image\" error message or equivalent.","effectiveness":"high"},{"method":"Architecture or Design Review","description":"Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.","effectiveness":"moderate"},{"method":"Manual Dynamic Analysis","description":"Determine if there is a lack of a capability to update read-only memory (ROM) structure. This could manifest as a difference between the latest firmware version and the current version within the device.","effectiveness":"high"}]},{"cwe_id":1278,"name":"Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques","description":"Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.","extended_description":"The physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope. The goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1279,"name":"Cryptographic Operations are run Before Supporting Units are Ready","description":"Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.","extended_description":"Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Best practices should be used to design cryptographic systems.","effectiveness":"","effectiveness_notes":""},{"description":"Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":128,"name":"Wrap-around Error","description":"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.","extended_description":"","likelihood_of_exploit":"medium","background_details":["Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may \"wrap\" to very large negative values."],"potential_mitigations":[{"description":"Requirements specification: The choice could be made to use a language that is not susceptible to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Provide clear upper and lower bounds on the scale of any protocols designed.","effectiveness":"","effectiveness_notes":""},{"description":"Perform validation on all incremented variables to ensure that they remain within reasonable bounds.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1280,"name":"Access Control Check Implemented After Asset is Accessed","description":"A product's hardware-based access control check occurs after the asset has been accessed.","extended_description":"The product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement the access control check first. Access should only be given to asset if agent is authorized.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1281,"name":"Sequence of Processor Instructions Leads to Unexpected Behavior","description":"Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.","extended_description":"If the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior.  Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security.  However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences.","effectiveness":"","effectiveness_notes":""},{"description":"Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior.  See [REF-1108].","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1282,"name":"Assumed-Immutable Data is Stored in Writable Memory","description":"Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field.","extended_description":"Security services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"All immutable code or data should be programmed into ROM or write-once memory.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1283,"name":"Mutable Attestation or Measurement Reporting Data","description":"The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.","extended_description":"A System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Measurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1284,"name":"Improper Validation of Specified Quantity in Input","description":"The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.","extended_description":"Specified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1285,"name":"Improper Validation of Specified Index, Position, or Offset in Input","description":"The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.","extended_description":"Often, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file.  When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources.  This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1286,"name":"Improper Validation of Syntactic Correctness of Input","description":"The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.","extended_description":"Often, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages.  When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1287,"name":"Improper Validation of Specified Type of Input","description":"The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.","extended_description":"When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type. This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1288,"name":"Improper Validation of Consistency within Input","description":"The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.","extended_description":"Some input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements.  When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1289,"name":"Improper Validation of Unsafe Equivalence in Input","description":"The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.","extended_description":"Attackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component.  For example, a simple XSS protection mechanism might try to validate that an input has no \"<script>\" tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could inject \"<ScrIpT>\" and trigger XSS.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":129,"name":"Improper Validation of Array Index","description":"The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.","effectiveness":"","effectiveness_notes":""},{"description":"Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report array index errors that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":""},{"method":"Black Box","description":"Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.","effectiveness":""}]},{"cwe_id":1290,"name":"Incorrect Decoding of Security Identifiers","description":"The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.","extended_description":"In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections. A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent's security identifier is decoded into a trusted agent's security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security identifier decoders must be reviewed for design consistency and common weaknesses.","effectiveness":"","effectiveness_notes":""},{"description":"Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1291,"name":"Public Key Re-Use for Signing both Debug and Production Code","description":"The same public key is used for signing both debug and production code.","extended_description":"A common usage of public-key cryptography is to verify the integrity and authenticity of another entity (for example a firmware binary). If a company wants to ensure that its firmware runs only on its own hardware, before the firmware runs, an encrypted hash of the firmware image will be decrypted with the public key and then verified against the now-computed hash of the firmware image. This means that the public key forms the root of trust, which necessitates that the public key itself must be protected and used properly. During the development phase, debug firmware enables many hardware debug hooks, debug modes, and debug messages for testing. Those debug facilities provide significant, additional views about the firmware's capability and, in some cases, additional capability into the chip or SoC. If compromised, these capabilities could be exploited by an attacker to take full control of the system. Once the product exits the manufacturing stage and enters production, it is good practice to use a different public key. Debug firmware images are known to leak. With the debug key being reused as the production key, the debug image will also work on the production image. Thus, it will open all the internal, debug capabilities to the attacker. If a different public key is used for the production image, even if the attacker gains access to the debug firmware image, they will not be able to run it on a production machine. Thus, damage will be limited to the intellectual property leakage resulting from the debug image.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use different keys for Production and Debug","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Compare the debug key with the production key to make sure that they are not the same.","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Compare the debug key with the production key to make sure that they are not the same.","effectiveness":"high"}]},{"cwe_id":1292,"name":"Incorrect Conversion of Security Identifiers","description":"The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.","extended_description":"In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other. A common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security identifier decoders must be reviewed for design inconsistency and common weaknesses.","effectiveness":"","effectiveness_notes":""},{"description":"Access and programming flows must be tested in pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1293,"name":"Missing Source Correlation of Multiple Independent Data","description":"The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.","extended_description":"To operate successfully, a product sometimes has to implicitly trust the integrity of an information source. When information is implicitly signed, one can ensure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources.","effectiveness":"","effectiveness_notes":""},{"description":"Failure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1294,"name":"Insecure Security Identifier Mechanism","description":"The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.","extended_description":"Systems-On-Chip (Integrated circuits and hardware\n                    engines) implement Security Identifiers to\n                    differentiate/identify actions originated from various\n                    agents. These actions could be 'read', 'write', 'program',\n                    'reset', 'fetch', 'compute', etc. Security identifiers are\n                    generated and assigned to every agent in the System (SoC)\n                    that is either capable of generating an action or receiving\n                    an action from another agent. Every agent could be assigned\n                    a unique, Security Identifier based on its trust level or\n                    privileges. A broad class of flaws can exist in the Security\n                    Identifier process, including but not limited to missing\n                    security identifiers, improper conversion of security\n                    identifiers, incorrect generation of security identifiers,\n                    etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.","effectiveness":"","effectiveness_notes":""},{"description":"Access and programming flows must be tested in pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1295,"name":"Debug Messages Revealing Unnecessary Information","description":"The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.","extended_description":"Debug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the \"security by obscurity\" factor. While \"security by obscurity\" alone is insufficient, it can help as a part of \"Defense-in-depth\".","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1296,"name":"Incorrect Chaining or Granularity of Debug Components","description":"The product's debug components contain incorrect chaining or granularity of debug components.","extended_description":"For debugging and troubleshooting a chip, several hardware design elements are often implemented, including: Various Test Access Ports (TAPs) allow boundary scan commands to be executed. For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a \"stimulus and response\" mechanism. Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.","effectiveness":"high"}]},{"cwe_id":1297,"name":"Unprotected Confidential Information on Device is Accessible by OSAT Vendors","description":"The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.","extended_description":"In contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary. Also, architect the product in such a way that, when an \"unlock device\" request comes, it only unlocks that specific part and not all the parts for that product line. Ensure that the product's non-volatile memory (NVM) is scrubbed of all confidential information and secrets before handing it over to an OSAT. Arrange to secure all communication between an OSAT facility and the chipmaker.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.","effectiveness":"moderate"}]},{"cwe_id":1298,"name":"Hardware Logic Contains Race Conditions","description":"A race condition in the hardware logic results in undermining security guarantees of the system.","extended_description":"A race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions.","effectiveness":"","effectiveness_notes":""},{"description":"Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1299,"name":"Missing Protection Mechanism for Alternate Hardware Interface","description":"The lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.","extended_description":"An asset inside a chip might have access-control\n                    protections through one interface. However, if all paths to\n                    the asset are not protected, an attacker might compromise\n                    the asset through alternate paths. These alternate paths\n                    could be through shadow or mirror registers inside the IP\n                    core, or could be paths from other external-facing\n                    interfaces to the IP core or SoC. Consider an SoC with various interfaces such as UART,\n                    SMBUS, PCIe, USB, etc. If access control is implemented for\n                    SoC internal registers only over the PCIe interface, then\n                    an attacker could still modify the SoC internal registers\n                    through alternate paths by coming through interfaces such\n                    as UART, SMBUS, USB, etc. Alternatively, attackers might be able to bypass\n                    existing protections by exploiting unprotected, shadow\n                    registers. Shadow registers and mirror registers typically\n                    refer to registers that can be accessed from multiple\n                    addresses. Writing to or reading from the aliased/mirrored\n                    address has the same effect as writing to the address of\n                    the main register. They are typically implemented within an\n                    IP core or SoC to temporarily hold certain data. These data\n                    will later be updated to the main register, and both\n                    registers will be in synch. If the shadow registers are not\n                    access-protected, attackers could simply initiate\n                    transactions to the shadow registers and compromise system\n                    security.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect assets from accesses against all potential interfaces and alternate paths.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Protect assets from accesses against all potential interfaces and alternate paths.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Protect assets from accesses against all potential interfaces and alternate paths.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":13,"name":"ASP.NET Misconfiguration: Password in Configuration File","description":"Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":130,"name":"Improper Handling of Length Parameter Inconsistency","description":"The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.","extended_description":"If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.","effectiveness":"","effectiveness_notes":""},{"description":"Do not let the user control the size of the buffer.","effectiveness":"","effectiveness_notes":""},{"description":"Validate that the length of the user-supplied data is consistent with the buffer size.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1300,"name":"Improper Protection of Physical Side Channels","description":"The device does not contain sufficient protection\n\tmechanisms to prevent physical side channels from exposing\n\tsensitive information due to patterns in physically observable\n\tphenomena such as variations in power consumption,\n\telectromagnetic emissions (EME), or acoustic emissions.","extended_description":"An adversary could monitor and measure physical\n\t  phenomena to detect patterns and make inferences, even if it\n\t  is not possible to extract the information in the digital\n\t  domain. Physical side channels have been well-studied for\n\t  decades in the context of breaking implementations of\n\t  cryptographic algorithms or other attacks against security\n\t  features. These side channels may be easily observed by an\n\t  adversary with physical access to the device, or using a\n\t  tool that is in close proximity.  If the adversary can\n\t  monitor hardware operation and correlate its data processing\n\t  with power, EME, and acoustic measurements, the adversary\n\t  might be able to recover of secret keys and data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Apply blinding or masking techniques to implementations of cryptographic algorithms.","effectiveness":"","effectiveness_notes":""},{"description":"Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Perform a set of leakage detection tests such as the procedure outlined in the Test Vector Leakage Assessment (TVLA) test requirements for AES [REF-1230].  TVLA is the basis for the ISO standard 17825 [REF-1229]. A separate methodology is provided by [REF-1228]. Note that sole reliance on this method might not yield expected results [REF-1239] [REF-1240].","effectiveness":"moderate"},{"method":"Manual Analysis","description":"Post-silicon, perform full side-channel attacks (penetration testing) covering as many known leakage models as possible against test code.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"Pre-silicon - while the aforementioned TVLA methods can be performed post-silicon, models of device power consumption or other physical emanations can be built from information present at various stages of the hardware design process before fabrication. TVLA or known side-channel attacks can be applied to these simulated traces and countermeasures applied before tape-out.  Academic research in this field includes [REF-1231] [REF-1232] [REF-1233].","effectiveness":"moderate"}]},{"cwe_id":1301,"name":"Insufficient or Incomplete Data Removal within Hardware Component","description":"The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.","extended_description":"Physical properties of hardware devices, such as remanence of magnetic media, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed. Recovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Apply blinding or masking techniques to implementations of cryptographic algorithms.","effectiveness":"","effectiveness_notes":""},{"description":"Alter the method of erasure, add protection of media, or destroy the media to protect the data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1302,"name":"Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)","description":"The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.","extended_description":"In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier.  This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions. A weakness that can exist in such transaction schemes is that the source agent does not consistently include the necessary Security Identifier with the transaction.  If the Security Identifier is missing, the destination agent might drop the message (resulting in an inadvertent Denial-of-Service (DoS)) or take inappropriate action by default in its attempt to execute the transaction, resulting in privilege escalation or provision of unintended access.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Transaction details must be reviewed for design inconsistency and common weaknesses.","effectiveness":"","effectiveness_notes":""},{"description":"Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1303,"name":"Non-Transparent Sharing of Microarchitectural Resources","description":"Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.","extended_description":"Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer's view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context. Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel. If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.","effectiveness":"","effectiveness_notes":""},{"description":"Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1304,"name":"Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation","description":"The product performs a power save/restore\n            operation, but it does not ensure that the integrity of\n            the configuration state is maintained and/or verified between\n\t    the beginning and ending of the operation.","extended_description":"Before powering down, the Intellectual\n                Property (IP) saves current state (S) to persistent\n                storage such as flash or always-on memory in order to\n                optimize the restore operation.  During this process,\n                an attacker with access to the persistent storage may\n                alter (S) to a configuration that could potentially\n                modify privileges, disable protections, and/or cause\n                damage to the hardware. If the IP does not validate\n                the configuration state stored in persistent memory,\n                upon regaining power or becoming operational again,\n                the IP could be compromised through the activation of\n                an unwanted/harmful configuration.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inside the IP, incorporate integrity checking\n                        on the configuration state via a cryptographic\n                        hash. The hash can be protected inside the IP such as\n                        by storing it in internal registers which never lose\n                        power. Before powering down, the IP performs a hash of\n                        the configuration and saves it in these persistent\n                        registers. Upon restore, the IP performs a hash of the\n                        saved configuration and compares it with the\n                        saved hash. If they do not match, then the IP should\n                        not trust the configuration.","effectiveness":"","effectiveness_notes":""},{"description":"Outside the IP, incorporate integrity checking\n                        of the configuration state via a trusted agent. Before\n                        powering down, the trusted agent performs a hash of the\n                        configuration and saves the hash in persistent storage.\n                        Upon restore, the IP requests the trusted agent\n                        validate its current configuration. If the\n                        configuration hash is invalid, then the IP should not\n                        trust the configuration.","effectiveness":"","effectiveness_notes":""},{"description":"Outside the IP, incorporate a protected\n                        environment that prevents undetected modification of\n                        the configuration state by untrusted agents. Before\n                        powering down, a trusted agent saves the IP's\n                        configuration state in this protected location that\n                        only it is privileged to. Upon restore, the trusted\n                        agent loads the saved state into the IP.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":131,"name":"Incorrect Calculation of Buffer Size","description":"The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts \"&\" characters to \"&amp;\" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.","effectiveness":"","effectiveness_notes":""},{"description":"Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.","effectiveness":"","effectiveness_notes":""},{"description":"Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).","effectiveness":"","effectiveness_notes":""},{"description":"When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.","effectiveness":"","effectiveness_notes":""},{"description":"Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.","effectiveness":"moderate","effectiveness_notes":"This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible."},{"description":"Use sizeof() on the appropriate data type to avoid CWE-467.","effectiveness":"","effectiveness_notes":""},{"description":"Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]","effectiveness":"","effectiveness_notes":""},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.","effectiveness":""},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Source Code Quality Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":1310,"name":"Missing Ability to Patch ROM Code","description":"Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.","extended_description":"A System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use. A common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped.  This leaves the system in a vulnerable state where an adversary can compromise the SoC.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Secure patch support to allow ROM code to be patched on the next boot.","effectiveness":"moderate","effectiveness_notes":"Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\""},{"description":"Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.","effectiveness":"moderate","effectiveness_notes":"Patches that use hardware fuses will have limitations in terms of size and the number of patches that can be supported. Note that some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\""}],"detection_methods":[]},{"cwe_id":1311,"name":"Improper Translation of Security Attributes by Fabric Bridge","description":"The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.","extended_description":"A bridge allows IP blocks supporting different fabric protocols to be integrated into the system.  Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP. The values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted). A weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1312,"name":"Missing Protection for Mirrored Regions in On-Chip Fabric Firewall","description":"The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.","extended_description":"Few fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The fabric firewall should apply the same protections as the original region to the mirrored regions.","effectiveness":"","effectiveness_notes":""},{"description":"The fabric firewall should apply the same protections as the original region to the mirrored regions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Dynamic Analysis","description":"Using an external debugger, send write transactions to mirrored regions to test if original, write-protected regions are modified. Similarly, send read transactions to mirrored regions to test if the original, read-protected signals can be read.","effectiveness":"high"}]},{"cwe_id":1313,"name":"Hardware Allows Activation of Test or Debug Logic at Runtime","description":"During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.","extended_description":"An adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.","effectiveness":"","effectiveness_notes":""},{"description":"Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.","effectiveness":"","effectiveness_notes":""},{"description":"Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1314,"name":"Missing Write Protection for Parametric Data Values","description":"The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.","extended_description":"Various sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software. The limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits. While the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1315,"name":"Improper Setting of Bus Controlling Capability in Fabric End-point","description":"The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.","extended_description":"To support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.","effectiveness":"","effectiveness_notes":""},{"description":"For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.","effectiveness":"","effectiveness_notes":""},{"description":"For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1316,"name":"Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges","description":"The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.","extended_description":"Various ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected. Occasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.","effectiveness":"","effectiveness_notes":""},{"description":"Ranges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion.","effectiveness":"","effectiveness_notes":""},{"description":"Validate mitigation actions with robust testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"Review address map in specification to see if there are any overlapping ranges.","effectiveness":"high"},{"method":"Manual Static Analysis","description":"Negative testing of access control on overlapped ranges.","effectiveness":"high"}]},{"cwe_id":1317,"name":"Improper Access Control in Fabric Bridge","description":"The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.","extended_description":"In hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect. For overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.","effectiveness":"","effectiveness_notes":""},{"description":"Implement access-control checks in the bridge for both upstream and downstream transactions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Simulation / Emulation","description":"RTL simulation to ensure that bridge-access controls are implemented properly.","effectiveness":"high"},{"method":"Formal Verification","description":"Formal verification of bridge RTL to ensure that access control cannot be bypassed.","effectiveness":"high"}]},{"cwe_id":1318,"name":"Missing Support for Security Features in On-chip Fabrics or Buses","description":"On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.","extended_description":"Certain on-chip fabrics and buses, especially simple and low-power buses, do not support security features.  Apart from data transfer and addressing ports, some fabrics and buses do not have any interfaces to transfer privilege, immutable identity, or any other security attribute coming from the bus master.  Similarly, they do not have dedicated signals to transport security-sensitive data from slave to master, such as completions for certain types of transactions.  Few other on-chip fabrics and buses support security features and define specific interfaces/signals for transporting security attributes from master to slave or vice-versa.  However, including these signals is not mandatory and could be left unconfigured when generating the register-transfer-level (RTL) description for the fabric.  Such fabrics or buses should not be used to transport any security attribute coming from the bus master.  In general, peripherals with security assets should not be connected to such buses before the transaction from the bus master reaches the bus, unless some form of access control is performed at a fabric bridge or another intermediate module.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric.  Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Review the fabric specification and ensure that it contains signals to transfer security-sensitive signals.","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"Lack of security features can also be confirmed through manual RTL review of the fabric RTL.","effectiveness":"high"}]},{"cwe_id":1319,"name":"Improper Protection against Electromagnetic Fault Injection (EM-FI)","description":"The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.","extended_description":"Electromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to: Bypassing security mechanisms such as secure JTAG or Secure Boot Leaking device information Modifying program flow Perturbing secure hardware modules (e.g. random number generators)","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"1. Redundancy - By replicating critical operations and comparing the two outputs can help indicate whether a fault has been injected. 2. Error detection and correction codes - Gay, Mael, et al. proposed a new scheme that not only detects faults injected by a malicious adversary but also automatically corrects single nibble/byte errors introduced by low-multiplicity faults. 3. Fail by default coding - When checking conditions (switch or if) check all possible cases and fail by default because the default case in a switch (or the else part of a cascaded if-else-if construct) is used for dealing with the last possible (and valid) value without checking. This is prone to fault injection because this alternative is easily selected as a result of potential data manipulation [REF-1141]. 4. Random Behavior - adding random delays before critical operations, so that timing is not predictable. 5. Program Flow Integrity Protection - The program flow can be secured by integrating run-time checking aiming at detecting control flow inconsistencies. One such example is tagging the source code to indicate the points not to be bypassed [REF-1147]. 6. Sensors - Usage of sensors can detect variations in voltage and current. 7. Shields - physical barriers to protect the chips from malicious manipulation.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":132,"name":"DEPRECATED: Miscalculated Null Termination","description":"This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1320,"name":"Improper Protection for Outbound Error Messages and Alert Signals","description":"Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.","extended_description":"Hardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS.  \n\t\t\t\tModification of these limits may be protected by hardware mechanisms. When device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling. Warning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS).\n\t\t\t\tThese alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1321,"name":"Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')","description":"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.","extended_description":"By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the product depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). This weakness is usually exploited by using a special attribute of objects called proto,  constructor or prototype. Such attributes give access to the object prototype. This weakness is often found in code that assigns object attributes based on user input, or merges or clones objects recursively.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.","effectiveness":"high","effectiveness_notes":"While this can mitigate this weakness completely, other methods are recommended when possible, especially in components used by upstream software (\"libraries\")."},{"description":"By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.","effectiveness":"high","effectiveness_notes":""},{"description":"When handling untrusted objects, validating using a schema can be used.","effectiveness":"limited","effectiveness_notes":""},{"description":"By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.","effectiveness":"high","effectiveness_notes":""},{"description":"Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1322,"name":"Use of Blocking Code in Single-threaded, Non-blocking Context","description":"The product uses a non-blocking model that relies on a single threaded process\n\t\t\tfor features such as scalability, but it contains code that can block when it is invoked.","extended_description":"When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling\n\t\t\t\tblocking library calls, such as those that perform exclusive file operations or require a successful network operation. Due to limitations in multi-thread models, single-threaded\n\t\t\t\tmodels are used to overcome the resource constraints that are caused by using\n\t\t\t\tmany threads. In such a model, all code should generally be\n\t\t\t\tnon-blocking. If blocking code is called, then the event loop will\n\t\t\t\teffectively be stopped, which can be undesirable or dangerous.  Such\n\t\t\t\tmodels are used in Python asyncio, Vert.x, and Node.js, or other\n\t\t\t\tcustom event loop code.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Generally speaking, blocking calls should be\n\t\t\t\t\treplaced with non-blocking alternatives that can be used asynchronously.\n\t\t\t\t\tExpensive computations should be passed off to worker threads, although\n\t\t\t\t\tthe correct approach depends on the framework being used.","effectiveness":"","effectiveness_notes":""},{"description":"For expensive computations, consider breaking them up into\n\t\t\t\t\tmultiple smaller computations. Refer to the documentation of the\n\t\t\t\t\tframework being used for guidance.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1323,"name":"Improper Management of Sensitive Trace Data","description":"Trace data collected from several sources on the\n                System-on-Chip (SoC) is stored in unprotected locations or\n                transported to untrusted agents.","extended_description":"To facilitate verification of complex System-on-Chip\n                    (SoC) designs, SoC integrators add specific IP blocks that\n                    trace the SoC's internal signals in real-time. This\n                    infrastructure enables observability of the SoC's internal\n                    behavior, validation of its functional design,\n                    and detection of hardware and software bugs. Such tracing\n                    IP blocks collect traces from several sources on the SoC\n                    including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then\n                    aggregated inside trace IP block and forwarded to trace\n                    sinks, such as debug-trace ports that facilitate debugging by\n                    external hardware and software debuggers. Since\n                    these traces are collected from several security-sensitive\n                    sources, they must be protected against untrusted\n                    debuggers. If they are stored in unprotected memory, an\n                    untrusted software debugger can access these traces and\n                    extract secret information. Additionally, if\n                    security-sensitive traces are not tagged as secure, an\n                    untrusted hardware debugger might access them to extract\n                    confidential information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1324,"name":"DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface","description":"This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1325,"name":"Improperly Controlled Sequential Memory Allocation","description":"The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.","extended_description":"While the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure multiple allocations of the same kind of object are properly tracked - possibly across multiple sessions, requests, or messages. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.","effectiveness":"","effectiveness_notes":""},{"description":"Run the program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1326,"name":"Missing Immutable Root of Trust in Hardware","description":"A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.","extended_description":"A System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts.  Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether \"Secure Boot is enabled\". These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows. One of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot. Note that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.","effectiveness":"","effectiveness_notes":""},{"description":"During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"Automated testing can verify that RoT components are immutable.","effectiveness":"high"},{"method":"Architecture or Design Review","description":"Root of trust elements and memory should be part of architecture and design reviews.","effectiveness":"high"}]},{"cwe_id":1327,"name":"Binding to an Unrestricted IP Address","description":"The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.","extended_description":"When a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assign IP addresses that are not 0.0.0.0.","effectiveness":"high","effectiveness_notes":""},{"description":"Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1328,"name":"Security Version Number Mutable to Older Versions","description":"Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.","extended_description":"A System-on-Chip (SoC) implements secure boot or verified boot. It might support a security version number, which prevents downgrading the current firmware to a vulnerable version. Once downgraded to a previous version, an adversary can launch exploits on the SoC and thus compromise the security of the SoC. These downgrade attacks are also referred to as roll-back attacks. The security version number must be stored securely and persistently across power-on resets. A common weakness is that the security version number is modifiable by an adversary, allowing roll-back or downgrade attacks or, under certain circumstances, preventing upgrades (i.e. Denial-of-Service on upgrades). In both cases, the SoC is in a vulnerable state.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.","effectiveness":"","effectiveness_notes":""},{"description":"During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.","effectiveness":"high"},{"method":"Architecture or Design Review","description":"Anti-roll-back features should be reviewed as part of Architecture or Design review.","effectiveness":"high"}]},{"cwe_id":1329,"name":"Reliance on Component That is Not Updateable","description":"The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.","extended_description":"If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's owner will not be able to protect against the issue.  The only option might be replacement of the product, which could be too financially or operationally expensive for the product owner.  As a result, the inability to patch or update can leave the product open to attacker exploitation or critical operation failures. This weakness can be especially difficult to manage when using ROM, firmware, or similar components that traditionally have had limited or no update capabilities. In industries such as healthcare, \"legacy\"\n\t\t\t    devices can be operated for decades.  As a\n\t\t\t    US task force report [REF-1197] notes, \"the inability\n\t\t\t    to update or replace equipment has both\n\t\t\t    large and small health care delivery\n\t\t\t    organizations struggle with numerous\n\t\t\t    unsupported legacy systems that cannot\n\t\t\t    easily be replaced (hardware, software, and\n\t\t\t    operating systems) with large numbers of\n\t\t\t    vulnerabilities and few modern\n\t\t\t    countermeasures.\" While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Specify requirements that each component should be updateable, including ROM, firmware, etc.","effectiveness":"","effectiveness_notes":""},{"description":"Design the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.","effectiveness":"","effectiveness_notes":""},{"description":"With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.","effectiveness":"moderate","effectiveness_notes":"Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"  Hardware-fuse-based patches will also have limitations in terms of size and the number of patches that can be supported."},{"description":"Implement the necessary functionality to allow each component to be updated.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.","effectiveness":"moderate"}]},{"cwe_id":1330,"name":"Remanent Data Readable after Memory Erase","description":"Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.","extended_description":"Data remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware. Data remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase. Data remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature. Other than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.","effectiveness":""},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.","effectiveness":""}]},{"cwe_id":1331,"name":"Improper Isolation of Shared Resources in Network On Chip (NoC)","description":"The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.","extended_description":"Typically, network on chips (NoC) have many internal resources that are shared between packets from different trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel, allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference, resulting in degraded throughput and latency.","likelihood_of_exploit":"","background_details":["\"Network-on-chip\" (NoC) is a commonly-used term used for hardware interconnect fabrics used by multicore Systems-on-Chip (SoC).  Communication between modules on the chip uses packet-based methods, with improved efficiency and scalability compared to bus architectures [REF-1241]."],"potential_mitigations":[{"description":"Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Providing marker flags to send through the interfaces coupled with examination of which users are able to read or manipulate the flags will help verify that the proper isolation has been achieved and is effective.","effectiveness":"moderate"}]},{"cwe_id":1332,"name":"Improper Handling of Faults that Lead to Instruction Skips","description":"The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.","extended_description":"The operating conditions of hardware may change\n              in ways that cause unexpected behavior to occur,\n              including the skipping of security-critical CPU\n              instructions. Generally, this can occur due to\n              electrical disturbances or when the device operates\n              outside of its expected conditions. In practice, application code may contain\n\t\t\t  conditional branches that are security-sensitive (e.g.,\n\t\t\t  accepting or rejecting a user-provided password). These\n\t\t\t  conditional branches are typically implemented by a\n\t\t\t  single conditional branch instruction in the program\n\t\t\t  binary which, if skipped, may lead to effectively\n\t\t\t  flipping the branch condition - i.e., causing the wrong\n\t\t\t  security-sensitive branch to be taken. This affects\n\t\t\t  processes such as firmware authentication, password\n\t\t\t  verification, and other security-sensitive decision\n\t\t\t  points. Attackers can use fault injection techniques to\n\t\t\t  alter the operating conditions of hardware so that\n\t\t\t  security-critical instructions are skipped more\n\t\t\t  frequently or more reliably than they would in a\n\t\t\t  \"natural\" setting.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Design strategies for ensuring safe failure if\n                        inputs, such as Vcc, are modified out of acceptable\n                        ranges.","effectiveness":"","effectiveness_notes":""},{"description":"Design strategies for ensuring safe behavior if\n                        instructions attempt to be skipped.","effectiveness":"","effectiveness_notes":""},{"description":"Identify mission critical secrets that should\n                          be wiped if faulting is detected, and design a\n                          mechanism to do the deletion.","effectiveness":"","effectiveness_notes":""},{"description":"Add redundancy by performing an operation\n                          multiple times, either in space or time, and perform\n                          majority voting. Additionally, make conditional\n                          instruction timing unpredictable.","effectiveness":"","effectiveness_notes":""},{"description":"Use redundant operations or canaries to\n                          detect and respond to faults.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that fault mitigations are strong enough\n                        in practice. For example, a low power detection\n                        mechanism that takes 50 clock cycles to trigger at lower\n                        voltages may be an insufficient security mechanism if\n                        the instruction counter has already progressed with no\n                        other CPU activity occurring.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.","effectiveness":"moderate"},{"method":"Simulation / Emulation","description":"This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.","effectiveness":"moderate"}]},{"cwe_id":1333,"name":"Inefficient Regular Expression Complexity","description":"The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.","extended_description":"Some regular expression engines have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match. Backtracking becomes a weakness if all of these conditions are met: The number of possible backtracking attempts are exponential relative to the length of the input. The input can fail to match the regular expression. The input can be long enough. Attackers can create crafted inputs that\n\t\t  intentionally cause the regular expression to use\n\t\t  excessive backtracking in a way that causes the CPU\n\t\t  consumption to spike.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.","effectiveness":"high","effectiveness_notes":"This is one of the few effective solutions when using user-provided regular expressions."},{"description":"Set backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.","effectiveness":"moderate","effectiveness_notes":""},{"description":"Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.","effectiveness":"high","effectiveness_notes":""},{"description":"Limit the length of the input that the regular expression will process.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1334,"name":"Unauthorized Error Injection Can Degrade Hardware Redundancy","description":"An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.","extended_description":"To ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.","effectiveness":"","effectiveness_notes":""},{"description":"Disallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors.","effectiveness":"","effectiveness_notes":""},{"description":"Add an access control layer atop any unprotected interfaces for injecting errors.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1335,"name":"Incorrect Bitwise Shift of Integer","description":"An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.","extended_description":"Specifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue. Specifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implicitly or explicitly add checks and mitigation for negative or over-shift values.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1336,"name":"Improper Neutralization of Special Elements Used in a Template Engine","description":"The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.","extended_description":"Many web applications use template engines that allow developers to insert externally-influenced values into free text or messages in order to generate a full web page, document, message, etc. Such engines include Twig, Jinja2, Pug, Java Server Pages, FreeMarker, Velocity, ColdFusion, Smarty, and many others - including PHP itself. Some CMS (Content Management Systems) also use templates. Template engines often have their own custom command or expression language. If an attacker can influence input into a template before it is processed, then the attacker can invoke arbitrary expressions, i.e. perform injection attacks. For example, in some template languages, an attacker could inject the expression \"{{7*7}}\" and determine if the output returns \"49\" instead. The syntax varies depending on the language. In some cases, XSS-style attacks can work, which can obscure the root cause if the developer does not closely investigate the root cause of the error. Template engines can be used on the server or client, so both \"sides\" could be affected by injection. The mechanisms of attack or the affected technologies might be different, but the mistake is fundamentally the same.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands.","effectiveness":"","effectiveness_notes":""},{"description":"Use the template engine's sandbox or restricted mode, if available.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1338,"name":"Improper Protections Against Hardware Overheating","description":"A hardware device is missing or has inadequate protection features to prevent overheating.","extended_description":"Hardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently. Any device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack. Depending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. There can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.","effectiveness":"","effectiveness_notes":""},{"description":"The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Dynamic tests should be performed to stress-test temperature controls.","effectiveness":"high"},{"method":"Architecture or Design Review","description":"Power management controls should be part of Architecture and Design reviews.","effectiveness":"high"}]},{"cwe_id":1339,"name":"Insufficient Precision or Accuracy of a Real Number","description":"The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.","extended_description":"When a security decision or calculation requires highly precise, accurate numbers such as financial calculations or prices, then small variations in the number could be exploited by an attacker. There are multiple ways to store the fractional part of a real number in a computer. In all of these cases, there is a limit to the accuracy of recording a fraction. If the fraction can be represented in a fixed number of digits (binary or decimal), there might not be enough digits assigned to represent the number. In other cases the number cannot be represented in a fixed number of digits due to repeating in decimal or binary notation (e.g. 0.333333...) or due to a transcendental number such as Π or √2. Rounding of numbers can lead to situations where the computer results do not adequately match the result of sufficiently accurate math.","likelihood_of_exploit":"","background_details":["There are three major ways to store real numbers in computers. Each method is described along with the limitations of how they store their numbers. Fixed: Some implementations use a fixed number of binary bits to represent both the integer and the fraction.  In the demonstrative example about Muller's Recurrence, the fraction 108.0 - ((815.0 - 1500.0 / z) / y) cannot be represented in 8 binary digits. The numeric accuracy within languages such as PL/1, COBOL and Ada is expressed in decimal digits rather than binary digits. In SQL and most databases, the length of the integer and the fraction are specified by the programmer in decimal. In the language C, fixed reals are implemented according to ISO/IEC TR18037 Floating: The number is stored in a version of scientific notation with a fixed length for the base and the significand. This allows flexibility for more accuracy when the integer portion is smaller. When dealing with large integers, the fractional accuracy is less. Languages such as PL/1, COBOL and Ada set the accuracy by decimal digit representation rather than using binary digits. Python also implements decimal floating-point numbers using the IEEE 754-2008 encoding method. Ratio: The number is stored as the ratio of two integers. These integers also have their limits. These integers can be stored in a fixed number of bits or in a vector of digits. While the vector of digits method provides for very large integers, they cannot truly represent a repeating or transcendental number as those numbers do not ever have a fixed length."],"potential_mitigations":[{"description":"The developer or maintainer can move to a more accurate representation of real numbers.  In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":134,"name":"Use of Externally-Controlled Format String","description":"The product uses a function that accepts a format string as an argument, but the format string originates from an external source.","extended_description":"When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Choose a language that is not subject to this flaw.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]","effectiveness":"","effectiveness_notes":""},{"description":"Run compilers and linkers with high warning levels, since they may detect incorrect usage.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.","effectiveness":""},{"method":"Black Box","description":"Since format strings often occur in rarely-occurring erroneous conditions (e.g. for error message logging), they can be difficult to detect using black box methods. It is highly likely that many latent issues exist in executables that do not have associated source code (or equivalent source.","effectiveness":"limited"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode simple extractor - strings, ELF readers, etc.","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":1341,"name":"Multiple Releases of Same Resource or Handle","description":"The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.","extended_description":"Code typically requires \"opening\" handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to \"close\" or \"release\" the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages. Unfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences. Note that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.","effectiveness":"","effectiveness_notes":""},{"description":"It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.","effectiveness":"","effectiveness_notes":""},{"description":"When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.","effectiveness":""},{"method":"Automated Dynamic Analysis","description":"Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.","effectiveness":""}]},{"cwe_id":1342,"name":"Information Exposure through Microarchitectural State after Transient Execution","description":"The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.","extended_description":"In many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers. Several conditions may need to be fulfilled for a successful attack: incorrect transient execution that results in remanence of sensitive information; attacker has the ability to provoke microarchitectural exceptions; operations and structures in victim code that can be exploited must be identified.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.","effectiveness":"high","effectiveness_notes":"Being implemented in silicon it is expected to fully address the known weaknesses with limited performance impact."},{"description":"Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.","effectiveness":"high","effectiveness_notes":"This effectively forces the processor to complete each memory access before moving on to the next operation. This may have a large performance impact."}],"detection_methods":[]},{"cwe_id":135,"name":"Incorrect Calculation of Multi-Byte String Length","description":"The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always verify the length of the string unit character.","effectiveness":"","effectiveness_notes":""},{"description":"Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":1351,"name":"Improper Handling of Hardware Behavior in Exceptionally Cold Environments","description":"A hardware device, or the firmware running on it, is\n                missing or has incorrect protection features to maintain\n                goals of security primitives when the device is cooled below\n                standard operating temperatures.","extended_description":"The hardware designer may improperly anticipate\n                    hardware behavior when exposed to exceptionally cold\n                    conditions. As a result they may introduce a weakness by not\n                    accounting for the modified behavior of critical components\n                    when in extreme environments. An example of a change in behavior is that power loss\n                    won't clear/reset any volatile state when cooled below\n                    standard operating temperatures. This may result in\n                    a weakness when the starting state of the volatile memory is\n                    being relied upon for a security decision. For example, a\n                    Physical Unclonable Function (PUF) may be supplied as a\n                    security primitive to improve confidentiality,\n                    authenticity, and integrity guarantees. However, when the\n                    PUF is paired with DRAM, SRAM, or another temperature\n                    sensitive entropy source, the system designer may introduce\n                    weakness by failing to account for the chosen entropy\n                    source's behavior at exceptionally low temperatures. In the\n                    case of DRAM and SRAM, when power is cycled at low\n                    temperatures, the device will not contain the bitwise\n                    biasing caused by inconsistencies in manufacturing and will\n                    instead contain the data from previous boot. Should the PUF\n                    primitive be used in a cryptographic construction which\n                    does not account for full adversary control of PUF seed\n                    data, weakness would arise. This weakness does not cover \"Cold Boot Attacks\"\n                    wherein RAM or other external storage is super cooled and\n                    read externally by an attacker.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The system should account for security primitive behavior when cooled outside standard temperatures.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1357,"name":"Reliance on Insufficiently Trustworthy Component","description":"The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.","extended_description":"Many modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party. Regardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company. Note that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.","effectiveness":"","effectiveness_notes":""},{"description":"Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"","effectiveness":"","effectiveness_notes":""},{"description":"Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":138,"name":"Improper Neutralization of Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.","extended_description":"Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If product does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (\"less than\") as meaning \"read input from a file\".","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1384,"name":"Improper Handling of Physical or Environmental Conditions","description":"The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.","extended_description":"Hardware products are typically only guaranteed to behave correctly within certain physical limits or environmental conditions. Such products cannot necessarily control the physical or external conditions to which they are subjected. However, the inability to handle such conditions can undermine a product's security. For example, an unexpected physical or environmental condition may cause the flipping of a bit that is used for an authentication decision. This unexpected condition could occur naturally or be induced artificially by an adversary. Physical or environmental conditions of concern are: Atmospheric characteristics: extreme temperature ranges, etc. Interference: electromagnetic interference (EMI), radio frequency interference (RFI), etc. Assorted light sources: white light, ultra-violet light (UV), lasers, infrared (IR), etc. Power variances: under-voltages, over-voltages, under-current, over-current, etc. Clock variances: glitching, overclocking, clock stretching, etc. Component aging and degradation Materials manipulation: focused ion beams (FIB), etc. Exposure to radiation: x-rays, cosmic radiation, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1385,"name":"Missing Origin Validation in WebSockets","description":"The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.","extended_description":"WebSockets provide a bi-directional low latency communication (near real-time) between a client and a server. WebSockets are different than HTTP in that the connections are long-lived, as the channel will remain open until the client or the server is ready to send the message, whereas in HTTP, once the response occurs (which typically happens immediately), the transaction completes. A WebSocket can leverage the existing HTTP protocol over ports 80 and 443, but it is not limited to HTTP. WebSockets can make cross-origin requests that are not restricted by browser-based protection mechanisms such as the Same Origin Policy (SOP) or Cross-Origin Resource Sharing (CORS). Without explicit origin validation, this makes CSRF attacks more powerful.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.","effectiveness":"","effectiveness_notes":""},{"description":"Use a randomized CSRF token to verify requests.","effectiveness":"","effectiveness_notes":""},{"description":"Use TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'.","effectiveness":"","effectiveness_notes":""},{"description":"Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.","effectiveness":"","effectiveness_notes":""},{"description":"Leverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Use a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1386,"name":"Insecure Operation on Windows Junction / Mount Point","description":"The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.","extended_description":"Depending on the intended action\n\t\t\t  being performed, this could allow an\n\t\t\t  attacker to cause the product to read,\n\t\t\t  write, delete, or otherwise operate on\n\t\t\t  unauthorized files. In Windows, NTFS5 allows for file\n\t\t\t  system objects called reparse points.\n\t\t\t  Applications can create a hard link from one\n\t\t\t  directory to another directory, called a\n\t\t\t  junction point. They can also create a\n\t\t\t  mapping from a directory to a drive letter,\n\t\t\t  called a mount point. If a file is used by a\n\t\t\t  privileged program, but it can be replaced\n\t\t\t  with a hard link to a sensitive file (e.g.,\n\t\t\t  AUTOEXEC.BAT), an attacker could excalate\n\t\t\t  privileges. When the process opens the file,\n\t\t\t  the attacker can assume the privileges of\n\t\t\t  that process, tricking the privileged\n\t\t\t  process to read, modify, or delete the\n\t\t\t  sensitive file, preventing the program from\n\t\t\t  accurately processing data. Note that one\n\t\t\t  can also point to registries and\n\t\t\t  semaphores.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points.  One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1389,"name":"Incorrect Parsing of Numbers with Different Radices","description":"The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).","extended_description":"Frequently, a numeric input that begins with \"0\" is treated as octal, or \"0x\" causes it to be treated as hexadecimal, e.g. by the inet_addr() function. For example, \"023\" (octal) is 35 decimal, or \"0x31\" is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only inputs, the code could produce incorrect numbers when the inputs are parsed using a different base. This can result in unexpected and/or dangerous behavior. For example, a \"0127.0.0.1\" IP address is parsed as octal due to the leading \"0\", whose numeric value would be the same as 87.0.0.1 (decimal), where the developer likely expected to use 127.0.0.1. The consequences vary depending on the surrounding code in which this weakness occurs, but they can include bypassing network-based access control using unexpected IP addresses or netmasks, or causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications, this can enable bypassing of SSRF restrictions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.","effectiveness":"","effectiveness_notes":""},{"description":"If various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application.","effectiveness":"","effectiveness_notes":""},{"description":"If regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1390,"name":"Weak Authentication","description":"The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.","extended_description":"Attackers may be able to bypass weak authentication faster and/or with less effort than expected.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1391,"name":"Use of Weak Credentials","description":"The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.","extended_description":"By design, authentication protocols try to ensure that attackers must perform brute force attacks if they do not know the credentials such as a key or password. However, when these credentials are easily predictable or even fixed (as with default or hard-coded passwords and keys), then the attacker can defeat the mechanism without relying on brute force. Credentials may be weak for different reasons, such as: Hard-coded (i.e., static and unchangeable by the administrator) Default (i.e., the same static value across different deployments/installations, but able to be changed by the administrator) Predictable (i.e., generated in a way that produces unique credentials across deployments/installations, but can still be guessed with reasonable efficiency) Even if a new, unique credential is intended to be generated for each product installation, if the generation is predictable, then that may also simplify guessing attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":1392,"name":"Use of Default Credentials","description":"The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.","extended_description":"It is common practice for products to be designed to use\n\tdefault keys, passwords, or other mechanisms for\n\tauthentication.  The rationale is to simplify the\n\tmanufacturing process or the system administrator's task of\n\tinstallation and deployment into an enterprise. However, if\n\tadmins do not change the defaults, it is easier for attackers\n\tto bypass authentication quickly across multiple\n\torganizations.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.","effectiveness":"high","effectiveness_notes":""},{"description":"Force the administrator to change the credential upon installation.","effectiveness":"high","effectiveness_notes":""},{"description":"The product administrator could change the defaults upon installation or during operation.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1393,"name":"Use of Default Password","description":"The product uses default passwords for potentially critical functionality.","extended_description":"It is common practice for products to be designed to use\n\tdefault passwords for authentication.  The rationale is to\n\tsimplify the manufacturing process or the system\n\tadministrator's task of installation and deployment into an\n\tenterprise. However, if admins do not change the defaults,\n\tthen it makes it easier for attackers to quickly bypass\n\tauthentication across multiple organizations. There are many\n\tlists of default passwords and default-password scanning tools\n\tthat are easily available from the World Wide Web.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.","effectiveness":"high","effectiveness_notes":""},{"description":"Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.","effectiveness":"limited","effectiveness_notes":""},{"description":"Force the administrator to change the credential upon installation.","effectiveness":"high","effectiveness_notes":""},{"description":"The product administrator could change the defaults upon installation or during operation.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1394,"name":"Use of Default Cryptographic Key","description":"The product uses a default cryptographic key for potentially critical functionality.","extended_description":"It is common practice for products to be designed to use\n\tdefault keys.  The rationale is to simplify the manufacturing\n\tprocess or the system administrator's task of installation and\n\tdeployment into an enterprise. However, if admins do not\n\tchange the defaults, it is easier for attackers to bypass\n\tauthentication quickly across multiple organizations.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.","effectiveness":"high","effectiveness_notes":""},{"description":"Force the administrator to change the credential upon installation.","effectiveness":"high","effectiveness_notes":""},{"description":"The product administrator could change the defaults upon installation or during operation.","effectiveness":"moderate","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1395,"name":"Dependency on Vulnerable Third-Party Component","description":"The product has a dependency on a third-party component that contains one or more known vulnerabilities.","extended_description":"Many products are large enough or complex enough that part of their functionality uses libraries, modules, or other intellectual property developed by third parties who are not the product creator. For example, even an entire operating system might be from a third-party supplier in some hardware products. Whether open or closed source, these components may contain publicly known vulnerabilities that could be exploited by adversaries to compromise the product.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.","effectiveness":"","effectiveness_notes":""},{"description":"Require a Bill of Materials for all components and sub-components of the product. For software, require a Software Bill of Materials (SBOM) [REF-1247] [REF-1311].","effectiveness":"","effectiveness_notes":""},{"description":"Maintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"","effectiveness":"","effectiveness_notes":""},{"description":"Actively monitor when a third-party component vendor announces vulnerability patches; fix the third-party component as soon as possible; and make it easy for operators/customers to obtain and apply the patch.","effectiveness":"","effectiveness_notes":""},{"description":"Continuously monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, etc.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Analysis","description":"For software, use Software Composition Analysis (SCA) tools, which automatically analyze products to identify third-party dependencies. Often, SCA tools can be used to link with known vulnerabilities in the dependencies that they detect. There are commercial and open-source alternatives, such as OWASP Dependency-Check [REF-1312]. Many languages or frameworks have package managers with similar capabilities, such as npm audit for JavaScript, pip-audit for Python, govulncheck for Go, and many others. Dynamic methods can detect loading of third-party components.","effectiveness":"high"}]},{"cwe_id":14,"name":"Compiler Removal of Code to Clear Buffers","description":"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka \"dead store removal.\"","extended_description":"This compiler optimization error occurs when: Secret data are stored in memory. The secret data are scrubbed from memory by overwriting its contents. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Store the sensitive data in a \"volatile\" memory location if available.","effectiveness":"","effectiveness_notes":""},{"description":"If possible, configure your compiler so that it does not remove dead stores.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, encrypt sensitive data that are used by a software system.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"This specific weakness is impossible to detect using black box methods. While an analyst could examine memory to see that it has not been scrubbed, an analysis of the executable would not be successful. This is because the compiler has already removed the relevant code. Only the source code shows whether the programmer intended to clear the memory or not, so this weakness is indistinguishable from others.","effectiveness":""},{"method":"White Box","description":"This weakness is only detectable using white box methods (see black box detection factor). Careful analysis is required to determine if the code is likely to be removed by the compiler.","effectiveness":""}]},{"cwe_id":140,"name":"Improper Neutralization of Delimiters","description":"The product does not neutralize or incorrectly neutralizes delimiters.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":141,"name":"Improper Neutralization of Parameter/Argument Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1419,"name":"Incorrect Initialization of Resource","description":"The product attempts to initialize a resource but does not correctly do so, which might leave the resource in an unexpected, incorrect, or insecure state when it is accessed.","extended_description":"This can have security implications when the associated resource is expected to have certain properties or values. Examples include a variable that determines whether a user has been authenticated or not, or a register or fuse value that determines the security state of the product. For software, this weakness can frequently occur when implicit initialization is used, meaning the resource is not explicitly set to a specific value. For example, in C, memory is not necessarily cleared when it is allocated on the stack, and many scripting languages use a default empty, null value, or zero value when a variable is not explicitly initialized. For hardware, this weakness frequently appears with reset values and fuses. After a product reset, hardware may initialize registers incorrectly. During different phases of a product lifecycle, fuses may be set to incorrect values. Even if fuses are set to correct values, the lines to the fuse could be broken or there might be hardware on the fuse line that alters the fuse value to be incorrect.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Choose the safest-possible initialization for security-related resources.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that each resource (whether variable, memory buffer, register, etc.) is fully initialized.","effectiveness":"","effectiveness_notes":""},{"description":"Pay close attention to complex conditionals or reset sources   that affect initialization, since some paths might not perform the initialization.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the design and architecture clearly identify what the initialization should be, and that the initialization does not have security implications.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":142,"name":"Improper Neutralization of Value Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":1420,"name":"Exposure of Sensitive Information during Transient Execution","description":"A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.","extended_description":"When operations execute but do not commit to the processor's\n\t\t\t\t\tarchitectural state, this is commonly referred to as transient\n\t\t\t\t\texecution. This behavior can occur when the processor mis-predicts an\n\t\t\t\t\toutcome (such as a branch target), or when a processor event (such as\n\t\t\t\t\tan exception or microcode assist, etc.) is handled after younger\n\t\t\t\t\toperations have already executed. Operations that execute transiently\n\t\t\t\t\tmay exhibit observable discrepancies (CWE-203) in covert channels\n\t\t\t\t\t[REF-1400] such as data caches. Observable discrepancies of this kind\n\t\t\t\t\tcan be detected and analyzed using timing or power analysis\n\t\t\t\t\ttechniques, which may allow an attacker to infer information about the\n\t\t\t\t\toperations that executed transiently. For example, the attacker may be\n\t\t\t\t\table to infer confidential data that was accessed or used by those\n\t\t\t\t\toperations. Transient execution weaknesses may be exploited using one of two\n\t\t\t\t\tmethods. In the first method, the attacker generates a code sequence\n\t\t\t\t\tthat exposes data through a covert channel when it is executed\n\t\t\t\t\ttransiently (the attacker must also be able to trigger transient\n\t\t\t\t\texecution). Some transient execution weaknesses can only expose data\n\t\t\t\t\tthat is accessible within the attacker's processor context. For\n\t\t\t\t\texample, an attacker executing code in a software sandbox may be able\n\t\t\t\t\tto use a transient execution weakness to expose data within the same\n\t\t\t\t\taddress space, but outside of the attacker's sandbox. Other transient\n\t\t\t\t\texecution weaknesses can expose data that is architecturally\n\t\t\t\t\tinaccessible, that is, data protected by hardware-enforced boundaries\n\t\t\t\t\tsuch as page tables or privilege rings. These weaknesses are the\n\t\t\t\t\tsubject of CWE-1421. In the second exploitation method, the attacker first identifies a\n\t\t\t\t\tcode sequence in a victim program that, when executed transiently, can\n\t\t\t\t\texpose data that is architecturally accessible within the victim's\n\t\t\t\t\tprocessor context. For instance, the attacker may search the victim\n\t\t\t\t\tprogram for code sequences that resemble a bounds-check bypass\n\t\t\t\t\tsequence (see Demonstrative Example 1). If the attacker can trigger a\n\t\t\t\t\tmis-prediction of the conditional branch and influence the index of\n\t\t\t\t\tthe out-of-bounds array access, then the attacker may be able to infer\n\t\t\t\t\tthe value of out-of-bounds data by monitoring observable discrepancies\n\t\t\t\t\tin a covert channel.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.","effectiveness":"limited","effectiveness_notes":"This technique has many pitfalls. For example,\n\t\t\t\t\t\t\tInvisiSpec was an early attempt to mitigate this weakness by blocking\n\t\t\t\t\t\t\t\"micro-architectural covert and side channels through the\n\t\t\t\t\t\t\tmultiprocessor data cache hierarchy due to speculative loads\" [REF-1417].\n\t\t\t\t\t\t\tCommodity processors and SoCs have many covert and side channels that\n\t\t\t\t\t\t\texist outside of the data cache hierarchy. Even when some of these\n\t\t\t\t\t\t\tchannels are blocked, others (such as execution ports [REF-1418]) may\n\t\t\t\t\t\t\tallow an attacker to infer confidential data. Mitigation strategies\n\t\t\t\t\t\t\tthat attempt to prevent transient execution from causing observable\n\t\t\t\t\t\t\tdiscrepancies also have other pitfalls, for example, see [REF-1419]."},{"description":"Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.","effectiveness":"moderate","effectiveness_notes":"Instructions or features that constrain transient execution or suppress its side effects may impact performance."},{"description":"Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.","effectiveness":"limited","effectiveness_notes":"Disabling specific predictors or other hardware features may result in significant performance overhead."},{"description":"Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.","effectiveness":"defense in depth","effectiveness_notes":"Specific software algorithms can be used by an attacker to compensate for a lack of a high-resolution time source [REF-1420]."},{"description":"Isolate sandboxes or managed runtimes in separate address spaces (separate processes). For examples, see [REF-1421].","effectiveness":"high","effectiveness_notes":""},{"description":"Include serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the prediction from happening at all).","effectiveness":"moderate","effectiveness_notes":"When used to comprehensively mitigate a transient execution weakness (for example, by inserting an LFENCE after every instruction in a program), serialization instructions can introduce significant performance overhead. On the other hand, when used to mitigate only a relatively small number of high-risk code sequences, serialization instructions may have a low or negligible impact on performance."},{"description":"Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.","effectiveness":"moderate","effectiveness_notes":"Some CFI techniques may not be able to constrain transient execution, even though they are effective at constraining architectural execution. Or they may be able to provide some additional protection against a transient execution weakness, but without comprehensively mitigating the weakness. For example, Clang-CFI provides strong architectural CFI properties and can make some transient execution weaknesses more difficult to exploit [REF-1398]."},{"description":"If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness. One prominent example of this mitigation is retpoline ([REF-1414]).","effectiveness":"limited","effectiveness_notes":"This technique may only be effective for software that is compiled with this mitigation. For some transient execution weaknesses, this technique may not be sufficient to protect software that is compiled without the affected instruction(s). For example, see CWE-1421."},{"description":"Use software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.","effectiveness":"limited","effectiveness_notes":"Address masking and related software mitigation techniques have been used to harden specific code sequences that could potentially be exploited via transient execution. For example, the Linux kernel makes limited use of manually inserted address masks to mitigate bounds-check bypass [REF-1390]. Compiler-based techniques have also been used to automatically harden software [REF-1425]."},{"description":"Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.","effectiveness":"incidental","effectiveness_notes":"Some transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389]."},{"description":"If a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by exhaustively analyzing a processor's machine clear (or nuke) conditions ([REF-1427]).","effectiveness":"moderate"},{"method":"Fuzzing","description":"Academic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1428]).","effectiveness":"opportunistic"},{"method":"Fuzzing","description":"Academic researchers have demonstrated that this weakness can be detected in software using software fuzzing tools ([REF-1429]).","effectiveness":"opportunistic"},{"method":"Automated Static Analysis","description":"A variety of automated static analysis tools can identify\n\t\t\t\t\t\t\tpotentially exploitable code sequences in software. These tools may\n\t\t\t\t\t\t\tperform the analysis on source code, on binary code, or on an\n\t\t\t\t\t\t\tintermediate code representation (for example, during compilation).","effectiveness":"limited"},{"method":"Automated Analysis","description":"Software vendors can release tools that detect presence of\n\t\t\t\t\t\t\tknown weaknesses on a processor. For example, some of these tools can\n\t\t\t\t\t\t\tattempt to transiently execute a vulnerable code sequence and detect\n\t\t\t\t\t\t\twhether code successfully leaks data in a manner consistent with the\n\t\t\t\t\t\t\tweakness under test. Alternatively, some hardware vendors provide\n\t\t\t\t\t\t\tenumeration for the presence of a weakness (or lack of a\n\t\t\t\t\t\t\tweakness). These enumeration bits can be checked and reported by\n\t\t\t\t\t\t\tsystem software. For example, Linux supports these checks for many\n\t\t\t\t\t\t\tcommodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed","effectiveness":"high"}]},{"cwe_id":1421,"name":"Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution","description":"A processor event may allow transient operations to access\n\t\t\tarchitecturally restricted data (for example, in another address\n\t\t\tspace) in a shared microarchitectural structure (for example, a CPU\n\t\t\tcache), potentially exposing the data over a covert channel.","extended_description":"Many commodity processors have Instruction Set Architecture (ISA)\n\t\t\tfeatures that protect software components from one another. These\n\t\t\tfeatures can include memory segmentation, virtual memory, privilege\n\t\t\trings, trusted execution environments, and virtual machines, among\n\t\t\tothers. For example, virtual memory provides each process with its own\n\t\t\taddress space, which prevents processes from accessing each other's\n\t\t\tprivate data. Many of these features can be used to form\n\t\t\thardware-enforced security boundaries between software components. Many commodity processors also share microarchitectural resources that\n\t\t\tcache (temporarily store) data, which may be confidential. These\n\t\t\tresources may be shared across processor contexts, including across\n\t\t\tSMT threads, privilege rings, or others. When transient operations allow access to ISA-protected data in a\n\t\t\tshared microarchitectural resource, this might violate users'\n\t\t\texpectations of the ISA feature that is bypassed. For example, if\n\t\t\ttransient operations can access a victim's private data in a shared\n\t\t\tmicroarchitectural resource, then the operations' microarchitectural\n\t\t\tside effects may correspond to the accessed data. If an attacker can\n\t\t\ttrigger these transient operations and observe their side effects\n\t\t\tthrough a covert channel [REF-1400], then the attacker may be able to infer the\n\t\t\tvictim's private data. Private data could include sensitive program\n\t\t\tdata, OS/VMM data, page table data (such as memory addresses), system\n\t\t\tconfiguration data (see Demonstrative Example 3), or any other data\n\t\t\tthat the attacker does not have the required privileges to access.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Hardware designers may choose to engineer the processor's\n\t\t\t\tpipeline to prevent architecturally restricted data from being used by\n\t\t\t\toperations that can execute transiently.","effectiveness":"high","effectiveness_notes":""},{"description":"Hardware designers may choose not to share\n\t\t\t\tmicroarchitectural resources that can contain sensitive data, such as\n\t\t\t\tfill buffers and store buffers.","effectiveness":"moderate","effectiveness_notes":"This can be highly effective at preventing this\n\t\t\t\tweakness from being exposed across different SMT threads or different\n\t\t\t\tprocessor cores. It is generally less practical to isolate these\n\t\t\t\tresources between different contexts (for example, user and kernel)\n\t\t\t\tthat may execute on the same SMT thread or processor core."},{"description":"Hardware designers may choose to sanitize specific\n\t\t\t\tmicroarchitectural state (for example, store buffers) when the\n\t\t\t\tprocessor transitions to a different context, such as whenever a\n\t\t\t\tsystem call is invoked. Alternatively, the hardware may expose\n\t\t\t\tinstruction(s) that allow software to sanitize microarchitectural\n\t\t\t\tstate according to the user or system administrator's threat\n\t\t\t\tmodel. These mitigation approaches are similar to those that address\n\t\t\t\tCWE-226; however, sanitizing microarchitectural state may not be the\n\t\t\t\toptimal or best way to mitigate this weakness on every processor\n\t\t\t\tdesign.","effectiveness":"moderate","effectiveness_notes":"Sanitizing shared state on context transitions\n\t\t\t\tmay not be practical for all processors, especially when the amount of\n\t\t\t\tshared state affected by the weakness is relatively\n\t\t\t\tlarge. Additionally, this technique may not be practical unless there\n\t\t\t\tis a synchronous transition between two processor contexts that would\n\t\t\t\tallow the affected resource to be sanitized. For example, this\n\t\t\t\ttechnique alone may not suffice to mitigate asynchronous access to a\n\t\t\t\tresource that is shared by two SMT threads."},{"description":"The hardware designer can attempt to prevent transient\n\t\t\t\texecution from causing observable discrepancies in specific covert\n\t\t\t\tchannels.","effectiveness":"limited","effectiveness_notes":"This technique has many pitfalls. For example,\n\t\t\t\t\t\t\tInvisiSpec was an early attempt to mitigate this weakness by blocking\n\t\t\t\t\t\t\t\"micro-architectural covert and side channels through the\n\t\t\t\t\t\t\tmultiprocessor data cache hierarchy due to speculative loads\" [REF-1417].\n\t\t\t\t\t\t\tCommodity processors and SoCs have many covert and side channels that\n\t\t\t\t\t\t\texist outside of the data cache hierarchy. Even when some of these\n\t\t\t\t\t\t\tchannels are blocked, others (such as execution ports [REF-1418]) may\n\t\t\t\t\t\t\tallow an attacker to infer confidential data. Mitigation strategies\n\t\t\t\t\t\t\tthat attempt to prevent transient execution from causing observable\n\t\t\t\t\t\t\tdiscrepancies also have other pitfalls, for example, see [REF-1419]."},{"description":"Software architects may design software to enforce strong\n\t\t\t\tisolation between different contexts. For example, kernel page table\n\t\t\t\tisolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by\n\t\t\t\tseparating user-mode page tables from kernel-mode page tables, which\n\t\t\t\tprevents user-mode processes from using Meltdown to transiently access\n\t\t\t\tkernel memory [REF-1404].","effectiveness":"limited","effectiveness_notes":"Isolating different contexts across a process\n\t\t\t\tboundary (or another kind of architectural boundary) may only be\n\t\t\t\teffective for some weaknesses."},{"description":"If the weakness is exposed by a single instruction (or a\n\t\t\t\tsmall set of instructions), then the compiler (or JIT, etc.) can be\n\t\t\t\tconfigured to prevent the affected instruction(s) from being\n\t\t\t\tgenerated, and instead generate an alternate sequence of instructions\n\t\t\t\tthat is not affected by the weakness.","effectiveness":"limited","effectiveness_notes":"This technique may only be fully effective if it\n\t\t\t\tis applied to all software that runs on the system. Also, relatively\n\t\t\t\tfew observed examples of this weakness have exposed data through only\n\t\t\t\ta single instruction."},{"description":"Use software techniques (including the use of\n\t\t\t\tserialization instructions) that are intended to reduce the number of\n\t\t\t\tinstructions that can be executed transiently after a processor event\n\t\t\t\tor misprediction.","effectiveness":"incidental","effectiveness_notes":"Some transient execution weaknesses can be\n\t\t\t\texploited even if a single instruction is executed transiently after a\n\t\t\t\tprocessor event or mis-prediction. This mitigation strategy has many\n\t\t\t\tother pitfalls that prevent it from eliminating this weakness\n\t\t\t\tentirely. For example, see [REF-1389]."},{"description":"System software can mitigate this weakness by invoking\n\t\t\t\tstate-sanitizing operations when switching from one context to\n\t\t\t\tanother, according to the hardware vendor's recommendations.","effectiveness":"limited","effectiveness_notes":"This technique may not be able to mitigate\n\t\t\t\tweaknesses that arise from resource sharing across SMT threads."},{"description":"Some systems may allow the user to disable (for example,\n\t\t\t\tin the BIOS) sharing of the affected resource.","effectiveness":"limited","effectiveness_notes":"Disabling resource sharing (for example, by\n\t\t\t\tdisabling SMT) may result in significant performance overhead."},{"description":"Some systems may allow the user to disable (for example,\n\t\t\t\tin the BIOS) microarchitectural features that allow transient access\n\t\t\t\tto architecturally restricted data.","effectiveness":"limited","effectiveness_notes":"Disabling microarchitectural features such as\n\t\t\t\tpredictors may result in significant performance overhead."},{"description":"The hardware vendor may provide a patch to sanitize the\n\t\t\t\taffected shared microarchitectural state when the processor\n\t\t\t\ttransitions to a different context.","effectiveness":"moderate","effectiveness_notes":"This technique may not be able to mitigate\n\t\t\t\tweaknesses that arise from resource sharing across SMT threads."},{"description":"This kind of patch may not be feasible or\n\t\t\t\timplementable for all processors or all weaknesses.","effectiveness":"limited","effectiveness_notes":""},{"description":"Processor designers, system software vendors, or other\n\t\t\t\tagents may choose to restrict the ability of unprivileged software to\n\t\t\t\taccess to high-resolution timers that are commonly used to monitor\n\t\t\t\tcovert channels.","effectiveness":"defense in depth","effectiveness_notes":"Specific software algorithms can be used by an attacker to compensate for a lack of a high-resolution time source [REF-1420]."}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected in hardware by\n\t\t\t\tmanually inspecting processor specifications. Features that exhibit\n\t\t\t\tthis weakness may include microarchitectural predictors, access\n\t\t\t\tcontrol checks that occur out-of-order, or any other features that can\n\t\t\t\tallow operations to execute without committing to architectural\n\t\t\t\tstate. Academic researchers have demonstrated that new hardware\n\t\t\t\tweaknesses can be discovered by examining publicly available patent\n\t\t\t\tfilings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set\n\t\t\t\tarchitecture that have undefined behavior; these can become a focal point when applying other\n\t\t\t\tdetection methods.","effectiveness":"moderate"},{"method":"Automated Analysis","description":"This weakness can be detected (pre-discovery) in hardware by\n\t\t\t\temploying static or dynamic taint analysis methods [REF-1401]. These\n\t\t\t\tmethods can label data in one context (for example, kernel data) and\n\t\t\t\tperform information flow analysis (or a simulation, etc.) to determine\n\t\t\t\twhether tainted data can appear in another context (for example, user\n\t\t\t\tmode). Alternatively, stale or invalid data in shared\n\t\t\t\tmicroarchitectural resources can be marked as tainted, and the taint\n\t\t\t\tanalysis framework can identify when transient operations encounter\n\t\t\t\ttainted data.","effectiveness":"moderate"},{"method":"Automated Analysis","description":"Software vendors can release tools that detect\n\t\t\t\tpresence of known weaknesses (post-discovery) on a processor. For example, some of\n\t\t\t\tthese tools can attempt to transiently execute a vulnerable code\n\t\t\t\tsequence and detect whether code successfully leaks data in a manner\n\t\t\t\tconsistent with the weakness under test. Alternatively, some hardware\n\t\t\t\tvendors provide enumeration for the presence of a weakness (or lack of\n\t\t\t\ta weakness). These enumeration bits can be checked and reported by\n\t\t\t\tsystem software. For example, Linux supports these checks for many\n\t\t\t\tcommodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed","effectiveness":"high"},{"method":"Fuzzing","description":"Academic researchers have demonstrated that this\n\t\t\t\tweakness can be detected in hardware using software fuzzing\n\t\t\t\ttools that treat the underlying hardware as a black box\n\t\t\t\t([REF-1406], [REF-1430])","effectiveness":"opportunistic"}]},{"cwe_id":1422,"name":"Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution","description":"A processor event or prediction may allow incorrect or stale data to\n\t\t  be forwarded to transient operations, potentially exposing data over a\n\t\t  covert channel.","extended_description":"Software may use a variety of techniques to preserve the\n\t\t\tconfidentiality of private data that is accessible within the current\n\t\t\tprocessor context. For example, the memory safety and type safety\n\t\t\tproperties of some high-level programming languages help to prevent\n\t\t\tsoftware written in those languages from exposing private data. As a\n\t\t\tsecond example, software sandboxes may co-locate multiple users'\n\t\t\tsoftware within a single process. The processor's Instruction Set\n\t\t\tArchitecture (ISA) may permit one user's software to access another\n\t\t\tuser's data (because the software shares the same address space), but\n\t\t\tthe sandbox prevents these accesses by using software techniques such\n\t\t\tas bounds checking. If incorrect or stale data can be forwarded (for example, from a\n\t\t\tcache) to transient operations, then the operations'\n\t\t\tmicroarchitectural side effects may correspond to the data. If an\n\t\t\tattacker can trigger these transient operations and observe their side\n\t\t\teffects through a covert channel, then the attacker may be able to\n\t\t\tinfer the data. For example, an attacker process may induce transient\n\t\t\texecution in a victim process that causes the victim to inadvertently\n\t\t\taccess and then expose its private data via a covert channel. In the\n\t\t\tsoftware sandbox example, an attacker sandbox may induce transient\n\t\t\texecution in its own code, allowing it to transiently access and\n\t\t\texpose data in a victim sandbox that shares the same address space. Consequently, weaknesses that arise from incorrect/stale data\n\t\t\tforwarding might violate users' expectations of software-based memory\n\t\t\tsafety and isolation techniques. If the data forwarding behavior is\n\t\t\tnot properly documented by the hardware vendor, this might violate the\n\t\t\tsoftware vendor's expectation of how the hardware should behave.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The hardware designer can attempt to prevent transient\n\t\t\t\texecution from causing observable discrepancies in specific covert\n\t\t\t\tchannels.","effectiveness":"limited","effectiveness_notes":"Instructions or features that constrain transient execution or suppress its side effects may impact performance."},{"description":"Processor designers, system software vendors, or other\n\t\t\t\tagents may choose to restrict the ability of unprivileged software to\n\t\t\t\taccess to high-resolution timers that are commonly used to monitor\n\t\t\t\tcovert channels.","effectiveness":"defense in depth","effectiveness_notes":"Disabling specific predictors or other hardware features may result in significant performance overhead."},{"description":"Processor designers may expose instructions or other\n\t\t\t\tarchitectural features that allow software to mitigate the effects of\n\t\t\t\ttransient execution, but without disabling predictors. These features\n\t\t\t\tmay also help to limit opportunities for data exposure.","effectiveness":"moderate","effectiveness_notes":"Instructions or features that constrain transient\n\t\t\t\texecution or suppress its side effects may impact performance."},{"description":"Processor designers may expose registers (for example,\n\t\t\t\tcontrol registers or model-specific registers) that allow privileged\n\t\t\t\tand/or user software to disable specific predictors or other hardware\n\t\t\t\tfeatures that can cause confidential data to be exposed during\n\t\t\t\ttransient execution.","effectiveness":"limited","effectiveness_notes":"Disabling specific predictors or other hardware\n\t\t\t\tfeatures may result in significant performance overhead."},{"description":"Use software techniques (including the use of\n\t\t\t\tserialization instructions) that are intended to reduce the number of\n\t\t\t\tinstructions that can be executed transiently after a processor event\n\t\t\t\tor misprediction.","effectiveness":"incidental","effectiveness_notes":"Some transient execution weaknesses can be\n\t\t\t\texploited even if a single instruction is executed transiently after a\n\t\t\t\tprocessor event or mis-prediction. This mitigation strategy has many\n\t\t\t\tother pitfalls that prevent it from eliminating this weakness\n\t\t\t\tentirely. For example, see [REF-1389]."},{"description":"Isolate sandboxes or managed runtimes in separate address\n\t\t\t\tspaces (separate processes).","effectiveness":"high","effectiveness_notes":"Process isolation is also an effective strategy\n\t\t\t\tto mitigate many other kinds of weaknesses."},{"description":"Include serialization instructions (for example, LFENCE)\n\t\t\t\tthat prevent processor events or mis-predictions prior to the\n\t\t\t\tserialization instruction from causing transient execution after the\n\t\t\t\tserialization instruction. For some weaknesses, a serialization\n\t\t\t\tinstruction can also prevent a processor event or a mis-prediction\n\t\t\t\tfrom occurring after the serialization instruction (for example,\n\t\t\t\tCVE-2018-3639 can allow a processor to predict that a load will not\n\t\t\t\tdepend on an older store; a serialization instruction between the\n\t\t\t\tstore and the load may allow the store to update memory and prevent\n\t\t\t\tthe mis-prediction from happening at all).","effectiveness":"moderate","effectiveness_notes":"When used to comprehensively mitigate a transient\n\t\t\t\texecution weakness, serialization instructions can introduce\n\t\t\t\tsignificant performance overhead."},{"description":"Use software techniques that can mitigate the\n\t\t\t\tconsequences of transient execution. For example, address masking can\n\t\t\t\tbe used in some circumstances to prevent out-of-bounds transient\n\t\t\t\treads.","effectiveness":"limited","effectiveness_notes":"Address masking and related software mitigation\n\t\t\t\ttechniques have been used to harden specific code sequences that could\n\t\t\t\tpotentially be exploited via transient execution. For example, the\n\t\t\t\tLinux kernel makes limited use of this technique to mitigate\n\t\t\t\tbounds-check bypass [REF-1390]."},{"description":"If the weakness is exposed by a single instruction (or a\n\t\t\t\tsmall set of instructions), then the compiler (or JIT, etc.) can be\n\t\t\t\tconfigured to prevent the affected instruction(s) from being\n\t\t\t\tgenerated, and instead generate an alternate sequence of instructions\n\t\t\t\tthat is not affected by the weakness.","effectiveness":"limited","effectiveness_notes":"This technique is only effective for software\n\t\t\t\tthat is compiled with this mitigation."},{"description":"If a hardware feature can allow incorrect or stale data\n\t\t\t\tto be forwarded to transient operations, the hardware designer may opt\n\t\t\t\tto disclose this behavior in architecture documentation. This\n\t\t\t\tdocumentation can inform users about potential consequences and\n\t\t\t\teffective mitigations.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"A variety of automated static analysis tools can identify\n\t\t\t\tpotentially exploitable code sequences in software. These tools may\n\t\t\t\tperform the analysis on source code, on binary code, or on an\n\t\t\t\tintermediate code representation (for example, during compilation).","effectiveness":"moderate"},{"method":"Manual Analysis","description":"This weakness can be detected in hardware by manually\n\t\t\t\tinspecting processor specifications. Features that exhibit this\n\t\t\t\tweakness may include microarchitectural predictors, access control\n\t\t\t\tchecks that occur out-of-order, or any other features that can allow\n\t\t\t\toperations to execute without committing to architectural state.Hardware designers can also scrutinize aspects\n\t\t\t\tof the instruction set architecture that have undefined\n\t\t\t\tbehavior; these can become a focal point\n\t\t\t\twhen applying other detection methods.","effectiveness":"moderate"},{"method":"Automated Analysis","description":"Software vendors can release tools that detect presence of known\n\t\t\t\tweaknesses on a processor. For example, some of these tools can\n\t\t\t\tattempt to transiently execute a vulnerable code sequence and detect\n\t\t\t\twhether code successfully leaks data in a manner consistent with the\n\t\t\t\tweakness under test. Alternatively, some hardware vendors provide\n\t\t\t\tenumeration for the presence of a weakness (or lack of a\n\t\t\t\tweakness). These enumeration bits can be checked and reported by\n\t\t\t\tsystem software. For example, Linux supports these checks for many\n\t\t\t\tcommodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed","effectiveness":"high"}]},{"cwe_id":1423,"name":"Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution","description":"Shared microarchitectural predictor state may allow code to influence\n\t\t\t\ttransient execution across a hardware boundary, potentially exposing\n\t\t\t\tdata that is accessible beyond the boundary over a covert channel.","extended_description":"Many commodity processors have Instruction Set Architecture (ISA)\n\t\t\t\tfeatures that protect software components from one another. These\n\t\t\t\tfeatures can include memory segmentation, virtual memory, privilege\n\t\t\t\trings, trusted execution environments, and virtual machines, among\n\t\t\t\tothers. For example, virtual memory provides each process with its own\n\t\t\t\taddress space, which prevents processes from accessing each other's\n\t\t\t\tprivate data. Many of these features can be used to form\n\t\t\t\thardware-enforced security boundaries between software components. When separate software components (for example, two processes) share\n\t\t\t\tmicroarchitectural predictor state across a hardware boundary, code in\n\t\t\t\tone component may be able to influence microarchitectural predictor\n\t\t\t\tbehavior in another component. If the predictor can cause transient\n\t\t\t\texecution, the shared predictor state may allow an attacker to\n\t\t\t\tinfluence transient execution in a victim, and in a manner that could\n\t\t\t\tallow the attacker to infer private data from the victim by monitoring\n\t\t\t\tobservable discrepancies (CWE-203) in a covert channel [REF-1400]. Predictor state may be shared when the processor transitions from one\n\t\t\t\tcomponent to another (for example, when a process makes a system call\n\t\t\t\tto enter the kernel). Many commodity processors have features which\n\t\t\t\tprevent microarchitectural predictions that occur before a boundary\n\t\t\t\tfrom influencing predictions that occur after the boundary. Predictor state may also be shared between hardware threads, for\n\t\t\t\texample, sibling hardware threads on a processor that supports\n\t\t\t\tsimultaneous multithreading (SMT). This sharing may be benign if the\n\t\t\t\thardware threads are simultaneously executing in the same software\n\t\t\t\tcomponent, or it could expose a weakness if one sibling is a malicious\n\t\t\t\tsoftware component, and the other sibling is a victim software\n\t\t\t\tcomponent. Processors that share microarchitectural predictors between\n\t\t\t\thardware threads may have features which prevent microarchitectural\n\t\t\t\tpredictions that occur on one hardware thread from influencing\n\t\t\t\tpredictions that occur on another hardware thread. Features that restrict predictor state sharing across transitions or\n\t\t\t\tbetween hardware threads may be always-on, on by default, or may\n\t\t\t\trequire opt-in from software.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The hardware designer can attempt to prevent transient\n\t\t\t\t\texecution from causing observable discrepancies in specific covert\n\t\t\t\t\tchannels.","effectiveness":"","effectiveness_notes":""},{"description":"Hardware designers may choose to use microarchitectural\n\t\t\t\t\tbits to tag predictor entries. For example, each predictor entry may\n\t\t\t\t\tbe tagged with a kernel-mode bit which, when set, indicates that the\n\t\t\t\t\tpredictor entry was created in kernel mode. The processor can use this\n\t\t\t\t\tbit to enforce that predictions in the current mode must have been\n\t\t\t\t\ttrained in the current mode. This can prevent malicious cross-mode\n\t\t\t\t\ttraining, such as when user-mode software attempts to create predictor\n\t\t\t\t\tentries that influence transient execution in the kernel. Predictor\n\t\t\t\t\tentry tags can also be used to associate each predictor entry with the\n\t\t\t\t\tSMT thread that created it, and thus the processor can enforce that\n\t\t\t\t\teach predictor entry can only be used by the SMT thread that created\n\t\t\t\t\tit. This can prevent an SMT thread from using predictor entries\n\t\t\t\t\tcrafted by a malicious sibling SMT thread.","effectiveness":"moderate","effectiveness_notes":"Tagging can be highly effective for predictor\n\t\t\t\t\tstate that is comprised of discrete elements, such as an array of\n\t\t\t\t\trecently visited branch targets. Predictor state can also have\n\t\t\t\t\tdifferent representations that are not conducive to tagging. For\n\t\t\t\t\texample, some processors keep a compressed digest of branch history\n\t\t\t\t\twhich does not contain discrete elements that can be individually\n\t\t\t\t\ttagged."},{"description":"Hardware designers may choose to sanitize\n\t\t\t\t\tmicroarchitectural predictor state (for example, branch prediction\n\t\t\t\t\thistory) when the processor transitions to a different context, for\n\t\t\t\t\texample, whenever a system call is invoked. Alternatively, the\n\t\t\t\t\thardware may expose instruction(s) that allow software to sanitize\n\t\t\t\t\tpredictor state according to the user's threat model. For example,\n\t\t\t\t\tthis can allow operating system software to sanitize predictor state\n\t\t\t\t\twhen performing a context switch from one process to another.","effectiveness":"moderate","effectiveness_notes":"This technique may not be able to mitigate\n\t\t\t\t\tweaknesses that arise from predictor state that is shared across SMT\n\t\t\t\t\tthreads. Sanitizing predictor state on context switches may also\n\t\t\t\t\tnegatively impact performance, either by removing predictor entries\n\t\t\t\t\tthat could be reused when returning to the previous context, or by\n\t\t\t\t\tslowing down the context switch itself."},{"description":"System software can mitigate this weakness by invoking\n\t\t\t\t\tpredictor-state-sanitizing operations (for example, the indirect\n\t\t\t\t\tbranch prediction barrier on Intel x86) when switching from one\n\t\t\t\t\tcontext to another, according to the hardware vendor's\n\t\t\t\t\trecommendations.","effectiveness":"moderate","effectiveness_notes":"This technique may not be able to mitigate\n\t\t\t\t\tweaknesses that arise from predictor state shared across SMT\n\t\t\t\t\tthreads. Sanitizing predictor state may also negatively impact\n\t\t\t\t\tperformance in some circumstances."},{"description":"If the weakness is exposed by a single instruction (or a\n\t\t\t\t\tsmall set of instructions), then the compiler (or JIT, etc.) can be\n\t\t\t\t\tconfigured to prevent the affected instruction(s) from being\n\t\t\t\t\tgenerated. One prominent example of this mitigation is retpoline\n\t\t\t\t\t([REF-1414]).","effectiveness":"limited","effectiveness_notes":"This technique is only effective for software\n\t\t\t\t\tthat is compiled with this mitigation. Additionally, an alternate\n\t\t\t\t\tinstruction sequence may mitigate the weakness on some processors but\n\t\t\t\t\tnot others, even when the processors share the same ISA. For example,\n\t\t\t\t\tretpoline has been documented as effective on some x86 processors, but\n\t\t\t\t\tnot fully effective on other x86 processors."},{"description":"Use control-flow integrity (CFI) techniques to constrain\n\t\t\t\t\tthe behavior of instructions that redirect the instruction pointer,\n\t\t\t\t\tsuch as indirect branch instructions.","effectiveness":"moderate","effectiveness_notes":"Some CFI techniques may not be able to constrain\n\t\t\t\t\ttransient execution, even though they are effective at constraining\n\t\t\t\t\tarchitectural execution. Or they may be able to provide some\n\t\t\t\t\tadditional protection against a transient execution weakness, but\n\t\t\t\t\twithout comprehensively mitigating the weakness. For example,\n\t\t\t\t\tClang-CFI provides strong architectural CFI properties and can make\n\t\t\t\t\tsome transient execution weaknesses more difficult to exploit [REF-1398]."},{"description":"Use software techniques (including the use of\n\t\t\t\t\tserialization instructions) that are intended to reduce the number of\n\t\t\t\t\tinstructions that can be executed transiently after a processor event\n\t\t\t\t\tor misprediction.","effectiveness":"incidental","effectiveness_notes":"Some transient execution weaknesses can be\n\t\t\t\t\texploited even if a single instruction is executed transiently after a\n\t\t\t\t\tprocessor event or mis-prediction. This mitigation strategy has many\n\t\t\t\t\tother pitfalls that prevent it from eliminating this weakness\n\t\t\t\t\tentirely. For example, see [REF-1389]."},{"description":"Some systems may allow the user to disable predictor\n\t\t\t\t\tsharing. For example, this could be a BIOS configuration, or a\n\t\t\t\t\tmodel-specific register (MSR) that can be configured by the operating\n\t\t\t\t\tsystem or virtual machine monitor.","effectiveness":"moderate","effectiveness_notes":"Disabling predictor sharing can negatively impact\n\t\t\t\t\tperformance for some workloads that benefit from shared predictor\n\t\t\t\t\tstate."},{"description":"The hardware vendor may provide a patch to, for example,\n\t\t\t\t\tsanitize predictor state when the processor transitions to a different\n\t\t\t\t\tcontext, or to prevent predictor entries from being shared across SMT\n\t\t\t\t\tthreads. A patch may also introduce new ISA that allows software to\n\t\t\t\t\ttoggle a mitigation.","effectiveness":"moderate","effectiveness_notes":"This mitigation may only be fully effective if\n\t\t\t\t\tthe patch prevents predictor sharing across all contexts that are\n\t\t\t\t\taffected by the weakness. Additionally, sanitizing predictor state\n\t\t\t\t\tand/or preventing shared predictor state can negatively impact\n\t\t\t\t\tperformance in some circumstances."},{"description":"If a hardware feature can allow microarchitectural\n\t\t\t\t\tpredictor state to be shared between contexts, SMT threads, or other\n\t\t\t\t\tarchitecturally defined boundaries, the hardware designer may opt to\n\t\t\t\t\tdisclose this behavior in architecture documentation. This\n\t\t\t\t\tdocumentation can inform users about potential consequences and\n\t\t\t\t\teffective mitigations.","effectiveness":"high","effectiveness_notes":""},{"description":"Processor designers, system software vendors, or other\n\t\t\t\t\tagents may choose to restrict the ability of unprivileged software to\n\t\t\t\t\taccess to high-resolution timers that are commonly used to monitor\n\t\t\t\t\tcovert channels.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected in hardware by manually\n\t\t\t\t\tinspecting processor specifications. Features that exhibit this\n\t\t\t\t\tweakness may have microarchitectural predictor state that is shared\n\t\t\t\t\tbetween hardware threads, execution contexts (for example, user and\n\t\t\t\t\tkernel), or other components that may host mutually distrusting\n\t\t\t\t\tsoftware (or firmware, etc.).","effectiveness":"moderate"},{"method":"Automated Analysis","description":"Software vendors can release tools that detect presence of\n\t\t\t\t\tknown weaknesses on a processor. For example, some of these tools can\n\t\t\t\t\tattempt to transiently execute a vulnerable code sequence and detect\n\t\t\t\t\twhether code successfully leaks data in a manner consistent with the\n\t\t\t\t\tweakness under test. Alternatively, some hardware vendors provide\n\t\t\t\t\tenumeration for the presence of a weakness (or lack of a\n\t\t\t\t\tweakness). These enumeration bits can be checked and reported by\n\t\t\t\t\tsystem software. For example, Linux supports these checks for many\n\t\t\t\t\tcommodity processors: $ cat /proc/cpuinfo | grep bugs | head -n 1 bugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed","effectiveness":"high"},{"method":"Automated Analysis","description":"This weakness can be detected in hardware by employing static\n\t\t\t\t\tor dynamic taint analysis methods [REF-1401]. These methods can label\n\t\t\t\t\teach predictor entry (or prediction history, etc.) according to the\n\t\t\t\t\tprocessor context that created it. Taint analysis or information flow\n\t\t\t\t\tanalysis can then be applied to detect when predictor state created in\n\t\t\t\t\tone context can influence predictions made in another context.","effectiveness":"moderate"}]},{"cwe_id":1426,"name":"Improper Validation of Generative AI Output","description":"The product invokes a generative AI/ML\n\t\t\tcomponent whose behaviors and outputs cannot be directly\n\t\t\tcontrolled, but the product does not validate or\n\t\t\tinsufficiently validates the outputs to ensure that they\n\t\t\talign with the intended security, content, or privacy\n\t\t\tpolicy.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Since the output from a generative AI component (such as an LLM) cannot be trusted, ensure that it operates in an untrusted or non-privileged space.","effectiveness":"","effectiveness_notes":""},{"description":"Use \"semantic comparators,\" which are mechanisms that\n\t\t\t\t\tprovide semantic comparison to identify objects that might appear\n\t\t\t\t\tdifferent but are semantically similar.","effectiveness":"","effectiveness_notes":""},{"description":"Use components that operate\n\t\t\t\t\texternally to the system to monitor the output and\n\t\t\t\t\tact as a moderator. These components are called\n\t\t\t\t\tdifferent terms, such as supervisors or\n\t\t\t\t\tguardrails.","effectiveness":"","effectiveness_notes":""},{"description":"During model training, use an appropriate variety of good\n\t\t\t\t  and bad examples to guide preferred outputs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Use known techniques for prompt injection\n\t\t\t and other attacks, and adjust the attacks to be more\n\t\t\t specific to the model or system.","effectiveness":""},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"Use known techniques for prompt injection\n\t\t\t and other attacks, and adjust the attacks to be more\n\t\t\t specific to the model or system.","effectiveness":""},{"method":"Architecture or Design Review","description":"Review of the product design can be\n\t\t\t effective, but it works best in conjunction with dynamic\n\t\t\t analysis.","effectiveness":""}]},{"cwe_id":1427,"name":"Improper Neutralization of Input Used for LLM Prompting","description":"The product uses externally-provided data to build prompts provided to\nlarge language models (LLMs), but the way these prompts are constructed\ncauses the LLM to fail to distinguish between user-supplied inputs and\ndeveloper provided system directives.","extended_description":"When prompts are constructed using externally controllable data, it is\noften possible to cause an LLM to ignore the original guidance provided by\nits creators (known as the \"system prompt\") by inserting malicious\ninstructions in plain human language or using bypasses such as special\ncharacters or tags. Because LLMs are designed to treat all instructions as\nlegitimate, there is often no way for the model to differentiate between\nwhat prompt language is malicious when it performs inference and returns\ndata. Many LLM systems incorporate data from other adjacent products or\nexternal data sources like Wikipedia using API calls and retrieval\naugmented generation (RAG). Any external sources in use that may contain\nuntrusted data should also be considered potentially malicious.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"LLM-enabled applications should be designed to ensure\nproper sanitization of user-controllable input, ensuring that no\nintentionally misleading or dangerous characters can be\nincluded. Additionally, they should be designed in a way that ensures\nthat user-controllable input is identified as untrusted and\npotentially dangerous.","effectiveness":"high","effectiveness_notes":""},{"description":"LLM prompts should be constructed in a way that\neffectively differentiates between user-supplied input and\ndeveloper-constructed system prompting to reduce the chance of model\nconfusion at inference-time.","effectiveness":"moderate","effectiveness_notes":""},{"description":"LLM-enabled applications should be designed to ensure\nproper sanitization of user-controllable input, ensuring that no\nintentionally misleading or dangerous characters can be\nincluded. Additionally, they should be designed in a way that ensures\nthat user-controllable input is identified as untrusted and\npotentially dangerous.","effectiveness":"high","effectiveness_notes":""},{"description":"Ensure that model training includes training examples\nthat avoid leaking secrets and disregard malicious inputs. Train the\nmodel to recognize secrets, and label training data\nappropriately. Note that due to the non-deterministic nature of\nprompting LLMs, it is necessary to perform testing of the same test\ncase several times in order to ensure that troublesome behavior is not\npossible. Additionally, testing should be performed each time a new\nmodel is used or a model's weights are updated.","effectiveness":"","effectiveness_notes":""},{"description":"During deployment/operation, use components that operate externally to the system to\nmonitor the output and act as a moderator. These components are called\ndifferent terms, such as supervisors or guardrails.","effectiveness":"","effectiveness_notes":""},{"description":"During system configuration, the model could be\nfine-tuned to better control and neutralize potentially dangerous\ninputs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Use known techniques for prompt injection and other attacks, and\n\t\t\t\tadjust the attacks to be more specific to the model or system.","effectiveness":""},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"Use known techniques for prompt injection and other attacks, and\n\t\t\t\tadjust the attacks to be more specific to the model or system.","effectiveness":""},{"method":"Architecture or Design Review","description":"Review of the product design can be effective, but it works best in conjunction with dynamic analysis.","effectiveness":""}]},{"cwe_id":143,"name":"Improper Neutralization of Record Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":144,"name":"Improper Neutralization of Line Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":145,"name":"Improper Neutralization of Section Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":146,"name":"Improper Neutralization of Expression/Command Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":147,"name":"Improper Neutralization of Input Terminators","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.","extended_description":"For example, a \".\" in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":148,"name":"Improper Neutralization of Input Leaders","description":"The product does not properly handle when a leading character or sequence (\"leader\") is missing or malformed, or if multiple leaders are used when only one should be allowed.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":149,"name":"Improper Neutralization of Quoting Syntax","description":"Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":15,"name":"External Control of System or Configuration Setting","description":"One or more system settings or configuration elements can be externally controlled by a user.","extended_description":"Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.","effectiveness":"","effectiveness_notes":""},{"description":"In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":150,"name":"Improper Neutralization of Escape, Meta, or Control Sequences","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.","extended_description":"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":151,"name":"Improper Neutralization of Comment Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":152,"name":"Improper Neutralization of Macro Symbols","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":153,"name":"Improper Neutralization of Substitution Characters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":154,"name":"Improper Neutralization of Variable Name Delimiters","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.","extended_description":"As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: \"$\" for an environment variable.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":155,"name":"Improper Neutralization of Wildcards or Matching Symbols","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.","extended_description":"As data is parsed, an injected element may cause the process to take unexpected actions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":156,"name":"Improper Neutralization of Whitespace","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.","extended_description":"This can include space, tab, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":157,"name":"Failure to Sanitize Paired Delimiters","description":"The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.","extended_description":"Paired delimiters might include: < and > angle brackets ( and ) parentheses { and } braces [ and ] square brackets \" \" double quotes ' ' single quotes","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":158,"name":"Improper Neutralization of Null Byte or NUL Character","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.","extended_description":"As data is parsed, an injected NUL character or null byte may cause the product to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":159,"name":"Improper Handling of Invalid Use of Special Elements","description":"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":160,"name":"Improper Neutralization of Leading Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","extended_description":"As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":161,"name":"Improper Neutralization of Multiple Leading Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","extended_description":"As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":162,"name":"Improper Neutralization of Trailing Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","extended_description":"As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":163,"name":"Improper Neutralization of Multiple Trailing Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","extended_description":"As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":164,"name":"Improper Neutralization of Internal Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","extended_description":"As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":165,"name":"Improper Neutralization of Multiple Internal Special Elements","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","extended_description":"As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":166,"name":"Improper Handling of Missing Special Element","description":"The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":167,"name":"Improper Handling of Additional Special Element","description":"The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":168,"name":"Improper Handling of Inconsistent Special Elements","description":"The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.","extended_description":"An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":170,"name":"Improper Null Termination","description":"The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.","extended_description":"Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.","effectiveness":"","effectiveness_notes":""},{"description":"If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.","effectiveness":"","effectiveness_notes":""},{"description":"Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.","effectiveness":"","effectiveness_notes":""},{"description":"Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":172,"name":"Encoding Error","description":"The product does not properly encode or decode the data, resulting in unexpected values.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":173,"name":"Improper Handling of Alternate Encoding","description":"The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":174,"name":"Double Decoding of the Same Data","description":"The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":175,"name":"Improper Handling of Mixed Encoding","description":"The product does not properly handle when the same input uses several different (mixed) encodings.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":176,"name":"Improper Handling of Unicode Encoding","description":"The product does not properly handle when an input contains Unicode encoding.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":177,"name":"Improper Handling of URL Encoding (Hex Encoding)","description":"The product does not properly handle when all or part of an input has been URL encoded.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":178,"name":"Improper Handling of Case Sensitivity","description":"The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.","extended_description":"Improperly handled case sensitive data can lead to several possible consequences, including: case-insensitive passwords reducing the size of the key space, making brute force attacks easier bypassing filters or access controls using alternate names multiple interpretation errors using alternate names.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":179,"name":"Incorrect Behavior Order: Early Validation","description":"The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.","extended_description":"Product needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":180,"name":"Incorrect Behavior Order: Validate Before Canonicalize","description":"The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.","extended_description":"This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":181,"name":"Incorrect Behavior Order: Validate Before Filter","description":"The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.","extended_description":"This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":182,"name":"Collapse of Data into Unsafe Value","description":"The product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""},{"description":"Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":183,"name":"Permissive List of Allowed Inputs","description":"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":184,"name":"Incomplete List of Disallowed Inputs","description":"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not rely exclusively on detecting disallowed inputs.  There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants.  Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"Exploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.","effectiveness":""}]},{"cwe_id":185,"name":"Incorrect Regular Expression","description":"The product specifies a regular expression in a way that causes data to be improperly matched or compared.","extended_description":"When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":186,"name":"Overly Restrictive Regular Expression","description":"A regular expression is overly restrictive, which prevents dangerous values from being detected.","extended_description":"This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/.  This expression is not \"complex\" but the value \"9\" is not matched when maybe the programmer planned to check for it.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":187,"name":"Partial String Comparison","description":"The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.","extended_description":"For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":188,"name":"Reliance on Data/Memory Layout","description":"The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.","extended_description":"When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size. In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"In flat address space situations, never allow computing memory addresses as offsets from another memory address.","effectiveness":"","effectiveness_notes":""},{"description":"Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).","effectiveness":"","effectiveness_notes":""},{"description":"Testing: Test that the implementation properly handles each case in the protocol grammar.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":190,"name":"Integer Overflow or Wraparound","description":"The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. If possible, choose a language or compiler that performs automatic bounds checking.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]","effectiveness":"","effectiveness_notes":""},{"description":"Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.","effectiveness":"","effectiveness_notes":""},{"description":"Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.","effectiveness":"high"},{"method":"Black Box","description":"Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":191,"name":"Integer Underflow (Wrap or Wraparound)","description":"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.","extended_description":"This can happen in signed and unsigned cases.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":192,"name":"Integer Coercion Error","description":"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.","extended_description":"Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"A language which throws exceptions on ambiguous data casts might be chosen.","effectiveness":"","effectiveness_notes":""},{"description":"Design objects and program flow such that multiple or complex casts are unnecessary","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":193,"name":"Off-by-one Error","description":"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":194,"name":"Unexpected Sign Extension","description":"The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":195,"name":"Signed to Unsigned Conversion Error","description":"The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.","extended_description":"It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program. Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":196,"name":"Unsigned to Signed Conversion Error","description":"The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.","extended_description":"Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Choose a language which is not subject to these casting flaws.","effectiveness":"","effectiveness_notes":""},{"description":"Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.","effectiveness":"","effectiveness_notes":""},{"description":"Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":197,"name":"Numeric Truncation Error","description":"Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.","extended_description":"When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":198,"name":"Use of Incorrect Byte Ordering","description":"The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Black Box","description":"Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.","effectiveness":""}]},{"cwe_id":20,"name":"Improper Input Validation","description":"The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.","extended_description":"Input validation is a frequently-used technique\n\t   for checking potentially dangerous inputs in order to\n\t   ensure that the inputs are safe for processing within the\n\t   code, or when communicating with other components.  When\n\t   software does not validate input properly, an attacker is\n\t   able to craft the input in a form that is not expected by\n\t   the rest of the application. This will lead to parts of the\n\t   system receiving unintended input, which may result in\n\t   altered control flow, arbitrary control of a resource, or\n\t   arbitrary code execution. Input validation is not the only technique for\n\t   processing input, however.  Other techniques attempt to\n\t   transform potentially-dangerous input into something safe, such\n\t   as filtering (CWE-790) - which attempts to remove dangerous\n\t   inputs - or encoding/escaping (CWE-116), which attempts to\n\t   ensure that the input is not misinterpreted when it is included\n\t   in output to another component. Other techniques exist as well\n\t   (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured.  Structured data\n\t   can be composed of many nested layers, composed of\n\t   combinations of metadata and raw data, with other simple or\n\t   structured data. Many properties of raw data or metadata may need\n\t   to be validated upon entry into the code, such\n\t   as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often\n\t   be calculated or inferred by the code itself.  Errors in\n\t   deriving properties may be considered a contributing factor\n\t   to improper input validation. Note that \"input validation\" has very different\n\t   meanings to different people, or within different\n\t   classification schemes.  Caution must be used when\n\t   referencing this CWE entry or mapping to it.  For example,\n\t   some weaknesses might involve inadvertently giving control\n\t   to an attacker over an input when they should not be able\n\t   to provide an input at all, but sometimes this is referred\n\t   to as input validation. Finally, it is important to emphasize that the\n\t   distinctions between input validation and output escaping\n\t   are often blurred, and developers must be careful to\n\t   understand the difference, including how input validation\n\t   is not always sufficient to prevent vulnerabilities,\n\t   especially when less stringent data types must be\n\t   supported, such as free-form text. Consider a SQL injection\n\t   scenario in which a person's last name is inserted into a\n\t   query. The name \"O'Reilly\" would likely pass the validation\n\t   step since it is a common last name in the English\n\t   language. However, this valid name cannot be directly\n\t   inserted into the database because it contains the \"'\"\n\t   apostrophe character, which would need to be escaped or\n\t   otherwise transformed. In this case, removing the\n\t   apostrophe might reduce the risk of SQL injection, but it\n\t   would produce incorrect behavior because the wrong name\n\t   would be recorded.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]","effectiveness":"","effectiveness_notes":""},{"description":"Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).","effectiveness":"","effectiveness_notes":""},{"description":"Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"high","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.","effectiveness":"","effectiveness_notes":""},{"description":"When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.","effectiveness":"","effectiveness_notes":""},{"description":"Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.","effectiveness":"","effectiveness_notes":""},{"description":"Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.","effectiveness":"","effectiveness_notes":""},{"description":"When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.","effectiveness":""},{"method":"Manual Static Analysis","description":"When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.","effectiveness":""},{"method":"Fuzzing","description":"Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer Cost effective for partial coverage: Host Application Interface Scanner Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":200,"name":"Exposure of Sensitive Information to an Unauthorized Actor","description":"The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.","extended_description":"There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker.  Some kinds of sensitive information include: private, personal information, such as personal messages, financial data, health records, geographic location, or contact details system status and environment, such as the operating system and installed packages business secrets and intellectual property network status and configuration the product's own code or internal state metadata, e.g. logging of connections or message headers indirect information, such as a discrepancy between two internal operations that can be observed by an outsider Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected.  These parties include: the product's own users people or organizations whose information is created or used by the product, even if they are not direct product users the product's administrators, including the admins of the system(s) and/or networks on which the product operates the developer Information exposures can occur in different ways: the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been \"scrubbed\" or \"sanitized\" a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program. the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place. It is common practice to describe any loss of confidentiality as an \"information exposure,\" but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read.  CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Inter-application Flow Analysis","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Source code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":201,"name":"Insertion of Sensitive Information Into Sent Data","description":"The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.","effectiveness":"","effectiveness_notes":""},{"description":"Setup default error messages so that unexpected errors do not disclose sensitive information.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":202,"name":"Exposure of Sensitive Information Through Data Queries","description":"When trying to keep information confidential, an attacker can often infer some of the information by using statistics.","extended_description":"In situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"This is a complex topic. See the book Translucent Databases for a good discussion of best practices.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":203,"name":"Observable Discrepancy","description":"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.","extended_description":"Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":204,"name":"Observable Response Discrepancy","description":"The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.","extended_description":"This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":205,"name":"Observable Behavioral Discrepancy","description":"The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.","extended_description":"Ideally, a product should provide as little information about its internal operations as possible.  Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack.  In some cases, behavioral discrepancies can be used by attackers to form a side channel.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":206,"name":"Observable Internal Behavioral Discrepancy","description":"The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.","extended_description":"Ideally, a product should provide as little information as possible to an attacker.  Any hints that the attacker may be making progress can then be used to simplify or optimize the attack.  For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure.  However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct.  If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":207,"name":"Observable Behavioral Discrepancy With Equivalent Products","description":"The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.","extended_description":"For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system.  Attackers often perform \"fingerprinting,\" which uses discrepancies in order to identify which specific product is in use.  Once the specific product has been identified, the attacks can be made more customized and efficient.  Often, an organization might intentionally allow the specific product to be identifiable.  However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way.  In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":208,"name":"Observable Timing Discrepancy","description":"Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.","extended_description":"In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations.  For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess.  Timing discrepancies effectively form a timing side channel.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":209,"name":"Generation of Error Message Containing Sensitive Information","description":"The product generates an error message that includes sensitive information about its environment, users, or associated data.","extended_description":"The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.","effectiveness":"","effectiveness_notes":""},{"description":"Handle exceptions internally and do not display errors containing potentially sensitive information to a user.","effectiveness":"","effectiveness_notes":""},{"description":"Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.","effectiveness":"defense in depth","effectiveness_notes":"This makes it easier to spot places in the code where data is being used that is unencrypted."},{"description":"Debugging information should not make its way into a production release.","effectiveness":"","effectiveness_notes":""},{"description":"Debugging information should not make its way into a production release.","effectiveness":"","effectiveness_notes":""},{"description":"Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.","effectiveness":"","effectiveness_notes":""},{"description":"Create default error pages or messages that do not leak any information.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.","effectiveness":"high"},{"method":"Automated Analysis","description":"Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.","effectiveness":"moderate"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.","effectiveness":"moderate"},{"method":"Manual Dynamic Analysis","description":"Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":""}]},{"cwe_id":210,"name":"Self-generated Error Message Containing Sensitive Information","description":"The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Debugging information should not make its way into a production release.","effectiveness":"","effectiveness_notes":""},{"description":"Debugging information should not make its way into a production release.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":211,"name":"Externally-Generated Error Message Containing Sensitive Information","description":"The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.","effectiveness":"","effectiveness_notes":""},{"description":"Debugging information should not make its way into a production release.","effectiveness":"","effectiveness_notes":""},{"description":"Debugging information should not make its way into a production release.","effectiveness":"","effectiveness_notes":""},{"description":"Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.","effectiveness":"","effectiveness_notes":""},{"description":"The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":212,"name":"Improper Removal of Sensitive Information Before Storage or Transfer","description":"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.","extended_description":"Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.","effectiveness":"defense in depth","effectiveness_notes":"This makes it easier to spot places in the code where data is being used that is unencrypted."},{"description":"Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":213,"name":"Exposure of Sensitive Information Due to Incompatible Policies","description":"The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.","extended_description":"When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators.  Each stakeholder effectively has its own intended security policy that the product is expected to uphold.  When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":214,"name":"Invocation of Process Using Visible Sensitive Information","description":"A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.","extended_description":"Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":215,"name":"Insertion of Sensitive Information Into Debugging Code","description":"The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.","extended_description":"When debugging, it may be necessary to report detailed information to the programmer.  However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":216,"name":"DEPRECATED: Containment Errors (Container Errors)","description":"This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the \"container\" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":217,"name":"DEPRECATED: Failure to Protect Stored Data from Modification","description":"This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":218,"name":"DEPRECATED: Failure to provide confidentiality for stored data","description":"This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":219,"name":"Storage of File with Sensitive Data Under Web Root","description":"The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.","extended_description":"Besides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server.  If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid storing information under the web root directory.","effectiveness":"","effectiveness_notes":""},{"description":"Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":22,"name":"Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","description":"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.","extended_description":"Many file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"description":"Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.","effectiveness":"","effectiveness_notes":""},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.","effectiveness":"high"},{"method":"Manual Static Analysis","description":"Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":220,"name":"Storage of File With Sensitive Data Under FTP Root","description":"The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.","extended_description":"","likelihood_of_exploit":"","background_details":["Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot."],"potential_mitigations":[{"description":"Avoid storing information under the FTP root directory.","effectiveness":"","effectiveness_notes":""},{"description":"Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":221,"name":"Information Loss or Omission","description":"The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.","extended_description":"This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":222,"name":"Truncation of Security-relevant Information","description":"The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":223,"name":"Omission of Security-relevant Information","description":"The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":224,"name":"Obscured Security-relevant Information by Alternate Name","description":"The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":225,"name":"DEPRECATED: General Information Management Problems","description":"This weakness can be found at CWE-199.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":226,"name":"Sensitive Information in Resource Not Removed Before Reuse","description":"The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.","extended_description":"When resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information. Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated. This weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.","effectiveness":"high","effectiveness_notes":""},{"description":"When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though \"logical\" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"Write a known pattern into each sensitive location. Trigger the release of the resource or cause the desired state transition to occur. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the product needs to be fixed. Note that this test can likely be automated.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":228,"name":"Improper Handling of Syntactically Invalid Structure","description":"The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":229,"name":"Improper Handling of Values","description":"The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":23,"name":"Relative Path Traversal","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":230,"name":"Improper Handling of Missing Values","description":"The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":231,"name":"Improper Handling of Extra Values","description":"The product does not handle or incorrectly handles when more values are provided than expected.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":232,"name":"Improper Handling of Undefined Values","description":"The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":233,"name":"Improper Handling of Parameters","description":"The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":234,"name":"Failure to Handle Missing Parameter","description":"If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"This issue can be simply combated with the use of proper build process.","effectiveness":"","effectiveness_notes":""},{"description":"Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":235,"name":"Improper Handling of Extra Parameters","description":"The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":236,"name":"Improper Handling of Undefined Parameters","description":"The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":237,"name":"Improper Handling of Structural Elements","description":"The product does not handle or incorrectly handles inputs that are related to complex structures.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":238,"name":"Improper Handling of Incomplete Structural Elements","description":"The product does not handle or incorrectly handles when a particular structural element is not completely specified.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":239,"name":"Failure to Handle Incomplete Element","description":"The product does not properly handle when a particular element is not completely specified.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":24,"name":"Path Traversal: '../filedir'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\".","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":240,"name":"Improper Handling of Inconsistent Structural Elements","description":"The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":241,"name":"Improper Handling of Unexpected Data Type","description":"The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":242,"name":"Use of Inherently Dangerous Function","description":"The product calls a function that can never be guaranteed to work safely.","extended_description":"Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Ban the use of dangerous functions. Use their safe equivalent.","effectiveness":"","effectiveness_notes":""},{"description":"Use grep or static analysis tools to spot usage of dangerous functions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":243,"name":"Creation of chroot Jail Without Changing Working Directory","description":"The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.","extended_description":"Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.","likelihood_of_exploit":"high","background_details":["The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system."],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":244,"name":"Improper Clearing of Heap Memory Before Release ('Heap Inspection')","description":"Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.","extended_description":"When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a \"heap inspection\" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":245,"name":"J2EE Bad Practices: Direct Management of Connections","description":"The J2EE application directly manages connections, instead of using the container's connection management facilities.","extended_description":"The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":246,"name":"J2EE Bad Practices: Direct Use of Sockets","description":"The J2EE application directly uses sockets instead of using framework method calls.","extended_description":"The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues. Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use framework method calls instead of using sockets directly.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":247,"name":"DEPRECATED: Reliance on DNS Lookups in a Security Decision","description":"This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":248,"name":"Uncaught Exception","description":"An exception is thrown from a function, but it is not caught.","extended_description":"When an exception is not caught, it may cause the program to crash or expose sensitive information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":249,"name":"DEPRECATED: Often Misused: Path Manipulation","description":"This entry has been deprecated because of name\n\tconfusion and an accidental combination of multiple\n\tweaknesses. Most of its content has been transferred to\n\tCWE-785.","extended_description":"This entry was deprecated for several reasons. The primary\n        reason is over-loading of the \"path manipulation\" term and the\n        description. The original description for this entry was the\n        same as that for the \"Often Misused: File System\" item in the\n        original Seven Pernicious Kingdoms paper. However, Seven\n        Pernicious Kingdoms also has a \"Path Manipulation\" phrase that\n        is for external control of pathnames (CWE-73), which is a\n        factor in symbolic link following and path traversal, neither\n        of which is explicitly mentioned in 7PK. Fortify uses the\n        phrase \"Often Misused: Path Manipulation\" for a broader range\n        of problems, generally for issues related to buffer\n        management. Given the multiple conflicting uses of this term,\n        there is a chance that CWE users may have incorrectly mapped\n        to this entry. The second reason for deprecation is an implied combination of\n\tmultiple weaknesses within buffer-handling functions. The\n\tfocus of this entry was generally on the path-conversion\n\tfunctions and their association with buffer\n\toverflows. However, some of Fortify's Vulncat entries have the\n\tterm \"path manipulation\" but describe a non-overflow weakness\n\tin which the buffer is not guaranteed to contain the entire\n\tpathname, i.e., there is information truncation (see CWE-222\n\tfor a similar concept). A new entry for this non-overflow\n\tweakness may be created in a future version of CWE.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":25,"name":"Path Traversal: '/../filedir'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. Sometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":250,"name":"Execution with Unnecessary Privileges","description":"The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.","extended_description":"New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.","effectiveness":"","effectiveness_notes":""},{"description":"Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.","effectiveness":"","effectiveness_notes":""},{"description":"Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.","effectiveness":"","effectiveness_notes":""},{"description":"When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.","effectiveness":"","effectiveness_notes":""},{"description":"If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.","effectiveness":""},{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Compare binary / bytecode to application permission manifest Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker Permission Manifest Analysis","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":252,"name":"Unchecked Return Value","description":"The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.","extended_description":"Two common programmer assumptions are \"this function call can never fail\" and \"it doesn't matter if this function call fails\". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the product is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.","likelihood_of_exploit":"low","background_details":["Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function."],"potential_mitigations":[{"description":"Check the results of all functions that return a value and verify that the value is expected.","effectiveness":"high","effectiveness_notes":"Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."},{"description":"Ensure that you account for all possible return values from the function.","effectiveness":"","effectiveness_notes":""},{"description":"When designing a function, make sure you return a value or throw an exception in case of an error.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":253,"name":"Incorrect Check of Function Return Value","description":"The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.","extended_description":"Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Use a language or compiler that uses exceptions and requires the catching of those exceptions.","effectiveness":"","effectiveness_notes":""},{"description":"Properly check all functions which return a value.","effectiveness":"","effectiveness_notes":""},{"description":"When designing any function make sure you return a value or throw an exception in case of an error.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":256,"name":"Plaintext Storage of a Password","description":"Storing a password in plaintext may result in a system compromise.","extended_description":"Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Avoid storing passwords in easily accessible locations.","effectiveness":"","effectiveness_notes":""},{"description":"Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.","effectiveness":"","effectiveness_notes":""},{"description":"A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.","effectiveness":"none","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":257,"name":"Storing Passwords in a Recoverable Format","description":"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use strong, non-reversible encryption to protect stored passwords.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":258,"name":"Empty Password in Configuration File","description":"Using an empty string as a password is insecure.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":259,"name":"Use of Hard-coded Password","description":"The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.","extended_description":"A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the product contains an authentication mechanism that checks for a hard-coded password. Outbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.","effectiveness":"","effectiveness_notes":""},{"description":"For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.","effectiveness":"","effectiveness_notes":""},{"description":"Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.","effectiveness":"","effectiveness_notes":""},{"description":"For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.","effectiveness":"","effectiveness_notes":""},{"description":"For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.","effectiveness":""},{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":26,"name":"Path Traversal: '/dir/../filename'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/dir/../filename\" sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":260,"name":"Password in Configuration File","description":"The product stores a password in a configuration file that might be accessible to actors who do not know the password.","extended_description":"This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid storing passwords in easily accessible locations.","effectiveness":"","effectiveness_notes":""},{"description":"Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":261,"name":"Weak Encoding for Password","description":"Obscuring a password with a trivial encoding does not protect the password.","extended_description":"Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":262,"name":"Not Using Password Aging","description":"The product does not have a mechanism in place for managing password aging.","extended_description":"Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. Without mechanisms such as aging, users might not change their passwords in a timely manner. Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.","effectiveness":"","effectiveness_notes":""},{"description":"Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].","effectiveness":"discouraged common practice","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":263,"name":"Password Aging with Long Expiration","description":"The product supports password aging, but the expiration period is too long.","extended_description":"Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. A long expiration provides more time for attackers to conduct password cracking before users are forced to change to a new password. Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the user is notified several times leading up to the password expiration.","effectiveness":"","effectiveness_notes":""},{"description":"Create mechanisms to prevent users from reusing passwords or creating similar passwords.","effectiveness":"","effectiveness_notes":""},{"description":"Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].","effectiveness":"discouraged common practice","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":266,"name":"Incorrect Privilege Assignment","description":"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":267,"name":"Privilege Defined With Unsafe Actions","description":"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":268,"name":"Privilege Chaining","description":"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","effectiveness":"","effectiveness_notes":""},{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":269,"name":"Improper Privilege Management","description":"The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system.","effectiveness":"","effectiveness_notes":""},{"description":"Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":27,"name":"Path Traversal: 'dir/../../filename'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal \"../\" sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one \"../\" sequence, so multiple \"../\" can bypass that check. Alternately, this manipulation could be used to bypass a check for \"../\" at the beginning of the pathname, moving up more than one directory level.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":270,"name":"Privilege Context Switching Error","description":"The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":271,"name":"Privilege Dropping / Lowering Errors","description":"The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.","extended_description":"In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":272,"name":"Least Privilege Violation","description":"The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":273,"name":"Improper Check for Dropped Privileges","description":"The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.","extended_description":"If the drop fails, the product will continue to run with the raised privileges, which might provide additional access to unprivileged users.","likelihood_of_exploit":"medium","background_details":["In Windows based environments that have access control, impersonation is used so that access checks can be performed on a client identity by a server with higher privileges. By impersonating the client, the server is restricted to client-level security -- although in different threads it may have much higher privileges."],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Check the results of all functions that return a value and verify that the value is expected.","effectiveness":"high","effectiveness_notes":"Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."},{"description":"In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":274,"name":"Improper Handling of Insufficient Privileges","description":"The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":276,"name":"Incorrect Default Permissions","description":"During installation, installed file permissions are set to allow anyone to modify those files.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"The architecture needs to access and modification attributes for files to only those users who actually require those actions.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":277,"name":"Insecure Inherited Permissions","description":"A product defines a set of insecure permissions that are inherited by objects that are created by the program.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":278,"name":"Insecure Preserved Inherited Permissions","description":"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":279,"name":"Incorrect Execution-Assigned Permissions","description":"While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":28,"name":"Path Traversal: '..\\filedir'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"..\\\" sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '..\\' manipulation is the canonical manipulation for operating systems that use \"\\\" as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the \"/\" separator is valid.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":280,"name":"Improper Handling of Insufficient Permissions or Privileges","description":"The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":281,"name":"Improper Preservation of Permissions","description":"The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":282,"name":"Improper Ownership Management","description":"The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":283,"name":"Unverified Ownership","description":"The product does not properly verify that a critical resource is owned by the proper entity.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":284,"name":"Improper Access Control","description":"The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.","extended_description":"Access control involves the use of several protection mechanisms such as: Authentication (proving the identity of an actor) Authorization (ensuring that a given actor can access a resource), and Accountability (tracking of activities that were performed) When any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc. There are two distinct behaviors that can introduce access control weaknesses: Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator. Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":285,"name":"Improper Authorization","description":"The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.","extended_description":"Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.","likelihood_of_exploit":"high","background_details":["An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."],"potential_mitigations":[{"description":"Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries. Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].","effectiveness":"","effectiveness_notes":""},{"description":"For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.","effectiveness":"","effectiveness_notes":""},{"description":"Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.","effectiveness":"limited"},{"method":"Automated Dynamic Analysis","description":"Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic","effectiveness":""},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.","effectiveness":"moderate"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":286,"name":"Incorrect User Management","description":"The product does not properly manage a user within its environment.","extended_description":"Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":287,"name":"Improper Authentication","description":"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use an authentication framework or library such as the OWASP ESAPI Authentication feature.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.","effectiveness":"limited"},{"method":"Manual Static Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction","effectiveness":"high"}]},{"cwe_id":288,"name":"Authentication Bypass Using an Alternate Path or Channel","description":"The product requires authentication, but the product has an alternate path or channel that does not require authentication.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":289,"name":"Authentication Bypass by Alternate Name","description":"The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":29,"name":"Path Traversal: '\\..\\filename'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-25, except using \"\\\" instead of \"/\". Sometimes a program checks for \"..\\\" at the beginning of the input, so a \"\\..\\\" can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the \"/\" separator is valid.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":290,"name":"Authentication Bypass by Spoofing","description":"This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":291,"name":"Reliance on IP Address for Authentication","description":"The product uses an IP address for authentication.","extended_description":"IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":292,"name":"DEPRECATED: Trusting Self-reported DNS Name","description":"This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":293,"name":"Using Referer Field for Authentication","description":"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.","extended_description":"","likelihood_of_exploit":"high","background_details":["The referer field in HTML requests can be simply modified by malicious users, rendering it useless as a means of checking the validity of the request in question."],"potential_mitigations":[{"description":"In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":294,"name":"Authentication Bypass by Capture-replay","description":"A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).","extended_description":"Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.","effectiveness":"","effectiveness_notes":""},{"description":"Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":295,"name":"Improper Certificate Validation","description":"The product does not validate, or incorrectly validates, a certificate.","extended_description":"When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.","likelihood_of_exploit":"","background_details":["A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner."],"potential_mitigations":[{"description":"Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.","effectiveness":"","effectiveness_notes":""},{"description":"If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":296,"name":"Improper Following of a Certificate's Chain of Trust","description":"The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.","extended_description":"If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate. In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate. There are several ways in which the chain of trust might be broken, including but not limited to: Any certificate in the chain is self-signed, unless it the root. Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate. An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions. The root certificate has been compromised or authorized to the wrong party.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Ensure that proper certificate checking is included in the system design.","effectiveness":"","effectiveness_notes":""},{"description":"Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.","effectiveness":"","effectiveness_notes":""},{"description":"If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":297,"name":"Improper Validation of Certificate with Host Mismatch","description":"The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.","extended_description":"Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the product is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed. Even if the product attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name. This weakness can occur even when the product uses Certificate Pinning, if the product does not verify the hostname at the time a certificate is pinned.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.","effectiveness":"","effectiveness_notes":""},{"description":"If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"Set up an untrusted endpoint (e.g. a server) with which the product will connect.  Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the product performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.","effectiveness":""},{"method":"Black Box","description":"When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955].  This methodology might be extensible to other technologies.","effectiveness":""}]},{"cwe_id":298,"name":"Improper Validation of Certificate Expiration","description":"A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.","extended_description":"When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.","effectiveness":"","effectiveness_notes":""},{"description":"If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":299,"name":"Improper Check for Certificate Revocation","description":"The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.","extended_description":"An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Ensure that certificates are checked for revoked status.","effectiveness":"","effectiveness_notes":""},{"description":"If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":30,"name":"Path Traversal: '\\dir\\..\\filename'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\dir\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-26, except using \"\\\" instead of \"/\". The '\\dir\\..\\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"..\\\" at the beginning of the input, so a \"\\..\\\" can bypass that check.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":300,"name":"Channel Accessible by Non-Endpoint","description":"The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.","extended_description":"In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always fully authenticate both ends of any communications channel.","effectiveness":"","effectiveness_notes":""},{"description":"Adhere to the principle of complete mediation.","effectiveness":"","effectiveness_notes":""},{"description":"A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":301,"name":"Reflection Attack in an Authentication Protocol","description":"Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.","extended_description":"A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol. Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.","effectiveness":"","effectiveness_notes":""},{"description":"Let the initiator prove its identity before proceeding.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":302,"name":"Authentication Bypass by Assumed-Immutable Data","description":"The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":303,"name":"Incorrect Implementation of Authentication Algorithm","description":"The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.","extended_description":"This incorrect implementation may allow authentication to be bypassed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":304,"name":"Missing Critical Step in Authentication","description":"The product implements an authentication technique, but it skips a step that weakens the technique.","extended_description":"Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":305,"name":"Authentication Bypass by Primary Weakness","description":"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":306,"name":"Missing Authentication for Critical Function","description":"The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability. Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected, including those channels that are assumed to be accessible only by authorized parties. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port. In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, avoid implementing custom, \"grow-your-own\" authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These capabilities may avoid common weaknesses that are unique to authentication; support automatic auditing and tracking; and make it easier to provide a clear separation between authentication tasks and authorization tasks. In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].","effectiveness":"","effectiveness_notes":""},{"description":"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.","effectiveness":"limited"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":307,"name":"Improper Restriction of Excessive Authentication Attempts","description":"The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer Cost effective for partial coverage: Forced Path Execution","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":308,"name":"Use of Single-factor Authentication","description":"The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.","extended_description":"While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":309,"name":"Use of Password System for Primary Authentication","description":"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.","extended_description":"","likelihood_of_exploit":"high","background_details":["Password systems are the simplest and most ubiquitous authentication mechanisms. However, they are subject to such well known attacks,and such frequent compromise that their use in the most simple implementation is not practical."],"potential_mitigations":[{"description":"In order to protect password systems from compromise, the following should be noted: Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value. Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long. Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.","effectiveness":"","effectiveness_notes":""},{"description":"Use a zero-knowledge password protocol, such as SRP.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that passwords are stored safely and are not reversible.","effectiveness":"","effectiveness_notes":""},{"description":"Implement password aging functionality that requires passwords be changed after a certain point.","effectiveness":"","effectiveness_notes":""},{"description":"Use a mechanism for determining the strength of a password and notify the user of weak password use.","effectiveness":"","effectiveness_notes":""},{"description":"Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":31,"name":"Path Traversal: 'dir\\..\\..\\filename'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\\..\\..\\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'dir\\..\\..\\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one \"..\\\" sequence, so multiple \"..\\\" can bypass that check. Alternately, this manipulation could be used to bypass a check for \"..\\\" at the beginning of the pathname, moving up more than one directory level.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":311,"name":"Missing Encryption of Sensitive Data","description":"The product does not encrypt sensitive or critical information before storage or transmission.","extended_description":"The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that encryption is properly integrated into the system design, including but not necessarily limited to: Encryption that is needed to store or transmit private data of the users of the system Encryption that is needed to protect the system itself from unauthorized disclosure or tampering Identify the separate needs and contexts for encryption: One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the product) does not need to have access to a private key. Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others. Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]","effectiveness":"","effectiveness_notes":""},{"description":"When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. For example, US government systems require FIPS 140-2 certification. Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]","effectiveness":"","effectiveness_notes":""},{"description":"Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","effectiveness":"","effectiveness_notes":""},{"description":"When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.","effectiveness":"","effectiveness_notes":""},{"description":"Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.","effectiveness":"defense in depth","effectiveness_notes":"This makes it easier to spot places in the code where data is being used that is unencrypted."}],"detection_methods":[{"method":"Manual Analysis","description":"The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.","effectiveness":"high"},{"method":"Automated Analysis","description":"Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.","effectiveness":""},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":312,"name":"Cleartext Storage of Sensitive Information","description":"The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.","extended_description":"Because the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. When organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet. In some systems/environments such as cloud, the use of \"double encryption\" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":313,"name":"Cleartext Storage in a File or on Disk","description":"The product stores sensitive information in cleartext in a file, or on disk.","extended_description":"The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":314,"name":"Cleartext Storage in the Registry","description":"The product stores sensitive information in cleartext in the registry.","extended_description":"Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":315,"name":"Cleartext Storage of Sensitive Information in a Cookie","description":"The product stores sensitive information in cleartext in a cookie.","extended_description":"Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":316,"name":"Cleartext Storage of Sensitive Information in Memory","description":"The product stores sensitive information in cleartext in memory.","extended_description":"The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the product crashes, or if the programmer does not properly clear the memory before freeing it. It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":317,"name":"Cleartext Storage of Sensitive Information in GUI","description":"The product stores sensitive information in cleartext within the GUI.","extended_description":"An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":318,"name":"Cleartext Storage of Sensitive Information in Executable","description":"The product stores sensitive information in cleartext in an executable.","extended_description":"Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":319,"name":"Cleartext Transmission of Sensitive Information","description":"The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.","extended_description":"Many communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data. Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries. When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.","effectiveness":"","effectiveness_notes":""},{"description":"When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.","effectiveness":"","effectiveness_notes":""},{"description":"When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.","effectiveness":"","effectiveness_notes":""},{"description":"Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.","effectiveness":"","effectiveness_notes":""},{"description":"Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":32,"name":"Path Traversal: '...' (Triple Dot)","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":321,"name":"Use of Hard-coded Cryptographic Key","description":"The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Prevention schemes mirror that of hard-coded password storage.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":322,"name":"Key Exchange without Entity Authentication","description":"The product performs a key exchange with an actor without verifying the identity of that actor.","extended_description":"Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities.  Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Ensure that proper authentication is included in the system design.","effectiveness":"","effectiveness_notes":""},{"description":"Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":323,"name":"Reusing a Nonce, Key Pair in Encryption","description":"Nonces should be used for the present occasion and only once.","extended_description":"","likelihood_of_exploit":"high","background_details":["Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange."],"potential_mitigations":[{"description":"Refuse to reuse nonce values.","effectiveness":"","effectiveness_notes":""},{"description":"Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":324,"name":"Use of a Key Past its Expiration Date","description":"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.","extended_description":"While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":325,"name":"Missing Cryptographic Step","description":"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":326,"name":"Inadequate Encryption Strength","description":"The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.","extended_description":"A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an encryption scheme that is currently considered to be strong by experts in the field.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":327,"name":"Use of a Broken or Risky Cryptographic Algorithm","description":"The product uses a broken or risky cryptographic algorithm or protocol.","extended_description":"Cryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts. It is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected. Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought. For a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. For example, US government systems require FIPS 140-2 certification [REF-1192]. Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.","effectiveness":"","effectiveness_notes":""},{"description":"When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Analysis","description":"Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":328,"name":"Use of Weak Hash","description":"The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).","extended_description":"A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold: The algorithm is not invertible (also called \"one-way\" or \"not reversible\") The algorithm is deterministic; the same input produces the same digest every time Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following: the original input (preimage attack), given only the digest another input that can produce the same digest (2nd preimage attack), given the original input a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times What is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world. Any algorithm that does not meet the above conditions will generally be considered weak for general use in hashing. In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":329,"name":"Generation of Predictable IV with CBC Mode","description":"The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.","extended_description":"CBC mode eliminates a weakness of Electronic Code\n\t   Book (ECB) mode by allowing identical plaintext blocks to\n\t   be encrypted to different ciphertext blocks. This is\n\t   possible by the XOR-ing of an IV with the initial plaintext\n\t   block so that every plaintext block in the chain is XOR'd\n\t   with a different value before encryption. If IVs are\n\t   reused, then identical plaintexts would be encrypted to\n\t   identical ciphertexts. However, even if IVs are not\n\t   identical but are predictable, then they still break the\n\t   security of CBC mode against Chosen Plaintext Attacks\n\t   (CPA).","likelihood_of_exploit":"medium","background_details":["CBC mode is a commonly used mode of operation for a\n\t      block cipher. It works by XOR-ing an IV with the initial\n\t      block of a plaintext prior to encryption and then\n\t      XOR-ing each successive block of plaintext with the\n\t      previous block of ciphertext before encryption. C_0 = IV C_i = E_k{M_i XOR C_{i-1}} When used properly, CBC mode provides security against\n\t\tchosen plaintext attacks. Having an unpredictable IV\n\t\tis a crucial underpinning of this. See [REF-1171]."],"potential_mitigations":[{"description":"NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":33,"name":"Path Traversal: '....' (Multiple Dot)","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":330,"name":"Use of Insufficiently Random Values","description":"The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.","extended_description":"When product generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.","likelihood_of_exploit":"high","background_details":["Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value."],"potential_mitigations":[{"description":"Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds. In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.","effectiveness":"","effectiveness_notes":""},{"description":"Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.","effectiveness":"","effectiveness_notes":""},{"description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").","effectiveness":"","effectiveness_notes":""},{"description":"Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions that indicate when randomness is being used. Run the process multiple times to see if the seed changes. Look for accesses of devices or equivalent resources that are commonly used for strong (or weak) randomness, such as /dev/urandom on Linux. Look for library or system calls that access predictable information such as process IDs and system time.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Man-in-the-middle attack tool","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":331,"name":"Insufficient Entropy","description":"The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":332,"name":"Insufficient Entropy in PRNG","description":"The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").","effectiveness":"","effectiveness_notes":""},{"description":"Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.","effectiveness":"","effectiveness_notes":""},{"description":"When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":333,"name":"Improper Handling of Insufficient Entropy in TRNG","description":"True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.","extended_description":"The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":334,"name":"Small Space of Random Values","description":"The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":335,"name":"Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)","description":"The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.","extended_description":"PRNGs are deterministic and, while their output appears\n\t\t   random, they cannot actually create entropy. They rely on\n\t\t   cryptographically secure and unique seeds for entropy so\n\t\t   proper seeding is critical to the secure operation of the\n\t\t   PRNG. Management of seeds could be broken down into two main areas: (1) protecting seeds as cryptographic material (such as a cryptographic key); (2) whenever possible, using a uniquely generated seed from\n\t\t   a cryptographically secure source PRNGs require a seed as input to generate a stream of\n\t\t\t   numbers that are functionally indistinguishable from\n\t\t\t   random numbers.  While the output is, in many cases,\n\t\t\t   sufficient for cryptographic uses, the output of any\n\t\t\t   PRNG is directly determined by the seed provided as\n\t\t\t   input. If the seed can be ascertained by a third party,\n\t\t\t   the entire output of the PRNG can be made known to\n\t\t\t   them. As such, the seed should be kept secret and\n\t\t\t   should ideally not be able to be guessed. For example,\n\t\t\t   the current time may be a poor seed. Knowing the\n\t\t\t   approximate time the PRNG was seeded greatly reduces\n\t\t\t   the possible key space. Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":336,"name":"Same Seed in Pseudo-Random Number Generator (PRNG)","description":"A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.","extended_description":"Given the deterministic nature of PRNGs, using the same seed for each initialization will lead to the same output in the same order. If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":337,"name":"Predictable Seed in Pseudo-Random Number Generator (PRNG)","description":"A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.","extended_description":"The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use non-predictable inputs for seed generation.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.","effectiveness":"","effectiveness_notes":""},{"description":"Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":338,"name":"Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","description":"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.","extended_description":"When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":339,"name":"Small Seed Space in PRNG","description":"A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.","extended_description":"PRNGs are entirely deterministic once seeded, so it should be extremely difficult to guess the seed. If an attacker can collect the outputs of a PRNG and then brute force the seed by trying every possibility to see which seed matches the observed output, then the attacker will know the output of any subsequent calls to the PRNG. A small seed space implies that the attacker will have far fewer possible values to try to exhaust all possibilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":34,"name":"Path Traversal: '....//'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....//' manipulation is useful for bypassing some path traversal protection schemes. If \"../\" is filtered in a sequential fashion, as done by some regular expression engines, then \"....//\" can collapse into the \"../\" unsafe value (CWE-182). It could also be useful when \"..\" is removed, if the operating system treats \"//\" and \"/\" as equivalent.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction","effectiveness":"high"}]},{"cwe_id":340,"name":"Generation of Predictable Numbers or Identifiers","description":"The product uses a scheme that generates numbers or identifiers that are more predictable than required.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":341,"name":"Predictable from Observable State","description":"A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Increase the entropy used to seed a PRNG.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").","effectiveness":"","effectiveness_notes":""},{"description":"Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":342,"name":"Predictable Exact Value from Previous Values","description":"An exact value or random number can be precisely predicted by observing previous values.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Increase the entropy used to seed a PRNG.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").","effectiveness":"","effectiveness_notes":""},{"description":"Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":343,"name":"Predictable Value Range from Previous Values","description":"The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.","extended_description":"The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Increase the entropy used to seed a PRNG.","effectiveness":"","effectiveness_notes":""},{"description":"Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").","effectiveness":"","effectiveness_notes":""},{"description":"Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":344,"name":"Use of Invariant Value in Dynamically Changing Context","description":"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":345,"name":"Insufficient Verification of Data Authenticity","description":"The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":346,"name":"Origin Validation Error","description":"The product does not properly verify that the source of data or communication is valid.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":347,"name":"Improper Verification of Cryptographic Signature","description":"The product does not verify, or incorrectly verifies, the cryptographic signature for data.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":348,"name":"Use of Less Trusted Source","description":"The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":349,"name":"Acceptance of Extraneous Untrusted Data With Trusted Data","description":"The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":35,"name":"Path Traversal: '.../...//'","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If \"../\" is filtered in a sequential fashion, as done by some regular expression engines, then \".../...//\" can collapse into the \"../\" unsafe value (CWE-182). Removing the first \"../\" yields \"....//\"; the second removal yields \"../\". Depending on the algorithm, the product could be susceptible to CWE-34 but not CWE-35, or vice versa.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":350,"name":"Reliance on Reverse DNS Resolution for a Security-Critical Action","description":"The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.","extended_description":"Since DNS names can be easily spoofed or misreported, and it may be difficult for the product to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism. When the product performs a reverse DNS resolution for an IP address, if an attacker controls the DNS server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks. Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.","effectiveness":"","effectiveness_notes":""},{"description":"Perform proper forward and reverse DNS lookups to detect DNS spoofing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":351,"name":"Insufficient Type Distinction","description":"The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":352,"name":"Cross-Site Request Forgery (CSRF)","description":"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.","extended_description":"When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.","effectiveness":"","effectiveness_notes":""},{"description":"Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]","effectiveness":"","effectiveness_notes":"Note that this can be bypassed using XSS (CWE-79)."},{"description":"Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.","effectiveness":"","effectiveness_notes":"Note that this can be bypassed using XSS (CWE-79)."},{"description":"Use the \"double-submitted cookie\" method as described by Felten and Zeller: When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same. Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult. This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]","effectiveness":"","effectiveness_notes":"Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests."},{"description":"Do not use the GET method for any request that triggers a state change.","effectiveness":"","effectiveness_notes":""},{"description":"Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.","effectiveness":"","effectiveness_notes":"Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed."}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention. Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.","effectiveness":"limited"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction","effectiveness":"soar partial"}]},{"cwe_id":353,"name":"Missing Support for Integrity Check","description":"The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.","extended_description":"If integrity check values or \"checksums\" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":354,"name":"Improper Validation of Integrity Check Value","description":"The product does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.","extended_description":"Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":356,"name":"Product UI does not Warn User of Unsafe Actions","description":"The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.","extended_description":"Product systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":357,"name":"Insufficient UI Warning of Dangerous Operations","description":"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":358,"name":"Improperly Implemented Security Check for Standard","description":"The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":359,"name":"Exposure of Private Personal Information to an Unauthorized Actor","description":"The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Identify and consult all relevant regulations for personal privacy.  An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles.  Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.","effectiveness":"","effectiveness_notes":""},{"description":"Carefully evaluate how secure design may interfere with privacy, and vice versa.  Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"Private personal data can enter a program in a variety of ways: Directly from the user in the form of a password or personal information Accessed from a database or other data store by the application Indirectly from a partner or other third party If the data is written to an external location - such as the console, file system, or network - a privacy violation may occur.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":36,"name":"Absolute Path Traversal","description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.","extended_description":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":360,"name":"Trust of System Event Data","description":"Security based on event locations are insecure and can be spoofed.","extended_description":"Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Never trust or rely any of the information in an Event for security.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":362,"name":"Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","description":"The product contains a concurrent code sequence that requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence operating concurrently.","extended_description":"A race condition occurs within concurrent environments, and it is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc. A race condition violates these properties, which are closely related: Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution. Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource. A race condition exists when an \"interfering code sequence\" can still access the shared resource, violating exclusivity. The interfering code sequence could be \"trusted\" or \"untrusted.\" A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.","effectiveness":"","effectiveness_notes":""},{"description":"Use thread-safe capabilities such as the data access abstraction in Spring.","effectiveness":"","effectiveness_notes":""},{"description":"Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring. Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).","effectiveness":"","effectiveness_notes":""},{"description":"When using multithreading and operating on shared variables, only use thread-safe functions.","effectiveness":"","effectiveness_notes":""},{"description":"Use atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.","effectiveness":"","effectiveness_notes":""},{"description":"Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.","effectiveness":"","effectiveness_notes":""},{"description":"Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.","effectiveness":"","effectiveness_notes":""},{"description":"Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.","effectiveness":""},{"method":"White Box","description":"Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).","effectiveness":""},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.","effectiveness":"moderate"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Framework-based Fuzzer Cost effective for partial coverage: Fuzz Tester Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":363,"name":"Race Condition Enabling Link Following","description":"The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.","extended_description":"While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":364,"name":"Signal Handler Race Condition","description":"The product uses a signal handler that introduces a race condition.","extended_description":"Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the \"regular\" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of \"signal handler race condition\": Shared state (e.g. global data or static variables) that are accessible to both a signal handler and \"regular\" code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.","effectiveness":"","effectiveness_notes":""},{"description":"Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.","effectiveness":"","effectiveness_notes":""},{"description":"Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":365,"name":"DEPRECATED: Race Condition in Switch","description":"This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.","extended_description":"It is likely that this entry was initially created based on a misinterpretation of the original source material. The original source intended to explain how switches could be unpredictable when using threads, if the control expressions used data or variables that could change between execution of different threads. That weakness is already covered by CWE-367. Despite the ambiguity in the documentation for some languages and compilers, in practice, they all evaluate the switch control expression only once. If future languages state that the code explicitly evaluates the control expression more than once, then this would not be a weakness, but the language performing as designed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":366,"name":"Race Condition within a Thread","description":"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.","effectiveness":"","effectiveness_notes":""},{"description":"Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":367,"name":"Time-of-check Time-of-use (TOCTOU) Race Condition","description":"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.","extended_description":"This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.","effectiveness":"","effectiveness_notes":""},{"description":"When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.","effectiveness":"","effectiveness_notes":""},{"description":"Limit the interleaving of operations on files from multiple processes.","effectiveness":"","effectiveness_notes":""},{"description":"If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.","effectiveness":"","effectiveness_notes":""},{"description":"Recheck the resource after the use call to verify that the action was taken appropriately.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that some environmental locking mechanism can be used to protect resources effectively.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":368,"name":"Context Switching Race Condition","description":"A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.","extended_description":"This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":369,"name":"Divide By Zero","description":"The product divides a value by zero.","extended_description":"This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"},{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":37,"name":"Path Traversal: '/absolute/pathname/here'","description":"The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":370,"name":"Missing Check for Certificate Revocation after Initial Check","description":"The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.","extended_description":"If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":372,"name":"Incomplete Internal State Distinction","description":"The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":373,"name":"DEPRECATED: State Synchronization Error","description":"This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":374,"name":"Passing Mutable Objects to an Untrusted Method","description":"The product sends non-cloned mutable data as an argument to a method or function.","extended_description":"The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Pass in data which should not be altered as constant or immutable.","effectiveness":"","effectiveness_notes":""},{"description":"Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":375,"name":"Returning a Mutable Object to an Untrusted Caller","description":"Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.","extended_description":"In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Declare returned data which should not be altered as constant or immutable.","effectiveness":"","effectiveness_notes":""},{"description":"Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":377,"name":"Insecure Temporary File","description":"Creating and using insecure temporary files can leave application and system data vulnerable to attack.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":378,"name":"Creation of Temporary File With Insecure Permissions","description":"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.","effectiveness":"","effectiveness_notes":""},{"description":"Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":379,"name":"Creation of Temporary File in Directory with Insecure Permissions","description":"The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.","extended_description":"On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.","effectiveness":"","effectiveness_notes":""},{"description":"Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid using vulnerable temp file functions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":38,"name":"Path Traversal: '\\absolute\\pathname\\here'","description":"The product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":382,"name":"J2EE Bad Practices: Use of System.exit()","description":"A J2EE application uses System.exit(), which also shuts down its container.","extended_description":"It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The shutdown function should be a privileged function available only to a properly authorized administrative user","effectiveness":"","effectiveness_notes":""},{"description":"Web applications should not call methods that cause the virtual machine to exit, such as System.exit()","effectiveness":"","effectiveness_notes":""},{"description":"Web applications should also not throw any Throwables to the application server as this may adversely affect the container.","effectiveness":"","effectiveness_notes":""},{"description":"Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":383,"name":"J2EE Bad Practices: Direct Use of Threads","description":"Thread management in a Web application is forbidden in some circumstances and is always highly error prone.","extended_description":"Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For EJB, use framework approaches for parallel execution, instead of using threads.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":384,"name":"Session Fixation","description":"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.","extended_description":"Such a scenario is commonly observed when: A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Invalidate any existing session identifiers prior to authorizing a new user session.","effectiveness":"","effectiveness_notes":""},{"description":"For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":385,"name":"Covert Timing Channel","description":"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.","extended_description":"In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state. Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Whenever possible, specify implementation strategies that do not introduce time variances in operations.","effectiveness":"","effectiveness_notes":""},{"description":"Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.","effectiveness":"","effectiveness_notes":""},{"description":"It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":386,"name":"Symbolic Name not Mapping to Correct Object","description":"A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":39,"name":"Path Traversal: 'C:dirname'","description":"The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":390,"name":"Detection of Error Condition Without Action","description":"The product detects a specific error, but takes no actions to handle the error.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.","effectiveness":"","effectiveness_notes":""},{"description":"If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.","effectiveness":"","effectiveness_notes":""},{"description":"Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":391,"name":"Unchecked Error Condition","description":"[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.","effectiveness":"","effectiveness_notes":""},{"description":"A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.","effectiveness":"","effectiveness_notes":""},{"description":"Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":392,"name":"Missing Report of Error Condition","description":"The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":393,"name":"Return of Wrong Status Code","description":"A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.","extended_description":"This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the product to assume that an action is safe, even when it is not.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":394,"name":"Unexpected Status Code or Return Value","description":"The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":395,"name":"Use of NullPointerException Catch to Detect NULL Pointer Dereference","description":"Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.","extended_description":"Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":396,"name":"Declaration of Catch for Generic Exception","description":"Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.","extended_description":"Multiple catch blocks can get ugly and repetitive, but \"condensing\" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":397,"name":"Declaration of Throws for Generic Exception","description":"Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.","extended_description":"Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":40,"name":"Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)","description":"The product accepts input that identifies a Windows UNC share ('\\\\UNC\\share\\name') that potentially redirects access to an unintended location or arbitrary file.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":400,"name":"Uncontrolled Resource Consumption","description":"The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.","extended_description":"Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system. There are at least three distinct scenarios which can commonly lead to resource exhaustion: Lack of throttling for the number of allocated resources Losing all references to a resource before reaching the shutdown stage Not closing/returning a resource after processing Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.","effectiveness":"","effectiveness_notes":""},{"description":"Mitigation of resource exhaustion attacks requires that the target system either: recognizes the attack and denies that user further access for a given amount of time, or uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed. The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question. The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that protocols have specific limits of scale placed on them.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that all failures in resource allocation place the system into a safe posture.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.","effectiveness":"limited"},{"method":"Automated Dynamic Analysis","description":"Certain automated dynamic analysis techniques may be effective in spotting resource exhaustion problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame.","effectiveness":"moderate"},{"method":"Fuzzing","description":"While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.","effectiveness":"opportunistic"}]},{"cwe_id":401,"name":"Missing Release of Memory after Effective Lifetime","description":"The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.","extended_description":"This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions.  In some languages, developers are responsible for tracking memory allocation and releasing the memory.  If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone. For example, glibc in Linux provides protection against free of invalid pointers. When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391]. To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.","effectiveness":"","effectiveness_notes":""},{"description":"Use an abstraction library to abstract away risky APIs. Not a complete solution.","effectiveness":"","effectiveness_notes":""},{"description":"The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.","effectiveness":"","effectiveness_notes":"This is not a complete solution as it is not 100% effective."}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":402,"name":"Transmission of Private Resources into a New Sphere ('Resource Leak')","description":"The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":403,"name":"Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')","description":"A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.","extended_description":"When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":404,"name":"Improper Resource Shutdown or Release","description":"The product does not release or incorrectly releases a resource before it is made available for re-use.","extended_description":"When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.","effectiveness":"","effectiveness_notes":""},{"description":"It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.","effectiveness":"","effectiveness_notes":""},{"description":"Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].","effectiveness":"","effectiveness_notes":""},{"description":"When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Resource clean up errors might be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Dynamic Analysis","description":"Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the product under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":405,"name":"Asymmetric Resource Consumption (Amplification)","description":"The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is \"asymmetric.\"","extended_description":"This can lead to poor performance due to \"amplification\" of resource consumption, typically in a non-linear fashion.  This situation is worsened if the product allows malicious users or attackers to consume more resources than their access level permits.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"An application must make resources available to a client commensurate with the client's access level.","effectiveness":"","effectiveness_notes":""},{"description":"An application must, at all times, keep track of allocated resources and meter their usage appropriately.","effectiveness":"","effectiveness_notes":""},{"description":"Consider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange.","effectiveness":"high","effectiveness_notes":"Business requirements may prevent disabling resource-intensive algorithms."}],"detection_methods":[]},{"cwe_id":406,"name":"Insufficient Control of Network Message Volume (Network Amplification)","description":"The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.","extended_description":"In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"An application must make network resources available to a client commensurate with the client's access level.","effectiveness":"","effectiveness_notes":""},{"description":"Define a clear policy for network resource allocation and consumption.","effectiveness":"","effectiveness_notes":""},{"description":"An application must, at all times, keep track of network resources and meter their usage appropriately.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":407,"name":"Inefficient Algorithmic Complexity","description":"An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.","extended_description":"","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":408,"name":"Incorrect Behavior Order: Early Amplification","description":"The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":409,"name":"Improper Handling of Highly Compressed Data (Data Amplification)","description":"The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.","extended_description":"An example of data amplification is a \"decompression bomb,\" a small ZIP file that can produce a large amount of data when it is decompressed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":41,"name":"Improper Resolution of Path Equivalence","description":"The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.","extended_description":"Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":410,"name":"Insufficient Resource Pool","description":"The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.","extended_description":"Frequently the consequence is a \"flood\" of connection or sessions.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.","effectiveness":"","effectiveness_notes":""},{"description":"Consider implementing a velocity check mechanism which would detect abusive behavior.","effectiveness":"","effectiveness_notes":""},{"description":"Consider load balancing as an option to handle heavy loads.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure that resource handles are properly closed when no longer needed.","effectiveness":"","effectiveness_notes":""},{"description":"Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":412,"name":"Unrestricted Externally Accessible Lock","description":"The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.","extended_description":"This prevents the product from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use any access control that is offered by the functionality that is offering the lock.","effectiveness":"","effectiveness_notes":""},{"description":"Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.","effectiveness":"","effectiveness_notes":""},{"description":"Consider modifying your code to use non-blocking synchronization methods.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"White Box","description":"Automated code analysis techniques might not be able to reliably detect this weakness, since the application's behavior and general security model dictate which resource locks are critical. Interpretation of the weakness might require knowledge of the environment, e.g. if the existence of a file is used as a lock, but the file is created in a world-writable directory.","effectiveness":""}]},{"cwe_id":413,"name":"Improper Resource Locking","description":"The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.","extended_description":"When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use a non-conflicting privilege scheme.","effectiveness":"","effectiveness_notes":""},{"description":"Use synchronization when locking a resource.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":414,"name":"Missing Lock Check","description":"A product does not check to see if a lock is present before performing sensitive operations on a resource.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement a reliable lock mechanism.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":415,"name":"Double Free","description":"The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.","extended_description":"When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Choose a language that provides automatic memory management.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.","effectiveness":"","effectiveness_notes":""},{"description":"Use a static analysis tool to find double free instances.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":416,"name":"Use After Free","description":"The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Choose a language that provides automatic memory management.","effectiveness":"","effectiveness_notes":""},{"description":"When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.","effectiveness":"defense in depth","effectiveness_notes":"If a bug causes an attempted access of this pointer, then a NULL dereference could still lead to a crash or other unexpected behavior, but it will reduce or eliminate the risk of code execution."}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":419,"name":"Unprotected Primary Channel","description":"The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not expose administrative functionnality on the user UI.","effectiveness":"","effectiveness_notes":""},{"description":"Protect the administrative/restricted functionality with a strong authentication mechanism.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":42,"name":"Path Equivalence: 'filename.' (Trailing Dot)","description":"The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":420,"name":"Unprotected Alternate Channel","description":"The product protects a primary channel, but it does not use the same level of protection for an alternate channel.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":421,"name":"Race Condition During Access to Alternate Channel","description":"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.","extended_description":"This creates a race condition that allows an attacker to access the channel before the authorized user does.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":422,"name":"Unprotected Windows Messaging Channel ('Shatter')","description":"The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always verify and authenticate the source of the message.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":423,"name":"DEPRECATED: Proxied Trusted Channel","description":"This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":424,"name":"Improper Protection of Alternate Path","description":"The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Deploy different layers of protection to implement security in depth.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":425,"name":"Direct Request ('Forced Browsing')","description":"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.","extended_description":"Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.","effectiveness":"","effectiveness_notes":""},{"description":"Consider using MVC based frameworks such as Struts.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":426,"name":"Untrusted Search Path","description":"The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.","extended_description":"This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the product uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted product would then execute. The problem extends to any type of critical resource that the product trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.","effectiveness":"","effectiveness_notes":""},{"description":"When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.","effectiveness":"","effectiveness_notes":""},{"description":"Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.","effectiveness":"","effectiveness_notes":""},{"description":"Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.","effectiveness":"","effectiveness_notes":""},{"description":"Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"},{"method":"Manual Analysis","description":"Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.","effectiveness":""}]},{"cwe_id":427,"name":"Uncontrolled Search Path Element","description":"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.","extended_description":"Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. One or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory.  In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.","effectiveness":"","effectiveness_notes":""},{"description":"When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.","effectiveness":"","effectiveness_notes":""},{"description":"Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.","effectiveness":"","effectiveness_notes":""},{"description":"Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.","effectiveness":"","effectiveness_notes":""},{"description":"Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":428,"name":"Unquoted Search Path or Element","description":"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.","extended_description":"If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as \"C:\\Program.exe\" to be run by a privileged program making use of WinExec.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Properly quote the full search path before executing a program on the system.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":43,"name":"Path Equivalence: 'filename....' (Multiple Trailing Dot)","description":"The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":430,"name":"Deployment of Wrong Handler","description":"The wrong \"handler\" is assigned to process an object.","extended_description":"An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically \"determining\" type of the object even if it is contradictory to an explicitly specified type.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Perform a type check before interpreting an object.","effectiveness":"","effectiveness_notes":""},{"description":"Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":431,"name":"Missing Handler","description":"A handler is not available or implemented.","extended_description":"When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Handle all possible situations (e.g. error condition).","effectiveness":"","effectiveness_notes":""},{"description":"If an operation can throw an Exception, implement a handler for that specific exception.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":432,"name":"Dangerous Signal Handler not Disabled During Sensitive Operations","description":"The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.","extended_description":"During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Turn off dangerous handlers when performing sensitive operations.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":433,"name":"Unparsed Raw Web Content Delivery","description":"The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.","extended_description":"If code is stored in a file with an extension such as \".inc\" or \".pl\", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Perform a type check before interpreting files.","effectiveness":"","effectiveness_notes":""},{"description":"Do not store sensitive information in files which may be misinterpreted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":434,"name":"Unrestricted Upload of File with Dangerous Type","description":"The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.","effectiveness":"","effectiveness_notes":""},{"description":"Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.","effectiveness":"","effectiveness_notes":""},{"description":"Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter.[REF-422] [REF-423]","effectiveness":"","effectiveness_notes":""},{"description":"When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.","effectiveness":"","effectiveness_notes":""},{"description":"Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"detection_methods":[{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":435,"name":"Improper Interaction Between Multiple Correctly-Behaving Entities","description":"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.","extended_description":"When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level.  However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":436,"name":"Interpretation Conflict","description":"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.","extended_description":"This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":437,"name":"Incomplete Model of Endpoint Features","description":"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":439,"name":"Behavioral Change in New Version or Environment","description":"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":44,"name":"Path Equivalence: 'file.name' (Internal Dot)","description":"The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":440,"name":"Expected Behavior Violation","description":"A feature, API, or function does not perform according to its specification.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":441,"name":"Unintended Proxy or Intermediary ('Confused Deputy')","description":"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.","extended_description":"If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Enforce the use of strong mutual authentication mechanism between the two parties.","effectiveness":"","effectiveness_notes":""},{"description":"Whenever a product is an intermediary or proxy for\n                   transactions between two other components, the proxy core\n                   should not drop the identity of the initiator of the\n                   transaction. The immutability of the identity of the\n                   initiator must be maintained and should be forwarded all the\n                   way to the target.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":443,"name":"DEPRECATED: HTTP response splitting","description":"This weakness can be found at CWE-113.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":444,"name":"Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')","description":"The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.","extended_description":"HTTP requests or responses (\"messages\") can be\n\t   malformed or unexpected in ways that cause web servers or\n\t   clients to interpret the messages in different ways than\n\t   intermediary HTTP agents such as load balancers, reverse\n\t   proxies, web caching proxies, application firewalls,\n\t   etc. For example, an adversary may be able to add duplicate\n\t   or different header fields that a client or server might\n\t   interpret as one set of messages, whereas the intermediary\n\t   might interpret the same sequence of bytes as a different\n\t   set of messages. For example, discrepancies can arise in\n\t   how to handle duplicate headers like two Transfer-encoding\n\t   (TE) or two Content-length (CL), or the malicious HTTP\n\t   message will have different headers for TE and\n\t   CL. The inconsistent parsing and interpretation of messages\n\t   can allow the adversary to \"smuggle\" a message to the\n\t   client/server without the intermediary being aware of it. This weakness is usually the result of the usage\n\t   of outdated or incompatible HTTP protocol versions in the\n\t   HTTP agents.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].","effectiveness":"","effectiveness_notes":""},{"description":"Use only SSL communication.","effectiveness":"","effectiveness_notes":""},{"description":"Terminate the client session after each request.","effectiveness":"","effectiveness_notes":""},{"description":"Turn all pages to non-cacheable.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":446,"name":"UI Discrepancy for Security Feature","description":"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.","extended_description":"When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the product does not actually enable the encryption. Alternately, the user might provide a \"restrict ALL\" access control rule, but the product only implements \"restrict SOME\".","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":447,"name":"Unimplemented or Unsupported Feature in UI","description":"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Perform functionality testing before deploying the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":448,"name":"Obsolete Feature in UI","description":"A UI function is obsolete and the product does not warn the user.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":449,"name":"The UI Performs the Wrong Action","description":"The UI performs the wrong action with respect to the user's request.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Perform extensive functionality testing of the UI. The UI should behave as specified.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":45,"name":"Path Equivalence: 'file...name' (Multiple Internal Dot)","description":"The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":450,"name":"Multiple Interpretations of UI Input","description":"The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":451,"name":"User Interface (UI) Misrepresentation of Critical Information","description":"The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.","extended_description":"If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event. UI misrepresentation can take many forms: Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes. Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay. Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF) Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error. Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. \"filename.txt .exe\"). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string. Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display. Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Perform data validation (e.g. syntax, length, etc.) before interpreting the data.","effectiveness":"","effectiveness_notes":""},{"description":"Create a strategy for presenting information, and plan for how to display unusual characters.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":453,"name":"Insecure Default Variable Initialization","description":"The product, by default, initializes an internal variable with an insecure or less secure value than is possible.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":454,"name":"External Initialization of Trusted Variables or Data Stores","description":"The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.","extended_description":"A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":455,"name":"Non-exit on Failed Initialization","description":"The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":456,"name":"Missing Initialization of a Variable","description":"The product does not initialize critical variables, which causes the execution environment to use unexpected values.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Check that critical variables are initialized.","effectiveness":"","effectiveness_notes":""},{"description":"Use a static analysis tool to spot non-initialized variables.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":457,"name":"Use of Uninitialized Variable","description":"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.","extended_description":"In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Assign all variables to an initial value.","effectiveness":"","effectiveness_notes":""},{"description":"Most compilers will complain about the use of uninitialized variables if warnings are turned on.","effectiveness":"","effectiveness_notes":""},{"description":"When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.","effectiveness":"","effectiveness_notes":""},{"description":"The choice could be made to use a language that is not susceptible to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Mitigating technologies such as safe string libraries and container abstractions could be introduced.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":458,"name":"DEPRECATED: Incorrect Initialization","description":"This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":459,"name":"Incomplete Cleanup","description":"The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":46,"name":"Path Equivalence: 'filename ' (Trailing Space)","description":"The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":460,"name":"Improper Cleanup on Thrown Exception","description":"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.","extended_description":"Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":462,"name":"Duplicate Key in Associative List (Alist)","description":"Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.","extended_description":"A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Use a hash table instead of an alist.","effectiveness":"","effectiveness_notes":""},{"description":"Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":463,"name":"Deletion of Data Structure Sentinel","description":"The accidental deletion of a data-structure sentinel can cause serious programming logic problems.","extended_description":"Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an abstraction library to abstract away risky APIs. Not a complete solution.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Use OS-level preventative functionality. Not a complete solution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":464,"name":"Addition of Data Structure Sentinel","description":"The accidental addition of a data-structure sentinel can cause serious programming logic problems.","extended_description":"Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.","effectiveness":"","effectiveness_notes":""},{"description":"Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.","effectiveness":"","effectiveness_notes":""},{"description":"Use an abstraction library to abstract away risky APIs. This is not a complete solution.","effectiveness":"","effectiveness_notes":""},{"description":"Use OS-level preventative functionality. This is not a complete solution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":466,"name":"Return of Pointer Value Outside of Expected Range","description":"A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":467,"name":"Use of sizeof() on a Pointer Type","description":"The code calls sizeof() on a pointer type, which can be an incorrect calculation if the programmer intended to determine the size of the data that is being pointed to.","extended_description":"The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":468,"name":"Incorrect Pointer Scaling","description":"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a platform with high-level memory abstractions.","effectiveness":"","effectiveness_notes":""},{"description":"Always use array indexing instead of direct pointer manipulation.","effectiveness":"","effectiveness_notes":""},{"description":"Use technologies for preventing buffer overflows.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":469,"name":"Use of Pointer Subtraction to Determine Size","description":"The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":47,"name":"Path Equivalence: ' filename' (Leading Space)","description":"The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":470,"name":"Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')","description":"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.","extended_description":"If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Refactor your code to avoid using reflection.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use user-controlled inputs to select and load classes or code.","effectiveness":"","effectiveness_notes":""},{"description":"Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":471,"name":"Modification of Assumed-Immutable Data (MAID)","description":"The product does not properly protect an assumed-immutable element from being modified by an attacker.","extended_description":"This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":472,"name":"External Control of Assumed-Immutable Web Parameter","description":"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.","extended_description":"If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":473,"name":"PHP External Variable Modification","description":"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":474,"name":"Use of Function with Inconsistent Implementations","description":"The code uses a function that has inconsistent implementations across operating systems and versions.","extended_description":"The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include: Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":475,"name":"Undefined Behavior for Input to API","description":"The behavior of this function is undefined unless its control parameter is set to a specific value.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":476,"name":"NULL Pointer Dereference","description":"The product dereferences a pointer that it expects to be valid but is NULL.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"If all pointers that could have been modified are checked for NULL before use, nearly all NULL pointer dereferences can be prevented.","effectiveness":"","effectiveness_notes":""},{"description":"Select a programming language that is not susceptible to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Check the results of all functions that return a value and verify that the value is non-null before acting upon it.","effectiveness":"moderate","effectiveness_notes":"Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665)."},{"description":"Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.","effectiveness":"","effectiveness_notes":""},{"description":"Explicitly initialize all variables and other data stores, either during declaration or just before the first usage.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Dynamic Analysis","description":"Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":477,"name":"Use of Obsolete Function","description":"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.","extended_description":"As programming languages evolve, functions occasionally become obsolete due to: Advances in the language Improved understanding of how operations should be performed effectively and securely Changes in the conventions that govern certain operations Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.","effectiveness":"","effectiveness_notes":""},{"description":"Consider seriously the security implications of using an obsolete function. Consider using alternate functions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":478,"name":"Missing Default Case in Multiple Condition Expression","description":"The code does not have a default case in an expression with multiple conditions, such as a switch statement.","extended_description":"If a multiple-condition expression (such as a switch in C) omits the default case but does not consider or handle all possible values that could occur, then this might lead to complex logical errors and resultant weaknesses. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":479,"name":"Signal Handler Use of a Non-reentrant Function","description":"The product defines a signal handler that calls a non-reentrant function.","extended_description":"Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution. Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as \"scratch space.\" If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.","effectiveness":"","effectiveness_notes":""},{"description":"Design signal handlers to only set flags rather than perform complex functionality.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that non-reentrant functions are not found in signal handlers.","effectiveness":"","effectiveness_notes":""},{"description":"Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":48,"name":"Path Equivalence: 'file name' (Internal Whitespace)","description":"The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":480,"name":"Use of Incorrect Operator","description":"The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.","extended_description":"These types of errors are generally the result of a typo by the programmer.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.","effectiveness":""},{"method":"Manual Static Analysis","description":"This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.","effectiveness":""}]},{"cwe_id":481,"name":"Assigning instead of Comparing","description":"The code uses an operator for assignment when the intention was to perform a comparison.","extended_description":"In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Many IDEs and static analysis products will detect this problem.","effectiveness":"","effectiveness_notes":""},{"description":"Place constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":482,"name":"Comparing instead of Assigning","description":"The code uses an operator for comparison when the intention was to perform an assignment.","extended_description":"In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Many IDEs and static analysis products will detect this problem.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":483,"name":"Incorrect Block Delimitation","description":"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.","extended_description":"In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Always use explicit block delimitation and use static-analysis technologies to enforce this practice.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":484,"name":"Omitted Break Statement in Switch","description":"The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.","extended_description":"This can lead to critical code executing in situations where it should not.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.","effectiveness":"","effectiveness_notes":""},{"description":"The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"White Box","description":"Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected product behavior is required to interpret whether the code is correct.","effectiveness":""},{"method":"Black Box","description":"Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":486,"name":"Comparison of Classes by Name","description":"The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.","extended_description":"If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":487,"name":"Reliance on Package-level Scope","description":"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.","extended_description":"The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":488,"name":"Exposure of Data Element to Wrong Session","description":"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.","extended_description":"Data can \"bleed\" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool. In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.","effectiveness":"","effectiveness_notes":""},{"description":"Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).","effectiveness":"","effectiveness_notes":""},{"description":"In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":489,"name":"Active Debug Code","description":"The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.","extended_description":"A common development practice is to add \"back door\" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove debug code before deploying the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":49,"name":"Path Equivalence: 'filename/' (Trailing Slash)","description":"The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":491,"name":"Public cloneable() Method Without Final ('Object Hijack')","description":"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Make the cloneable() method final.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":492,"name":"Use of Inner Class Containing Sensitive Data","description":"Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.","extended_description":"Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.","effectiveness":"","effectiveness_notes":""},{"description":"Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":493,"name":"Critical Public Variable Without Final Modifier","description":"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.","extended_description":"If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.","likelihood_of_exploit":"high","background_details":["Mobile code, such as a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.","Final provides security by only allowing non-mutable objects to be changed after being set. However, only objects which are not extended can be made final."],"potential_mitigations":[{"description":"Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":494,"name":"Download of Code Without Integrity Check","description":"The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.","extended_description":"An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Perform proper forward and reverse DNS lookups to detect DNS spoofing.","effectiveness":"","effectiveness_notes":"This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit."},{"description":"Encrypt the code with a reliable encryption scheme before transmitting. This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code. When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses. Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.","effectiveness":""},{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":495,"name":"Private Data Structure Returned From A Public Method","description":"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Declare the method private.","effectiveness":"","effectiveness_notes":""},{"description":"Clone the member data and keep an unmodified version of the data private to the object.","effectiveness":"","effectiveness_notes":""},{"description":"Use public setter methods that govern how a private member can be modified.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":496,"name":"Public Data Assigned to Private Array-Typed Field","description":"Assigning public data to a private array is equivalent to giving public access to the array.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not allow objects to modify private members of a class.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":497,"name":"Exposure of Sensitive System Information to an Unauthorized Control Sphere","description":"The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.","extended_description":"Network-based products, such as web applications, often run on top of an operating system or similar environment.  When the product communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts.  An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":498,"name":"Cloneable Class Containing Sensitive Information","description":"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.","extended_description":"Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"If you do make your classes clonable, ensure that your clone method is final and throw super.clone().","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":499,"name":"Serializable Class Containing Sensitive Data","description":"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.","extended_description":"Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure to prevent serialization of your objects.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":5,"name":"J2EE Misconfiguration: Data Transmission Without Encryption","description":"Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":50,"name":"Path Equivalence: '//multiple/leading/slash'","description":"The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":500,"name":"Public Static Field Not Marked Final","description":"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.","extended_description":"Public static variables can be read without an accessor and changed without a mutator by any classes in the application.","likelihood_of_exploit":"high","background_details":["When a field is declared public but not final, the field can be read and written to by arbitrary Java code."],"potential_mitigations":[{"description":"Clearly identify the scope for all critical data elements, including whether they should be regarded as static.","effectiveness":"","effectiveness_notes":""},{"description":"Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":501,"name":"Trust Boundary Violation","description":"The product mixes trusted and untrusted data in the same data structure or structured message.","extended_description":"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":502,"name":"Deserialization of Untrusted Data","description":"The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid.","extended_description":"","likelihood_of_exploit":"medium","background_details":["Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (\"serialization\"), then extracting the serialized data to reconstruct the original object (\"deserialization\")."],"potential_mitigations":[{"description":"If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.","effectiveness":"","effectiveness_notes":""},{"description":"When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.","effectiveness":"","effectiveness_notes":""},{"description":"Explicitly define a final object() to prevent deserialization.","effectiveness":"","effectiveness_notes":""},{"description":"Make fields transient to protect them from deserialization. An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid having unnecessary types or gadgets (a sequence of instances and method invocations that can self-execute during the deserialization process, often found in libraries) available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.","effectiveness":"","effectiveness_notes":""},{"description":"Employ cryptography of the data or code for protection. However, it's important to note that it would still be client-side security. This is risky because if the client is compromised then the security implemented on the client (the cryptography) can be bypassed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":506,"name":"Embedded Malicious Code","description":"The product contains code that appears to be malicious in nature.","extended_description":"Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of a product or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Origin Analysis","effectiveness":"soar partial"}]},{"cwe_id":507,"name":"Trojan Horse","description":"The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Most antivirus software scans for Trojan Horses.","effectiveness":"","effectiveness_notes":""},{"description":"Verify the integrity of the product that is being installed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":508,"name":"Non-Replicating Malicious Code","description":"Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Antivirus software can help mitigate known malicious code.","effectiveness":"","effectiveness_notes":""},{"description":"Verify the integrity of the software that is being installed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":509,"name":"Replicating Malicious Code (Virus or Worm)","description":"Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Antivirus software scans for viruses or worms.","effectiveness":"","effectiveness_notes":""},{"description":"Always verify the integrity of the software that is being installed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":51,"name":"Path Equivalence: '/multiple//internal/slash'","description":"The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":510,"name":"Trapdoor","description":"A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always verify the integrity of the software that is being installed.","effectiveness":"","effectiveness_notes":""},{"description":"Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution Forced Path Execution Debugger Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction","effectiveness":"high"}]},{"cwe_id":511,"name":"Logic/Time Bomb","description":"The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.","extended_description":"When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always verify the integrity of the product that is being installed.","effectiveness":"","effectiveness_notes":""},{"description":"Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":512,"name":"Spyware","description":"The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.","extended_description":"\"Spyware\" is a commonly used term with many definitions and interpretations. In general, it is meant to refer to products that collect information or install functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use spyware detection and removal software.","effectiveness":"","effectiveness_notes":""},{"description":"Always verify the integrity of the product that is being installed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":514,"name":"Covert Channel","description":"A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.","extended_description":"Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"soar partial"}]},{"cwe_id":515,"name":"Covert Storage Channel","description":"A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.","extended_description":"Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":516,"name":"DEPRECATED: Covert Timing Channel","description":"This weakness can be found at CWE-385.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":52,"name":"Path Equivalence: '/multiple/trailing/slash//'","description":"The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":520,"name":".NET Misconfiguration: Use of Impersonation","description":"Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.","extended_description":".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Run the application with limited privilege to the underlying operating and file system.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":521,"name":"Weak Password Requirements","description":"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.","extended_description":"Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.","effectiveness":"","effectiveness_notes":""},{"description":"Consider a second\n                 authentication factor beyond the password, which prevents the\n                 password from being a single point of failure. See CWE-308 for\n                 further information.","effectiveness":"","effectiveness_notes":""},{"description":"Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":522,"name":"Insufficiently Protected Credentials","description":"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an appropriate security mechanism to protect the credentials.","effectiveness":"","effectiveness_notes":""},{"description":"Make appropriate use of cryptography to protect the credentials.","effectiveness":"","effectiveness_notes":""},{"description":"Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":523,"name":"Unprotected Transport of Credentials","description":"Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.","extended_description":"","likelihood_of_exploit":"","background_details":["SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents."],"potential_mitigations":[{"description":"Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":524,"name":"Use of Cache Containing Sensitive Information","description":"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.","extended_description":"Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations.  A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources.  If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect information stored in cache.","effectiveness":"","effectiveness_notes":""},{"description":"Do not store unnecessarily sensitive information in the cache.","effectiveness":"","effectiveness_notes":""},{"description":"Consider using encryption in the cache.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":525,"name":"Use of Web Browser Cache Containing Sensitive Information","description":"The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect information stored in cache.","effectiveness":"","effectiveness_notes":""},{"description":"Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.","effectiveness":"","effectiveness_notes":""},{"description":"Do not store unnecessarily sensitive information in the cache.","effectiveness":"","effectiveness_notes":""},{"description":"Consider using encryption in the cache.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":526,"name":"Cleartext Storage of Sensitive Information in an Environment Variable","description":"The product uses an environment variable to store unencrypted sensitive information.","extended_description":"Information stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.","effectiveness":"","effectiveness_notes":""},{"description":"If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":527,"name":"Exposure of Version-Control Repository to an Unauthorized Control Sphere","description":"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.","extended_description":"Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed \"diff\" data about how files have been changed - which could reveal source code snippets that were never intended to be made public.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":528,"name":"Exposure of Core Dump File to an Unauthorized Control Sphere","description":"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect the core dump files from unauthorized access.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":529,"name":"Exposure of Access Control List Files to an Unauthorized Control Sphere","description":"The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.","extended_description":"Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect access control list files.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":53,"name":"Path Equivalence: '\\multiple\\\\internal\\backslash'","description":"The product accepts path input in the form of multiple internal backslash ('\\multiple\\trailing\\\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":530,"name":"Exposure of Backup File to an Unauthorized Control Sphere","description":"A backup file is stored in a directory or archive that is made accessible to unauthorized actors.","extended_description":"Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":531,"name":"Inclusion of Sensitive Information in Test Code","description":"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove test code before deploying the application into production.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":532,"name":"Insertion of Sensitive Information into Log File","description":"The product writes sensitive information to a log file.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.","effectiveness":"","effectiveness_notes":""},{"description":"Remove debug log files before deploying the application into production.","effectiveness":"","effectiveness_notes":""},{"description":"Protect log files against unauthorized read/write.","effectiveness":"","effectiveness_notes":""},{"description":"Adjust configurations appropriately when software is transitioned from a debug state to production.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":533,"name":"DEPRECATED: Information Exposure Through Server Log Files","description":"This entry has been deprecated because its abstraction was too low-level.  See CWE-532.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":534,"name":"DEPRECATED: Information Exposure Through Debug Log Files","description":"This entry has been deprecated because its abstraction was too low-level.  See CWE-532.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":535,"name":"Exposure of Information Through Shell Error Message","description":"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":536,"name":"Servlet Runtime Error Message Containing Sensitive Information","description":"A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":537,"name":"Java Runtime Error Message Containing Sensitive Information","description":"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not expose sensitive error information to the user.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":538,"name":"Insertion of Sensitive Information into Externally-Accessible File or Directory","description":"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not expose file and directory information to the user.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":539,"name":"Use of Persistent Cookies Containing Sensitive Information","description":"The web application uses persistent cookies, but the cookies contain sensitive information.","extended_description":"Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive.   This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not store sensitive information in persistent cookies.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":54,"name":"Path Equivalence: 'filedir\\' (Trailing Backslash)","description":"The product accepts path input in the form of trailing backslash ('filedir\\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":540,"name":"Inclusion of Sensitive Information in Source Code","description":"Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.","extended_description":"There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":541,"name":"Inclusion of Sensitive Information in an Include File","description":"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not store sensitive information in include files.","effectiveness":"","effectiveness_notes":""},{"description":"Protect include files from being exposed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":542,"name":"DEPRECATED: Information Exposure Through Cleanup Log Files","description":"This entry has been deprecated because its abstraction was too low-level.  See CWE-532.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":543,"name":"Use of Singleton Pattern Without Synchronization in a Multithreaded Context","description":"The product uses the singleton pattern when creating a resource within a multithreaded environment.","extended_description":"The use of a singleton pattern may not be thread-safe.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use the Thread-Specific Storage Pattern. See References.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).","effectiveness":"limited","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":544,"name":"Missing Standardized Error Handling Mechanism","description":"The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.","extended_description":"If the product handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":545,"name":"DEPRECATED: Use of Dynamic Class Loading","description":"This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":546,"name":"Suspicious Comment","description":"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.","extended_description":"Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":547,"name":"Use of Hard-coded, Security-relevant Constants","description":"The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.","extended_description":"If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid using hard-coded constants. Configuration files offer a more flexible solution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":548,"name":"Exposure of Information Through Directory Listing","description":"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.","extended_description":"A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":549,"name":"Missing Password Field Masking","description":"The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":55,"name":"Path Equivalence: '/./' (Single Dot Directory)","description":"The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":550,"name":"Server-generated Error Message Containing Sensitive Information","description":"Certain conditions, such as network failure, will cause a server error message to be displayed.","extended_description":"While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":551,"name":"Incorrect Behavior Order: Authorization Before Parsing and Canonicalization","description":"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.","extended_description":"For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":552,"name":"Files or Directories Accessible to External Parties","description":"The product makes files or directories accessible to unauthorized actors, even though they should not be.","extended_description":"Web servers, FTP servers, and similar servers may store a set of files underneath a \"root\" directory that is accessible to the server's users.  Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any.  Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. In cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":553,"name":"Command Shell in Externally Accessible Directory","description":"A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove any Shells accessible under the web root folder and children directories.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":554,"name":"ASP.NET Misconfiguration: Not Using Input Validation Framework","description":"The ASP.NET application does not use an input validation framework.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":555,"name":"J2EE Misconfiguration: Plaintext Password in Configuration File","description":"The J2EE application stores a plaintext password in a configuration file.","extended_description":"Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not hardwire passwords into your software.","effectiveness":"","effectiveness_notes":""},{"description":"Use industry standard libraries to encrypt passwords before storage in configuration files.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":556,"name":"ASP.NET Misconfiguration: Use of Identity Impersonation","description":"Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.","extended_description":"The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use the least privilege principle.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":558,"name":"Use of getlogin() in Multithreaded Application","description":"The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.","extended_description":"The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.","effectiveness":"","effectiveness_notes":""},{"description":"Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":56,"name":"Path Equivalence: 'filedir*' (Wildcard)","description":"The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":560,"name":"Use of umask() with chmod-style Argument","description":"The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use umask() with the correct argument.","effectiveness":"","effectiveness_notes":""},{"description":"If you suspect misuse of umask(), you can use grep to spot call instances of umask().","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":561,"name":"Dead Code","description":"The product contains dead code, which can never be executed.","extended_description":"Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove dead code before deploying the application.","effectiveness":"","effectiveness_notes":""},{"description":"Use a static analysis tool to spot dead code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Cost effective for partial coverage: Warning Flags Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"}]},{"cwe_id":562,"name":"Return of Stack Variable Address","description":"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.","extended_description":"Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use static analysis tools to spot return of the address of a stack variable.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":563,"name":"Assignment to Variable without Use","description":"The variable's value is assigned but never used, making it a dead store.","extended_description":"After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove unused variables from the code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":564,"name":"SQL Injection: Hibernate","description":"Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"A non-SQL style database which is not subject to this flaw may be chosen.","effectiveness":"","effectiveness_notes":""},{"description":"Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.","effectiveness":"","effectiveness_notes":""},{"description":"Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":565,"name":"Reliance on Cookies without Validation and Integrity Checking","description":"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.","extended_description":"Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid using cookie data for a security-related decision.","effectiveness":"","effectiveness_notes":""},{"description":"Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.","effectiveness":"","effectiveness_notes":""},{"description":"Add integrity checks to detect tampering.","effectiveness":"","effectiveness_notes":""},{"description":"Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":566,"name":"Authorization Bypass Through User-Controlled SQL Primary Key","description":"The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.","extended_description":"When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records. Database access control errors occur when: Data enters a program from an untrusted source. The data is used to specify the value of a primary key in a SQL query. The untrusted source does not have the permissions to be able to access all rows in the associated table.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.","effectiveness":"","effectiveness_notes":""},{"description":"Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":567,"name":"Unsynchronized Access to Shared Data in a Multithreaded Context","description":"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.","extended_description":"Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable. Note that this weakness is not unique to servlets.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":568,"name":"finalize() Method Without super.finalize()","description":"The product contains a finalize() method that does not call super.finalize().","extended_description":"The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Call the super.finalize() method.","effectiveness":"","effectiveness_notes":""},{"description":"Use static analysis tools to spot such issues in your code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":57,"name":"Path Equivalence: 'fakedir/../realdir/filename'","description":"The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":570,"name":"Expression is Always False","description":"The product contains an expression that will always evaluate to false.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use Static Analysis tools to spot such conditions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":571,"name":"Expression is Always True","description":"The product contains an expression that will always evaluate to true.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use Static Analysis tools to spot such conditions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":572,"name":"Call to Thread run() instead of start()","description":"The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.","extended_description":"In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use the start() method instead of the run() method.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":573,"name":"Improper Following of Specification by Caller","description":"The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.","extended_description":"When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":574,"name":"EJB Bad Practices: Use of Synchronization Primitives","description":"The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.","extended_description":"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances.\" The specification justifies this requirement in the following way: \"This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use Synchronization Primitives when writing EJBs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":575,"name":"EJB Bad Practices: Use of AWT Swing","description":"The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.","extended_description":"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard.\" The specification justifies this requirement in the following way: \"Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use AWT/Swing when writing EJBs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":576,"name":"EJB Bad Practices: Use of Java I/O","description":"The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.","extended_description":"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the java.io package to attempt to access files and directories in the file system.\" The specification justifies this requirement in the following way: \"The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use Java I/O when writing EJBs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":577,"name":"EJB Bad Practices: Use of Sockets","description":"The product violates the Enterprise JavaBeans (EJB) specification by using sockets.","extended_description":"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast.\" The specification justifies this requirement in the following way: \"The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use Sockets when writing EJBs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":578,"name":"EJB Bad Practices: Use of Class Loader","description":"The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.","extended_description":"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams.\" The specification justifies this requirement in the following way: \"These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use the Class Loader when writing EJBs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":579,"name":"J2EE Bad Practices: Non-serializable Object Stored in Session","description":"The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.","extended_description":"A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":58,"name":"Path Equivalence: Windows 8.3 Filename","description":"The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short \"8.3\" filename.","extended_description":"On later Windows operating systems, a file can have a \"long name\" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These \"8.3\" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":580,"name":"clone() Method Without super.clone()","description":"The product contains a clone() method that does not call super.clone() to obtain the new object.","extended_description":"All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Call super.clone() within your clone() method, when obtaining a new object.","effectiveness":"","effectiveness_notes":""},{"description":"In some cases, you can eliminate the clone method altogether and use copy constructors.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":581,"name":"Object Model Violation: Just One of Equals and Hashcode Defined","description":"The product does not maintain equal hashcodes for equal objects.","extended_description":"Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Both Equals() and Hashcode() should be defined.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":582,"name":"Array Declared Public, Final, and Static","description":"The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.","extended_description":"Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.","likelihood_of_exploit":"","background_details":["Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running."],"potential_mitigations":[{"description":"In most situations the array should be made private.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":583,"name":"finalize() Method Declared Public","description":"The product violates secure coding principles for mobile code by declaring a finalize() method public.","extended_description":"A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":584,"name":"Return Inside Finally Block","description":"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":585,"name":"Empty Synchronized Block","description":"The product contains an empty synchronized block.","extended_description":"An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":586,"name":"Explicit Call to Finalize()","description":"The product makes an explicit call to the finalize() method from outside the finalizer.","extended_description":"While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":587,"name":"Assignment of a Fixed Address to a Pointer","description":"The product sets a pointer to a specific address other than NULL or 0.","extended_description":"Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Never set a pointer to a fixed address.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":588,"name":"Attempt to Access Child of a Non-structure Pointer","description":"Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The choice could be made to use a language that is not susceptible to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Review of type casting operations can identify locations where incompatible types are cast.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":589,"name":"Call to Non-ubiquitous API","description":"The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.","extended_description":"Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always test your code on any platform on which it is targeted to run on.","effectiveness":"","effectiveness_notes":""},{"description":"Test your code on the newest and oldest platform on which it is targeted to run on.","effectiveness":"","effectiveness_notes":""},{"description":"Develop a system to test for API functions that are not portable.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":59,"name":"Improper Link Resolution Before File Access ('Link Following')","description":"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.","extended_description":"","likelihood_of_exploit":"medium","background_details":["Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms."],"potential_mitigations":[{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":590,"name":"Free of Memory not on the Heap","description":"The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().","extended_description":"When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.","effectiveness":"","effectiveness_notes":""},{"description":"Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that provides abstractions for memory allocation and deallocation.","effectiveness":"","effectiveness_notes":""},{"description":"Use a tool that dynamically detects memory management problems, such as valgrind.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":591,"name":"Sensitive Data Storage in Improperly Locked Memory","description":"The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.","extended_description":"On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.","effectiveness":"","effectiveness_notes":""},{"description":"Check return values to ensure locking operations are successful.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":592,"name":"DEPRECATED: Authentication Bypass Issues","description":"This weakness has been deprecated because it covered redundant concepts already described in CWE-287.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":593,"name":"Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created","description":"The product modifies the SSL context after connection creation has begun.","extended_description":"If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use a language or a library that provides a cryptography framework at a higher level of abstraction.","effectiveness":"","effectiveness_notes":""},{"description":"Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.","effectiveness":"","effectiveness_notes":""},{"description":"Applications should set up an SSL_CTX completely, before creating SSL objects from it.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":594,"name":"J2EE Framework: Saving Unserializable Objects to Disk","description":"When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.","extended_description":"In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":595,"name":"Comparison of Object References Instead of Object Contents","description":"The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.","extended_description":"For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":596,"name":"DEPRECATED: Incorrect Semantic Object Comparison","description":"This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":597,"name":"Use of Wrong Operator in String Comparison","description":"The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.","extended_description":"In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Within Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)","effectiveness":"high","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":598,"name":"Use of GET Request Method With Sensitive Query Strings","description":"The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.","extended_description":"The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources.  If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When sensitive information is sent, use the POST method (e.g. registration form).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":599,"name":"Missing Validation of OpenSSL Certificate","description":"The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.","extended_description":"This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that proper authentication is included in the system design.","effectiveness":"","effectiveness_notes":""},{"description":"Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":6,"name":"J2EE Misconfiguration: Insufficient Session-ID Length","description":"The J2EE application is configured to use an insufficient session ID length.","extended_description":"If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.","likelihood_of_exploit":"","background_details":["Session ID's can be used to identify communicating parties in a web environment. The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic."],"potential_mitigations":[{"description":"Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.","effectiveness":"","effectiveness_notes":""},{"description":"A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":600,"name":"Uncaught Exception in Servlet","description":"The Servlet does not catch all exceptions, which may reveal sensitive debugging information.","extended_description":"When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Implement Exception blocks to handle all types of Exceptions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":601,"name":"URL Redirection to Untrusted Site ('Open Redirect')","description":"The web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a redirect.","extended_description":"","likelihood_of_exploit":"low","background_details":["Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft."],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. Use a list of approved URLs or domains to be used for redirection.","effectiveness":"","effectiveness_notes":""},{"description":"Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).","effectiveness":"","effectiveness_notes":"Note that this can be bypassed using XSS (CWE-79)."},{"description":"Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}],"detection_methods":[{"method":"Manual Static Analysis","description":"Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Fuzz Tester Framework-based Fuzzer","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":602,"name":"Client-Side Enforcement of Server-Side Security","description":"The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.","extended_description":"When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.","effectiveness":"","effectiveness_notes":""},{"description":"If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.","effectiveness":"","effectiveness_notes":""},{"description":"Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"","effectiveness_notes":""},{"description":"Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":603,"name":"Use of Client-Side Authentication","description":"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.","extended_description":"Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not rely on client side data. Always perform server side authentication.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":605,"name":"Multiple Binds to the Same Port","description":"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.","extended_description":"On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Restrict server socket address to known local addresses.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":606,"name":"Unchecked Input for Loop Condition","description":"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not use user-controlled data for loop conditions.","effectiveness":"","effectiveness_notes":""},{"description":"Perform input validation.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":607,"name":"Public Static Final Field References Mutable Object","description":"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Protect mutable objects by making them private. Restrict access to the getter and setter as well.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":608,"name":"Struts: Non-private Field in ActionForm Class","description":"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":609,"name":"Double-Checked Locking","description":"The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.","extended_description":"Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":61,"name":"UNIX Symbolic Link (Symlink) Following","description":"The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","extended_description":"A product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.","effectiveness":"","effectiveness_notes":""},{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":610,"name":"Externally Controlled Reference to a Resource in Another Sphere","description":"The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":611,"name":"Improper Restriction of XML External Entity Reference","description":"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.","extended_description":"XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as \"file:///c:/winnt/win.ini\" designates (in Windows) the file C:\\Winnt\\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Many XML parsers and validators can be configured to disable external entity expansion.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":612,"name":"Improper Authorization of Index Containing Sensitive Information","description":"The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.","extended_description":"Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search.  If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results.  The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":613,"name":"Insufficient Session Expiration","description":"According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Set sessions/credentials expiration date.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":614,"name":"Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","description":"The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always set the secure attribute when the cookie should sent via HTTPS only.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":615,"name":"Inclusion of Sensitive Information in Source Code Comments","description":"While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.","extended_description":"An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":616,"name":"Incomplete Identification of Uploaded File Variables (PHP)","description":"The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.","extended_description":"These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as \"/etc/passwd\".","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use PHP 4 or later.","effectiveness":"","effectiveness_notes":""},{"description":"If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))","effectiveness":"","effectiveness_notes":""},{"description":"For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":617,"name":"Reachable Assertion","description":"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.","extended_description":"While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)","effectiveness":"","effectiveness_notes":""},{"description":"Perform input validation on user data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":618,"name":"Exposed Unsafe ActiveX Method","description":"An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).","extended_description":"ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.","effectiveness":"","effectiveness_notes":""},{"description":"Use code signing, although this does not protect against any weaknesses that are already in the control.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, avoid marking the control as safe for scripting.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":619,"name":"Dangling Database Cursor ('Cursor Injection')","description":"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\"","extended_description":"For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.","likelihood_of_exploit":"","background_details":["A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries."],"potential_mitigations":[{"description":"Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":62,"name":"UNIX Hard Link","description":"The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","extended_description":"Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":620,"name":"Unverified Password Change","description":"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.","extended_description":"This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When prompting for a password change, force the user to provide the original password in addition to the new password.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":621,"name":"Variable Extraction Error","description":"The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.","extended_description":"For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals. Similar functionality is possible in other interpreted languages, including custom languages.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use allowlists of variable names that can be extracted.","effectiveness":"","effectiveness_notes":""},{"description":"Consider refactoring your code to avoid extraction routines altogether.","effectiveness":"","effectiveness_notes":""},{"description":"In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":622,"name":"Improper Validation of Function Hook Arguments","description":"The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.","extended_description":"Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that all arguments are verified, as defined by the API you are protecting.","effectiveness":"","effectiveness_notes":""},{"description":"Drop privileges before invoking such functions, if possible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":623,"name":"Unsafe ActiveX Control Marked Safe For Scripting","description":"An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.","extended_description":"This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"During development, do not mark it as safe for scripting.","effectiveness":"","effectiveness_notes":""},{"description":"After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":624,"name":"Executable Regular Expression Error","description":"The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.","extended_description":"Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":625,"name":"Permissive Regular Expression","description":"The product uses a regular expression that does not sufficiently restrict the set of allowed values.","extended_description":"This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include: not identifying the beginning and end of the target string using wildcards instead of acceptable character ranges others","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":626,"name":"Null Byte Interaction Error (Poison Null Byte)","description":"The product does not properly handle null bytes or NUL characters when passing data between different representations or components.","extended_description":"A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected. The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Remove null bytes from all incoming strings.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":627,"name":"Dynamic Variable Evaluation","description":"In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.","extended_description":"The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.","likelihood_of_exploit":"","background_details":["Many interpreted languages support the use of a \"$$varname\" construct to set a variable whose name is specified by the $varname variable. In PHP, these are referred to as \"variable variables.\" Functions might also be invoked using similar syntax, such as $$funcname(arg1, arg2)."],"potential_mitigations":[{"description":"Refactor the code to avoid dynamic variable evaluation whenever possible.","effectiveness":"","effectiveness_notes":""},{"description":"Use only allowlists of acceptable variable or function names.","effectiveness":"","effectiveness_notes":""},{"description":"For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":628,"name":"Function Call with Incorrectly Specified Arguments","description":"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.","extended_description":"There are multiple ways in which this weakness can be introduced, including: the wrong variable or reference; an incorrect number of arguments; incorrect order of arguments; wrong type of arguments; or wrong value.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure your API's are stable before you use them in production code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Other","description":"Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.","effectiveness":""}]},{"cwe_id":636,"name":"Not Failing Securely ('Failing Open')","description":"When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.","extended_description":"By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to \"fail functional\" to minimize administration and support costs, instead of \"failing safe.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":637,"name":"Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')","description":"The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.","extended_description":"Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":638,"name":"Not Using Complete Mediation","description":"The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.","effectiveness":"","effectiveness_notes":""},{"description":"Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":639,"name":"Authorization Bypass Through User-Controlled Key","description":"The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.","extended_description":"Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.","effectiveness":"","effectiveness_notes":""},{"description":"Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":64,"name":"Windows Shortcut Following (.LNK)","description":"The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","extended_description":"The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":640,"name":"Weak Password Recovery Mechanism for Forgotten Password","description":"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.","extended_description":"It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use standard weak security questions and use several security questions.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.","effectiveness":"","effectiveness_notes":""},{"description":"Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.","effectiveness":"","effectiveness_notes":""},{"description":"Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.","effectiveness":"","effectiveness_notes":""},{"description":"Assign a new temporary password rather than revealing the original password.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":641,"name":"Improper Restriction of Names for Files and Other Resources","description":"The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.","extended_description":"This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Do not allow users to control names of resources used on the server side.","effectiveness":"","effectiveness_notes":""},{"description":"Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":642,"name":"External Control of Critical State Data","description":"The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.","extended_description":"If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed. State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.","effectiveness":"","effectiveness_notes":""},{"description":"Store state information and sensitive data on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions. If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).","effectiveness":"","effectiveness_notes":""},{"description":"Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. With a stateless protocol such as HTTP, use some frameworks can maintain the state for you. Examples include ASP.NET View State and the OWASP ESAPI Session Management feature. Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""},{"description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.","effectiveness":"","effectiveness_notes":""},{"description":"Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"","effectiveness_notes":""},{"description":"Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":643,"name":"Improper Neutralization of Data within XPath Expressions ('XPath Injection')","description":"The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.","extended_description":"The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.","effectiveness":"","effectiveness_notes":""},{"description":"Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":644,"name":"Improper Neutralization of HTTP Headers for Scripting Syntax","description":"The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.","extended_description":"An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled. If a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.","effectiveness":"","effectiveness_notes":""},{"description":"Disable script execution functionality in the clients' browser.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":645,"name":"Overly Restrictive Account Lockout Mechanism","description":"The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.","extended_description":"Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.","effectiveness":"","effectiveness_notes":""},{"description":"Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.","effectiveness":"","effectiveness_notes":""},{"description":"Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":646,"name":"Reliance on File Name or Extension of Externally-Supplied File","description":"The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.","extended_description":"An application might use the file name or extension of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a \".php.gif\" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Make decisions on the server side based on file content and not on file name or extension.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":647,"name":"Use of Non-Canonical URL Paths for Authorization Decisions","description":"The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.","extended_description":"If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as: http://WWW.EXAMPLE.COM/mypage http://www.example.com/%6Dypage (alternate encoding) http://192.168.1.1/mypage (IP address) http://www.example.com/mypage/ (trailing /) http://www.example.com:80/mypage Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.","effectiveness":"","effectiveness_notes":""},{"description":"Reject all alternate path encodings that are not in the expected canonical form.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":648,"name":"Incorrect Use of Privileged APIs","description":"The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.","extended_description":"When a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to: ensure that assumptions made by the APIs are valid, such as validity of arguments account for known weaknesses in the design/implementation of the API call the API from a safe context If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.","effectiveness":"","effectiveness_notes":""},{"description":"Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.","effectiveness":"","effectiveness_notes":""},{"description":"If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.","effectiveness":"","effectiveness_notes":""},{"description":"If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.","effectiveness":"","effectiveness_notes":""},{"description":"Only call privileged APIs from safe, consistent and expected state.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":649,"name":"Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking","description":"The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.","extended_description":"When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.","effectiveness":"","effectiveness_notes":""},{"description":"Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.","effectiveness":"","effectiveness_notes":""},{"description":"Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.","effectiveness":"","effectiveness_notes":""},{"description":"Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":65,"name":"Windows Hard Link","description":"The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","extended_description":"Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":650,"name":"Trusting HTTP Permission Methods on the Server Side","description":"The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.","extended_description":"The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":651,"name":"Exposure of WSDL File Containing Sensitive Information","description":"The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).","extended_description":"An information exposure may occur if any of the following apply: The WSDL file is accessible to a wider audience than intended. The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code. Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.","effectiveness":"","effectiveness_notes":""},{"description":"Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.","effectiveness":"","effectiveness_notes":""},{"description":"Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":652,"name":"Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')","description":"The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.","extended_description":"The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use parameterized queries. This will help ensure separation between data plane and control plane.","effectiveness":"","effectiveness_notes":""},{"description":"Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":653,"name":"Improper Isolation or Compartmentalization","description":"The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.","extended_description":"When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":654,"name":"Reliance on a Single Factor in a Security Decision","description":"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).","effectiveness":"","effectiveness_notes":""},{"description":"Use redundant access rules on different choke points (e.g., firewalls).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":655,"name":"Insufficient Psychological Acceptability","description":"The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.","effectiveness":"","effectiveness_notes":""},{"description":"Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":656,"name":"Reliance on Security Through Obscurity","description":"The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.","extended_description":"This reliance on \"security through obscurity\" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.","effectiveness":"","effectiveness_notes":""},{"description":"When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":657,"name":"Violation of Secure Design Principles","description":"The product violates well-established principles for secure design.","extended_description":"This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":66,"name":"Improper Handling of File Names that Identify Virtual Resources","description":"The product does not handle or incorrectly handles a file name that identifies a \"virtual\" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.","extended_description":"Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":662,"name":"Improper Synchronization","description":"The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.","extended_description":"Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other.  Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes.  Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores.  When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use industry standard APIs to synchronize your code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":663,"name":"Use of a Non-reentrant Function in a Concurrent Context","description":"The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use reentrant functions if available.","effectiveness":"","effectiveness_notes":""},{"description":"Add synchronization to your non-reentrant function.","effectiveness":"","effectiveness_notes":""},{"description":"In Java, use the ReentrantLock Class.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":664,"name":"Improper Control of a Resource Through its Lifetime","description":"The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.","extended_description":"Resources often have explicit instructions on how to be created, used and destroyed. When code does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states. Even without explicit instructions, various principles are expected to be adhered to, such as \"Do not use an object until after its creation is complete,\" or \"do not use an object after it has been slated for destruction.\"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use Static analysis tools to check for unreleased resources.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":665,"name":"Improper Initialization","description":"The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.","extended_description":"This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.","effectiveness":"","effectiveness_notes":""},{"description":"Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.","effectiveness":"","effectiveness_notes":""},{"description":"Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.","effectiveness":"","effectiveness_notes":""},{"description":"Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid race conditions (CWE-362) during initialization routines.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile your product with settings that generate warnings about uninitialized variables or data.","effectiveness":"","effectiveness_notes":""},{"description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Dynamic Analysis","description":"Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.","effectiveness":""},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":666,"name":"Operation on Resource in Wrong Phase of Lifetime","description":"The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.","extended_description":"A resource's lifecycle includes several phases: initialization, use, and release. For each phase, it is important to follow the specifications outlined for how to operate on the resource and to ensure that the resource is in the expected phase. Otherwise, if a resource is in one phase but the operation is not valid for that phase (i.e., an incorrect phase of the resource's lifetime), then this can produce resultant weaknesses. For example, using a resource before it has been fully initialized could cause corruption or incorrect data to be used.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Follow the resource's lifecycle from creation to release.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":667,"name":"Improper Locking","description":"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.","extended_description":"Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process.  This can lead to data or memory corruption, denial of service, etc.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use industry standard APIs to implement locking mechanism.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":668,"name":"Exposure of Resource to Wrong Sphere","description":"The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.","extended_description":"Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files. A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system. In either case, the end result is that a resource has been exposed to the wrong party.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":669,"name":"Incorrect Resource Transfer Between Spheres","description":"The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.","extended_description":"","likelihood_of_exploit":"","background_details":["A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":67,"name":"Improper Handling of Windows Device Names","description":"The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.","extended_description":"Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A product that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.","likelihood_of_exploit":"high","background_details":["Historically, there was a bug in the Windows operating system that caused a blue screen of death. Even after that issue was fixed DOS device names continue to be a factor."],"potential_mitigations":[{"description":"Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":670,"name":"Always-Incorrect Control Flow Implementation","description":"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.","extended_description":"This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":671,"name":"Lack of Administrator Control over Security","description":"The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.","extended_description":"If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":672,"name":"Operation on a Resource after Expiration or Release","description":"The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":673,"name":"External Influence of Sphere Definition","description":"The product does not prevent the definition of control spheres from external actors.","extended_description":"Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":674,"name":"Uncontrolled Recursion","description":"The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure an end condition will be reached under all logic conditions.  The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.","effectiveness":"moderate","effectiveness_notes":""},{"description":"Increase the stack size.","effectiveness":"limited","effectiveness_notes":"Increasing the stack size might only be a temporary measure, since the stack typically is still not very large, and it might remain easy for attackers to cause an out-of-stack fault."}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":675,"name":"Multiple Operations on Resource in Single-Operation Context","description":"The product performs the same operation on a resource two or more times, when the operation should only be applied once.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":676,"name":"Use of Potentially Dangerous Function","description":"The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.","effectiveness":"high"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger Cost effective for partial coverage: Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags Source Code Quality Analyzer","effectiveness":"high"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Origin Analysis","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":680,"name":"Integer Overflow to Buffer Overflow","description":"The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":681,"name":"Incorrect Conversion between Numeric Types","description":"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Avoid making conversion between numeric types. Always check for the allowed ranges.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":682,"name":"Incorrect Calculation","description":"The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.","extended_description":"When product performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.","effectiveness":"","effectiveness_notes":""},{"description":"Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.","effectiveness":"","effectiveness_notes":""},{"description":"Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.","effectiveness":"","effectiveness_notes":""},{"description":"Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).","effectiveness":"","effectiveness_notes":""},{"description":"Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).","effectiveness":"","effectiveness_notes":""},{"description":"Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.","effectiveness":"","effectiveness_notes":""},{"description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.","effectiveness":"","effectiveness_notes":""},{"description":"Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.","effectiveness":"high"}]},{"cwe_id":683,"name":"Function Call With Incorrect Order of Arguments","description":"The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.","extended_description":"While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use the function, procedure, or routine as specified.","effectiveness":"","effectiveness_notes":""},{"description":"Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":684,"name":"Incorrect Provision of Specified Functionality","description":"The code does not function according to its published specifications, potentially leading to incorrect usage.","extended_description":"When providing functionality to an external party, it is important that the product behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Ensure that your code strictly conforms to specifications.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":685,"name":"Function Call With Incorrect Number of Arguments","description":"The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Other","description":"While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers of arguments, such as format strings in C. It also can occur in languages or environments that do not require that functions always be called with the correct number of arguments, such as Perl.","effectiveness":""}]},{"cwe_id":686,"name":"Function Call With Incorrect Argument Type","description":"The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.","extended_description":"This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":687,"name":"Function Call With Incorrectly Specified Argument Value","description":"The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Manual Static Analysis","description":"This might require an understanding of intended program behavior or design to determine whether the value is incorrect.","effectiveness":""}]},{"cwe_id":688,"name":"Function Call With Incorrect Variable or Reference as Argument","description":"The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Other","description":"While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers of arguments, such as format strings in C. It also can occur in loosely typed languages or environments. This might require an understanding of intended program behavior or design to determine whether the value is incorrect.","effectiveness":""}]},{"cwe_id":689,"name":"Permission Race Condition During Resource Copy","description":"The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":69,"name":"Improper Handling of Windows ::DATA Alternate Data Stream","description":"The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).","extended_description":"An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.","likelihood_of_exploit":"","background_details":["Alternate data streams (ADS) were first implemented in the Windows NT operating system to provide compatibility between NTFS and the Macintosh Hierarchical File System (HFS). In HFS, data and resource forks are used to store information about a file. The data fork provides information about the contents of the file while the resource fork stores metadata such as file type."],"potential_mitigations":[{"description":"Software tools are capable of finding ADSs on your system.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the source code correctly parses the filename to read or write to the correct stream.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":690,"name":"Unchecked Return Value to NULL Pointer Dereference","description":"The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.","extended_description":"While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Black Box","description":"This typically occurs in rarely-triggered error conditions, reducing the chances of detection during black box testing.","effectiveness":""},{"method":"White Box","description":"Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.","effectiveness":""}]},{"cwe_id":691,"name":"Insufficient Control Flow Management","description":"The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":692,"name":"Incomplete Denylist to Cross-Site Scripting","description":"The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.","extended_description":"While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a denylist cannot keep track of all the variations. The \"XSS Cheat Sheet\" [REF-714] contains a large number of attacks that are intended to bypass incomplete denylists.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":693,"name":"Protection Mechanism Failure","description":"The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.","extended_description":"This weakness covers three distinct situations. A \"missing\" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An \"insufficient\" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an \"ignored\" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":694,"name":"Use of Multiple Resources with Duplicate Identifier","description":"The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.","extended_description":"If the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":695,"name":"Use of Low-Level Functionality","description":"The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.","extended_description":"The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":696,"name":"Incorrect Behavior Order","description":"The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":697,"name":"Incorrect Comparison","description":"The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.","extended_description":"This Pillar covers several possibilities: the comparison checks one factor incorrectly; the comparison should consider multiple factors, but it does not check at least one of those factors at all; the comparison checks the wrong factor.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":698,"name":"Execution After Redirect (EAR)","description":"The web application sends a redirect to another location, but instead of exiting, it executes additional code.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Black Box","description":"This issue might not be detected if testing is performed using a web browser, because the browser might obey the redirect and move the user to a different page before the application has produced outputs that indicate something is amiss.","effectiveness":""}]},{"cwe_id":7,"name":"J2EE Misconfiguration: Missing Custom Error Page","description":"The default error page of a web application should not display sensitive information about the product.","extended_description":"A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response. When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Handle exceptions appropriately in source code.","effectiveness":"","effectiveness_notes":""},{"description":"Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.","effectiveness":"","effectiveness_notes":""},{"description":"Do not attempt to process an error or attempt to mask it.","effectiveness":"","effectiveness_notes":""},{"description":"Verify return values are correct and do not supply sensitive information about the system.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":703,"name":"Improper Check or Handling of Exceptional Conditions","description":"The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Fault Injection - source code Fault Injection - binary Cost effective for partial coverage: Forced Path Execution","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction","effectiveness":"high"}]},{"cwe_id":704,"name":"Incorrect Type Conversion or Cast","description":"The product does not correctly convert an object, resource, or structure from one type to a different type.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":705,"name":"Incorrect Control Flow Scoping","description":"The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":706,"name":"Use of Incorrectly-Resolved Name or Reference","description":"The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":707,"name":"Improper Neutralization","description":"The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.","extended_description":"If a message is malformed, it may cause the message to be incorrectly interpreted. Neutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is \"safe.\"  This can be done by: checking that the input/output is already \"safe\" (e.g. validation) transformation of the input/output to be \"safe\" using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalization preventing the input/output from being directly provided by an attacker (e.g. \"indirect selection\" that maps externally-provided values to internally-controlled values) preventing the input/output from being processed at all This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":708,"name":"Incorrect Ownership Assignment","description":"The product assigns an owner to a resource, but the owner is outside of the intended control sphere.","extended_description":"This may allow the resource to be manipulated by actors outside of the intended control sphere.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Periodically review the privileges and their owners.","effectiveness":"","effectiveness_notes":""},{"description":"Use automated tools to check for privilege settings.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":71,"name":"DEPRECATED: Apple '.DS_Store'","description":"This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":710,"name":"Improper Adherence to Coding Standards","description":"The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Document and closely follow coding standards.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, use automated tools to enforce the standards.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":72,"name":"Improper Handling of Apple HFS+ Alternate Data Stream Path","description":"The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.","extended_description":"If the product chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the product may take unexpected actions. Further, if the product intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.","likelihood_of_exploit":"","background_details":["The Apple HFS+ file system permits files to have multiple data input streams, accessible through special paths. The Mac OS X operating system provides a way to access the different data input streams through special paths and as an extended attribute: - Resource fork: file/..namedfork/rsrc, file/rsrc (deprecated), xattr:com.apple.ResourceFork - Data fork: file/..namedfork/data (only versions prior to Mac OS X v10.5) Additionally, on filesystems that lack native support for multiple streams, the resource fork and file metadata may be stored in a file with \"._\" prepended to the name. Forks can also be accessed through non-portable APIs. Forks inherit the file system access controls of the file they belong to. Programs need to control access to these paths, if the processing of a file system object is dependent on the structure of its path."],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":73,"name":"External Control of File Name or Path","description":"The product allows user input to control or influence paths or file names that are used in filesystem operations.","extended_description":"This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59).","effectiveness":"","effectiveness_notes":""},{"description":"Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.","effectiveness":"","effectiveness_notes":""},{"description":"If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""},{"description":"Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.","effectiveness":""}]},{"cwe_id":732,"name":"Incorrect Permission Assignment for Critical Resource","description":"The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.","extended_description":"When a resource is given a permission setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data. For example, consider a misconfigured storage account for the cloud that can be read or written by a public or anonymous user.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.","effectiveness":"","effectiveness_notes":""},{"description":"Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]","effectiveness":"moderate","effectiveness_notes":"This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly."},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"description":"During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.","effectiveness":"high","effectiveness_notes":""},{"description":"For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.","effectiveness":"high","effectiveness_notes":""},{"description":"Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.","effectiveness":"","effectiveness_notes":""},{"description":"Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.","effectiveness":"","effectiveness_notes":""},{"description":"When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. Automated techniques may be able to detect the use of library functions that modify permissions, then analyze function calls for arguments that contain potentially insecure values. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated static analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated static analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.","effectiveness":""},{"method":"Automated Dynamic Analysis","description":"Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.","effectiveness":""},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.","effectiveness":""},{"method":"Manual Static Analysis","description":"Manual static analysis may be effective in detecting the use of custom permissions models and functions. The code could then be examined to identifying usage of the related functions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software.","effectiveness":""},{"method":"Manual Dynamic Analysis","description":"Manual dynamic analysis may be effective in detecting the use of custom permissions models and functions. The program could then be executed with a focus on exercising code paths that are related to the custom permissions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software.","effectiveness":""},{"method":"Fuzzing","description":"Fuzzing is not effective in detecting this weakness.","effectiveness":""},{"method":"Black Box","description":"Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and watch for library functions or system calls on OS resources such as files, directories, and shared memory. Examine the arguments to these calls to infer which permissions are being used.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution","effectiveness":"high"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":733,"name":"Compiler Optimization Removal or Modification of Security-critical Code","description":"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Black Box","description":"This specific weakness is impossible to detect using black box methods. While an analyst could examine memory to see that it has not been scrubbed, an analysis of the executable would not be successful. This is because the compiler has already removed the relevant code. Only the source code shows whether the programmer intended to clear the memory or not, so this weakness is indistinguishable from others.","effectiveness":""},{"method":"White Box","description":"This weakness is only detectable using white box methods (see black box detection factor). Careful analysis is required to determine if the code is likely to be removed by the compiler.","effectiveness":""}]},{"cwe_id":74,"name":"Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","description":"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.","extended_description":"Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Programming languages and supporting technologies might be chosen which are not subject to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":749,"name":"Exposed Dangerous Method or Function","description":"The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.","extended_description":"This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The exposure can occur in a few different ways: The function/method was never intended to be exposed to outside actors. The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.","effectiveness":"","effectiveness_notes":""},{"description":"Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be: accessible to all users restricted to a small set of privileged users prevented from being directly accessible at all Ensure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":75,"name":"Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)","description":"The product does not adequately filter user-controlled input for special elements with control implications.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Programming languages and supporting technologies might be chosen which are not subject to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":754,"name":"Improper Check for Unusual or Exceptional Conditions","description":"The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.","extended_description":"The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability. Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.","likelihood_of_exploit":"medium","background_details":["Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function."],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).","effectiveness":"","effectiveness_notes":""},{"description":"Check the results of all functions that return a value and verify that the value is expected.","effectiveness":"high","effectiveness_notes":"Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."},{"description":"If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).","effectiveness":"high","effectiveness_notes":"Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur."},{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":"Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them."},{"description":"If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.","effectiveness":"","effectiveness_notes":""},{"description":"Use system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.","effectiveness":"moderate"},{"method":"Manual Dynamic Analysis","description":"Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.","effectiveness":""}]},{"cwe_id":755,"name":"Improper Handling of Exceptional Conditions","description":"The product does not handle or incorrectly handles an exceptional condition.","extended_description":"","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":756,"name":"Missing Custom Error Page","description":"The product does not return custom error pages to the user, possibly exposing sensitive information.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":757,"name":"Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')","description":"A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.","extended_description":"When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the product by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":758,"name":"Reliance on Undefined, Unspecified, or Implementation-Defined Behavior","description":"The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.","extended_description":"This can lead to resultant weaknesses when the required properties change, such as when the product is ported to a different platform or if an interaction error (CWE-435) occurs.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":759,"name":"Use of a One-Way Hash without a Salt","description":"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.","extended_description":"This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.","likelihood_of_exploit":"","background_details":["In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult."],"potential_mitigations":[{"description":"Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.","effectiveness":"high","effectiveness_notes":""},{"description":"If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.","effectiveness":"limited","effectiveness_notes":"Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware."},{"description":"When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":76,"name":"Improper Neutralization of Equivalent Special Elements","description":"The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.","extended_description":"The product may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the product may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the product might filter a dangerous \"-e\" command-line switch when calling an external program, but it might not account for \"--exec\" or other switches that have the same semantics.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Programming languages and supporting technologies might be chosen which are not subject to these issues.","effectiveness":"","effectiveness_notes":""},{"description":"Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":760,"name":"Use of a One-Way Hash with a Predictable Salt","description":"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.","extended_description":"This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.","likelihood_of_exploit":"","background_details":["In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult."],"potential_mitigations":[{"description":"Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.","effectiveness":"high","effectiveness_notes":""},{"description":"If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.","effectiveness":"limited","effectiveness_notes":"Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware."}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":761,"name":"Free of Pointer not at Start of Buffer","description":"The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.","extended_description":"This can cause the product to crash, or in some cases, modify critical program variables or execute code. This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.","effectiveness":"","effectiveness_notes":""},{"description":"When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that provides abstractions for memory allocation and deallocation.","effectiveness":"","effectiveness_notes":""},{"description":"Use a tool that dynamically detects memory management problems, such as valgrind.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":762,"name":"Mismatched Memory Management Routines","description":"The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.","extended_description":"This weakness can be generally described as mismatching memory management routines, such as: The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory. The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator. When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().","effectiveness":"","effectiveness_notes":""},{"description":"Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone. For example, glibc in Linux provides protection against free of invalid pointers. When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391]. To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that provides abstractions for memory allocation and deallocation.","effectiveness":"","effectiveness_notes":""},{"description":"Use a tool that dynamically detects memory management problems, such as valgrind.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":763,"name":"Release of Invalid Pointer or Reference","description":"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.","extended_description":"This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().","effectiveness":"","effectiveness_notes":""},{"description":"When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.","effectiveness":"","effectiveness_notes":""},{"description":"Use a language that provides abstractions for memory allocation and deallocation.","effectiveness":"","effectiveness_notes":""},{"description":"Use a tool that dynamically detects memory management problems, such as valgrind.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":764,"name":"Multiple Locks of a Critical Resource","description":"The product locks a critical resource more times than intended, leading to an unexpected state in the system.","extended_description":"When a product is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":765,"name":"Multiple Unlocks of a Critical Resource","description":"The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.","extended_description":"When the product is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":766,"name":"Critical Data Element Declared Public","description":"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.","extended_description":"This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":767,"name":"Access to Critical Private Variable via Public Method","description":"The product defines a public method that reads or modifies a private variable.","extended_description":"If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":768,"name":"Incorrect Short Circuit Evaluation","description":"The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.","extended_description":"Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the product's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system. If the first condition of an \"or\" statement is assumed to be true under normal circumstances, or if the first condition of an \"and\" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing. Finally, the usage of short circuit evaluation may decrease the maintainability of the code.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":769,"name":"DEPRECATED: Uncontrolled File Descriptor Consumption","description":"This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":77,"name":"Improper Neutralization of Special Elements used in a Command ('Command Injection')","description":"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.","extended_description":"Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"If at all possible, use library calls rather than external processes to recreate the desired functionality.","effectiveness":"","effectiveness_notes":""},{"description":"If possible, ensure that all external commands called from the program are statically created.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.","effectiveness":"","effectiveness_notes":""},{"description":"Assign permissions that prevent the user from accessing/opening privileged files.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":770,"name":"Allocation of Resources Without Limits or Throttling","description":"The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.","extended_description":"Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily.  Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.","effectiveness":"","effectiveness_notes":""},{"description":"Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.","effectiveness":"","effectiveness_notes":""},{"description":"Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":"This will only be applicable to cases where user input can influence the size or frequency of resource allocations."},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Mitigation of resource exhaustion attacks requires that the target system either: recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed. The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question. The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that protocols have specific limits of scale placed on them.","effectiveness":"","effectiveness_notes":""},{"description":"If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery. Ensure that all failures in resource allocation place the system into a safe posture.","effectiveness":"","effectiveness_notes":""},{"description":"Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Static Analysis","description":"Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.","effectiveness":""},{"method":"Fuzzing","description":"While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause. When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness.","effectiveness":"opportunistic"},{"method":"Automated Dynamic Analysis","description":"Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results.","effectiveness":""},{"method":"Automated Static Analysis","description":"Specialized configuration or tuning may be required to train automated tools to recognize this weakness. Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.","effectiveness":""}]},{"cwe_id":771,"name":"Missing Reference to Active Allocated Resource","description":"The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.","extended_description":"This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":772,"name":"Missing Release of Resource after Effective Lifetime","description":"The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.","extended_description":"When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.","effectiveness":"","effectiveness_notes":""},{"description":"It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.","effectiveness":"","effectiveness_notes":""},{"description":"Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":773,"name":"Missing Reference to Active File Descriptor or Handle","description":"The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.","extended_description":"This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":774,"name":"Allocation of File Descriptors or Handles Without Limits or Throttling","description":"The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.","extended_description":"This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":775,"name":"Missing Release of File Descriptor or Handle after Effective Lifetime","description":"The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.","extended_description":"When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":776,"name":"Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')","description":"The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.","extended_description":"If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.","effectiveness":"","effectiveness_notes":""},{"description":"Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":777,"name":"Regular Expression without Anchors","description":"The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.","extended_description":"When performing tasks such as validating against a set of allowed inputs (allowlist), data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.","likelihood_of_exploit":"medium","background_details":["Regular expressions are typically used to match a pattern of text. Anchors are used in regular expressions to specify where the pattern should match: at the beginning, the end, or both (the whole input)."],"potential_mitigations":[{"description":"Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define an allowlist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":778,"name":"Insufficient Logging","description":"When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.","extended_description":"When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds. As organizations adopt cloud storage resources, these technologies often require configuration changes to enable detailed logging information, since detailed logging can incur additional costs. This could lead to telemetry gaps in critical audit logs. For example, in Azure, the default value for logging is disabled.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Use a centralized logging mechanism that supports multiple levels of detail.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.","effectiveness":"","effectiveness_notes":""},{"description":"Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.","effectiveness":"","effectiveness_notes":""},{"description":"To enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":779,"name":"Logging of Excessive Data","description":"The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.","extended_description":"While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states \"last message repeated X times\" when recording repeated events.","effectiveness":"","effectiveness_notes":""},{"description":"Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.","effectiveness":"","effectiveness_notes":""},{"description":"Adjust configurations appropriately when the product is transitioned from a debug state to production.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":78,"name":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","description":"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.","extended_description":"This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"If at all possible, use library calls rather than external processes to recreate the desired functionality.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"description":"For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).","effectiveness":"","effectiveness_notes":""},{"description":"If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.","effectiveness":"","effectiveness_notes":""},{"description":"If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \">\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.","effectiveness":"","effectiveness_notes":""},{"description":"Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.","effectiveness":""},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Static Analysis","description":"Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":780,"name":"Use of RSA Algorithm without OAEP","description":"The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.","extended_description":"Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":781,"name":"Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code","description":"The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.","extended_description":"When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.","effectiveness":"","effectiveness_notes":""},{"description":"If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.","effectiveness":"","effectiveness_notes":""},{"description":"If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":782,"name":"Exposed IOCTL with Insufficient Access Control","description":"The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.","extended_description":"When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly. The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"In Windows environments, use proper access control for the associated device or device namespace. See References.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":783,"name":"Operator Precedence Logic Error","description":"The product uses an expression in which operator precedence causes incorrect logic to be used.","extended_description":"While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.","likelihood_of_exploit":"low","background_details":[],"potential_mitigations":[{"description":"Regularly wrap sub-expressions in parentheses, especially in security-critical code.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":784,"name":"Reliance on Cookies without Validation and Integrity Checking in a Security Decision","description":"The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.","extended_description":"Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Avoid using cookie data for a security-related decision.","effectiveness":"","effectiveness_notes":""},{"description":"Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.","effectiveness":"","effectiveness_notes":""},{"description":"Add integrity checks to detect tampering.","effectiveness":"","effectiveness_notes":""},{"description":"Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":785,"name":"Use of Path Manipulation Function without Maximum-sized Buffer","description":"The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.","extended_description":"Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.","likelihood_of_exploit":"","background_details":["Windows provides a large number of utility functions that manipulate buffers containing filenames. In most cases, the result is returned in a buffer that is passed in as input. (Usually the filename is modified in place.) Most functions require the buffer to be at least MAX_PATH bytes in length, but you should check the documentation for each function individually. If the buffer is not large enough to store the result of the manipulation, a buffer overflow can occur."],"potential_mitigations":[{"description":"Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":786,"name":"Access of Memory Location Before Start of Buffer","description":"The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.","extended_description":"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":787,"name":"Out-of-bounds Write","description":"The product writes data past the end, or before the beginning, of the intended buffer.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.","effectiveness":"","effectiveness_notes":"This is not a complete solution, since many buffer overflows are not related to strings."},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]."},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.","effectiveness":"moderate","effectiveness_notes":"This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":""}]},{"cwe_id":788,"name":"Access of Memory Location After End of Buffer","description":"The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.","extended_description":"This typically occurs when a pointer or its index is incremented to a position after the buffer; or when pointer arithmetic results in a position after the buffer.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":789,"name":"Memory Allocation with Excessive Size Value","description":"The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.","effectiveness":"","effectiveness_notes":""},{"description":"Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":79,"name":"Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","description":"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.","extended_description":"Cross-site scripting (XSS) vulnerabilities occur when: Untrusted data enters a web application, typically from a web request. The web application dynamically generates a web page that contains this untrusted data. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - \n         \t\t\tThe server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - \n               The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - \n               In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\" In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.","likelihood_of_exploit":"high","background_details":["The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or \"origin\", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or \"origins\". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce. When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site."],"potential_mitigations":[{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.","effectiveness":"","effectiveness_notes":""},{"description":"Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Parts of the same output document may require different encodings, which will vary depending on whether the output is in the: HTML body Element attributes (such as src=\"XYZ\") URIs JavaScript sections Cascading Style Sheets and style property etc. Note that HTML Entity Encoding is only appropriate for the HTML body. Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.","effectiveness":"","effectiveness_notes":""},{"description":"Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.","effectiveness":"limited","effectiveness_notes":"This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc."},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address. Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.","effectiveness":"moderate"},{"method":"Black Box","description":"Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.","effectiveness":"moderate"}]},{"cwe_id":790,"name":"Improper Filtering of Special Elements","description":"The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":791,"name":"Incomplete Filtering of Special Elements","description":"The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":792,"name":"Incomplete Filtering of One or More Instances of Special Elements","description":"The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.","extended_description":"Incomplete filtering of this nature involves either: only filtering a single instance of a special element when more exist, or not filtering all instances or all elements where multiple special elements exist.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":793,"name":"Only Filtering One Instance of a Special Element","description":"The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.","extended_description":"Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":794,"name":"Incomplete Filtering of Multiple Instances of Special Elements","description":"The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.","extended_description":"Incomplete filtering of this nature may be applied to: sequential elements (special elements that appear next to each other) or non-sequential elements (special elements that appear multiple times in different locations).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":795,"name":"Only Filtering Special Elements at a Specified Location","description":"The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.","extended_description":"A filter might only account for instances of special elements when they occur: relative to a marker (e.g. \"at the beginning/end of string; the second argument\"), or at an absolute position (e.g. \"byte number 10\"). This may leave special elements in the data that did not match the filter position, but still may be dangerous.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":796,"name":"Only Filtering Special Elements Relative to a Marker","description":"The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. \"at the beginning/end of a string; the second argument\"), thereby missing remaining special elements that may exist before sending it to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":797,"name":"Only Filtering Special Elements at an Absolute Position","description":"The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. \"byte number 10\"), thereby missing remaining special elements that may exist before sending it to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":798,"name":"Use of Hard-coded Credentials","description":"The product contains hard-coded credentials, such as a password or cryptographic key.","extended_description":"There are two main variations: Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In this variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. It can also be difficult for the administrator to detect. Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. This variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password that can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7]. In Windows environments, the Encrypted File System (EFS) may provide some protection.","effectiveness":"","effectiveness_notes":""},{"description":"For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.","effectiveness":"","effectiveness_notes":""},{"description":"If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.","effectiveness":"","effectiveness_notes":""},{"description":"For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash. Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.","effectiveness":"","effectiveness_notes":""},{"description":"For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Black Box","description":"Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.","effectiveness":"moderate"},{"method":"Automated Static Analysis","description":"Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.","effectiveness":""},{"method":"Manual Static Analysis","description":"This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the product, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.","effectiveness":""},{"method":"Manual Dynamic Analysis","description":"For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Network Sniffer Forced Path Execution","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction","effectiveness":"high"}]},{"cwe_id":799,"name":"Improper Control of Interaction Frequency","description":"The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.","extended_description":"This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":8,"name":"J2EE Misconfiguration: Entity Bean Declared Remote","description":"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Declare Java beans \"local\" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.","extended_description":"This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":804,"name":"Guessable CAPTCHA","description":"The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.","extended_description":"An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular entertainers. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":805,"name":"Buffer Access with Incorrect Length Value","description":"The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.","extended_description":"When the length value exceeds the size of the destination, a buffer overflow could occur.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.","effectiveness":"","effectiveness_notes":"This is not a complete solution, since many buffer overflows are not related to strings."},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]."},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.","effectiveness":"high"},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.","effectiveness":""}]},{"cwe_id":806,"name":"Buffer Access Using Size of Source Buffer","description":"The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.","extended_description":"When the size of the destination is smaller than the size of the source, a buffer overflow could occur.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.","effectiveness":"","effectiveness_notes":""},{"description":"Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.","effectiveness":"defense in depth","effectiveness_notes":"This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application."},{"description":"Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].","effectiveness":"defense in depth","effectiveness_notes":"These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]."},{"description":"Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].","effectiveness":"defense in depth","effectiveness_notes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"description":"Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":807,"name":"Reliance on Untrusted Inputs in a Security Decision","description":"The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.","extended_description":"Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software. Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Store state information and sensitive data on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions. If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. With a stateless protocol such as HTTP, use a framework that maintains the state for you. Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45]. Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""},{"description":"Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Manual Static Analysis","description":"Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.","effectiveness":"high"},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":81,"name":"Improper Neutralization of Script in an Error Message Web Page","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.","extended_description":"Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Do not write user-controlled input to error pages.","effectiveness":"","effectiveness_notes":""},{"description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":82,"name":"Improper Neutralization of Script in Attributes of IMG Tags in a Web Page","description":"The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.","extended_description":"Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":820,"name":"Missing Synchronization","description":"The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.","extended_description":"If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":821,"name":"Incorrect Synchronization","description":"The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.","extended_description":"If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":822,"name":"Untrusted Pointer Dereference","description":"The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.","extended_description":"An attacker can supply a pointer for memory locations that the product is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a variable to an unexpected value (since the value will be read from an unexpected memory location). There are several variants of this weakness, including but not necessarily limited to: The untrusted value is directly invoked as a function call. In OS kernels or drivers where there is a boundary between \"userland\" and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example). Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":823,"name":"Use of Out-of-range Pointer Offset","description":"The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.","extended_description":"While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":824,"name":"Access of Uninitialized Pointer","description":"The product accesses or uses a pointer that has not been initialized.","extended_description":"If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the product to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and product operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":825,"name":"Expired Pointer Dereference","description":"The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.","extended_description":"When a product releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the product to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Choose a language that provides automatic memory management.","effectiveness":"","effectiveness_notes":""},{"description":"When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":826,"name":"Premature Release of Resource During Expected Lifetime","description":"The product releases a resource that is still intended to be used by itself or another actor.","extended_description":"This weakness focuses on errors in which the product should not release a resource, but performs the release anyway. This is different than a weakness in which the product releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access. When a product releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":827,"name":"Improper Control of Document Type Definition","description":"The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.","extended_description":"As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content. For example, the SOAP specification prohibits SOAP messages from containing DTDs.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":828,"name":"Signal Handler with Functionality that is not Asynchronous-Safe","description":"The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.","extended_description":"This can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution. Signal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution. There are several different scenarios that introduce this issue: Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant. Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals. The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831). Note that in some environments or contexts, it might be possible for the signal handler to be interrupted itself. If both a signal handler and the normal behavior of the product have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.","effectiveness":"high","effectiveness_notes":""},{"description":"Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":829,"name":"Inclusion of Functionality from Untrusted Control Sphere","description":"The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.","extended_description":"When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application. This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.","effectiveness":"","effectiveness_notes":""},{"description":"Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling","effectiveness":"high"}]},{"cwe_id":83,"name":"Improper Neutralization of Script in Attributes in a Web Page","description":"The product does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":830,"name":"Inclusion of Web Functionality from an Untrusted Source","description":"The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.","extended_description":"Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted. Even if the third party is a trusted source, the product may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the product. This weakness is common in \"mashup\" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=\"http://other.domain.here\">' tags, which causes the code to run in the domain of the product, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access. Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":831,"name":"Signal Handler Function Associated with Multiple Signals","description":"The product defines a function that is used as a handler for more than one signal.","extended_description":"While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects. An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution. Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":832,"name":"Unlock of a Resource that is not Locked","description":"The product attempts to unlock a resource that is not locked.","extended_description":"Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":833,"name":"Deadlock","description":"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":834,"name":"Excessive Iteration","description":"The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.","extended_description":"If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the product or its host system; it depends on the amount of resources consumed per iteration.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Forced Path Execution","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":835,"name":"Loop with Unreachable Exit Condition ('Infinite Loop')","description":"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":836,"name":"Use of Password Hash Instead of Password for Authentication","description":"The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.","extended_description":"Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password. As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":837,"name":"Improper Enforcement of a Single, Unique Action","description":"The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.","extended_description":"In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to \"stuff the ballot box\" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the product.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":838,"name":"Inappropriate Encoding for Output Context","description":"The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.","extended_description":"This weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks. While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output. For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding. While web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.","effectiveness":"","effectiveness_notes":""},{"description":"Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":839,"name":"Numeric Range Comparison Without Minimum Check","description":"The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.","extended_description":"Some products use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption. The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.","effectiveness":"","effectiveness_notes":""},{"description":"If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":84,"name":"Improper Neutralization of Encoded URI Schemes in a Web Page","description":"The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Resolve all URIs to absolute or canonical representations before processing.","effectiveness":"","effectiveness_notes":""},{"description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":841,"name":"Improper Enforcement of Behavioral Workflow","description":"The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.","extended_description":"By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the product or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses. For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the product might still perform the transfer. Note that this is different than CWE-696, which focuses on when the product performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence. Workflow-related behaviors include: Steps are performed in the expected order. Required steps are not omitted. Steps are not interrupted. Steps are performed in a timely fashion.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":842,"name":"Placement of User into Incorrect Group","description":"The product or the administrator places a user into an incorrect group.","extended_description":"If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":843,"name":"Access of Resource Using Incompatible Type ('Type Confusion')","description":"The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.","extended_description":"When the product accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access. While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways. This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":85,"name":"Doubled Character XSS Manipulations","description":"The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Resolve all filtered input to absolute or canonical representations before processing.","effectiveness":"","effectiveness_notes":""},{"description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":86,"name":"Improper Neutralization of Invalid Characters in Identifiers in Web Pages","description":"The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.","extended_description":"Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the product may attempt to remove a \"javascript:\" URI scheme, but a \"java%00script:\" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":862,"name":"Missing Authorization","description":"The product does not perform an authorization check when an actor attempts to access a resource or perform an action.","extended_description":"","likelihood_of_exploit":"high","background_details":["An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."],"potential_mitigations":[{"description":"Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries. Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].","effectiveness":"","effectiveness_notes":""},{"description":"For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.","effectiveness":"","effectiveness_notes":""},{"description":"Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.","effectiveness":"limited"},{"method":"Automated Dynamic Analysis","description":"Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.","effectiveness":""},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.","effectiveness":"moderate"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction","effectiveness":"high"}]},{"cwe_id":863,"name":"Incorrect Authorization","description":"The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.","extended_description":"","likelihood_of_exploit":"high","background_details":["An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."],"potential_mitigations":[{"description":"Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries. Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].","effectiveness":"","effectiveness_notes":""},{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].","effectiveness":"","effectiveness_notes":""},{"description":"For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.","effectiveness":"","effectiveness_notes":""},{"description":"Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.","effectiveness":"limited"},{"method":"Automated Dynamic Analysis","description":"Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses.","effectiveness":""},{"method":"Manual Analysis","description":"This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.","effectiveness":"moderate"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners","effectiveness":"soar partial"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"soar partial"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":87,"name":"Improper Neutralization of Alternate XSS Syntax","description":"The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Resolve all input to absolute or canonical representations before processing.","effectiveness":"","effectiveness_notes":""},{"description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.","effectiveness":"","effectiveness_notes":""},{"description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.","effectiveness":"","effectiveness_notes":""},{"description":"With Struts, write all data from form beans with the bean's filter attribute set to true.","effectiveness":"","effectiveness_notes":""},{"description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","effectiveness":"defense in depth","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":88,"name":"Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')","description":"The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.","extended_description":"When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed.  This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters.  When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer.  The attacker may then be able to change the behavior of the command.  Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Where possible, avoid building a single string that contains the command and its arguments.  Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command.  For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments.  In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.","effectiveness":"high","effectiveness_notes":""},{"description":"Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.","effectiveness":"","effectiveness_notes":""},{"description":"When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.","effectiveness":"","effectiveness_notes":""},{"description":"When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.","effectiveness":"","effectiveness_notes":""},{"description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.","effectiveness":"","effectiveness_notes":""},{"description":"Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","description":"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.","extended_description":"","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.","effectiveness":"","effectiveness_notes":""},{"description":"If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]","effectiveness":"","effectiveness_notes":""},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.","effectiveness":"","effectiveness_notes":""},{"description":"Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.","effectiveness":""},{"method":"Automated Dynamic Analysis","description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"moderate"},{"method":"Manual Analysis","description":"Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.","effectiveness":""},{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"high"},{"method":"Dynamic Analysis with Automated Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Database Scanners Cost effective for partial coverage: Web Application Scanner Web Services Scanner","effectiveness":"high"},{"method":"Dynamic Analysis with Manual Results Interpretation","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":9,"name":"J2EE Misconfiguration: Weak Access Permissions for EJB Methods","description":"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.","extended_description":"If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":90,"name":"Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","description":"The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":908,"name":"Use of Uninitialized Resource","description":"The product uses or accesses a resource that has not been initialized.","extended_description":"When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.","effectiveness":"","effectiveness_notes":""},{"description":"Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid race conditions (CWE-362) during initialization routines.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile the product with settings that generate warnings about uninitialized variables or data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":909,"name":"Missing Initialization of Resource","description":"The product does not initialize a critical resource.","extended_description":"Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.","effectiveness":"","effectiveness_notes":""},{"description":"Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.","effectiveness":"","effectiveness_notes":""},{"description":"Avoid race conditions (CWE-362) during initialization routines.","effectiveness":"","effectiveness_notes":""},{"description":"Run or compile your product with settings that generate warnings about uninitialized variables or data.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":91,"name":"XML Injection (aka Blind XPath Injection)","description":"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.","extended_description":"Within XML, special elements could include reserved words or characters such as \"<\", \">\", \"\"\", and \"&\", which could then be used to add new data or modify XML syntax.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":910,"name":"Use of Expired File Descriptor","description":"The product uses or accesses a file descriptor after it has been closed.","extended_description":"After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":911,"name":"Improper Update of Reference Count","description":"The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.","extended_description":"Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":912,"name":"Hidden Functionality","description":"The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.","extended_description":"Hidden functionality can take many forms, such as intentionally malicious code, \"Easter Eggs\" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the product's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Always verify the integrity of the product that is being installed.","effectiveness":"","effectiveness_notes":""},{"description":"Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":913,"name":"Improper Control of Dynamically-Managed Code Resources","description":"The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.","extended_description":"Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For any externally-influenced input, check the input against an allowlist of acceptable values.","effectiveness":"","effectiveness_notes":""},{"description":"Refactor the code so that it does not need to be dynamically managed.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Fuzzing","description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","effectiveness":"high"}]},{"cwe_id":914,"name":"Improper Control of Dynamically-Identified Variables","description":"The product does not properly restrict reading from or writing to dynamically-identified variables.","extended_description":"Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.","effectiveness":"","effectiveness_notes":""},{"description":"Refactor the code so that internal program variables do not need to be dynamically identified.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":915,"name":"Improperly Controlled Modification of Dynamically-Determined Object Attributes","description":"The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.","extended_description":"If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists. For applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.","effectiveness":"","effectiveness_notes":""},{"description":"If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.","effectiveness":"","effectiveness_notes":""},{"description":"For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.","effectiveness":"","effectiveness_notes":""},{"description":"Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":916,"name":"Use of Password Hash With Insufficient Computational Effort","description":"The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.","extended_description":"Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash. Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker. There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack: The amount of CPU time required to compute the hash (\"stretching\") The amount of memory required to compute the hash (\"memory-hard\" operations) Including a random value, along with the password, as input to the hash computation (\"salting\") Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (\"one-way\" hashing) Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (\"collision resistance\") Note that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.","effectiveness":"high","effectiveness_notes":""},{"description":"When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Binary or Bytecode","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies","effectiveness":"soar partial"},{"method":"Manual Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)","effectiveness":"high"},{"method":"Automated Static Analysis - Source Code","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer","effectiveness":"high"},{"method":"Automated Static Analysis","description":"According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker","effectiveness":"soar partial"},{"method":"Architecture or Design Review","description":"According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","effectiveness":"high"}]},{"cwe_id":917,"name":"Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","description":"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.","extended_description":"Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid adding user-controlled data into an expression interpreter when possible.","effectiveness":"","effectiveness_notes":""},{"description":"If user-controlled data must be added to an expression interpreter, one or more of the following should be performed: Validate that the user input will not evaluate as an expression Encode the user input in a way that ensures it is not evaluated as an expression","effectiveness":"","effectiveness_notes":""},{"description":"The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to \"true\".","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":918,"name":"Server-Side Request Forgery (SSRF)","description":"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":92,"name":"DEPRECATED: Improper Sanitization of Custom Special Characters","description":"This entry has been deprecated. It originally came from PLOVER, which sometimes defined \"other\" and \"miscellaneous\" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":920,"name":"Improper Restriction of Power Consumption","description":"The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.","extended_description":"In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the product itself, and the device might not always be directly attached to a reliable power source. If the product uses too much power too quickly, then this could cause the device (and subsequently, the product) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs. Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as: Display CPU Disk I/O GPS Sound Microphone USB interface","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":921,"name":"Storage of Sensitive Data in a Mechanism without Access Control","description":"The product stores sensitive information in a file system or device that does not have built-in access control.","extended_description":"While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data. On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":922,"name":"Insecure Storage of Sensitive Information","description":"The product stores sensitive information without properly limiting read or write access by unauthorized actors.","extended_description":"If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":923,"name":"Improper Restriction of Communication Channel to Intended Endpoints","description":"The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.","extended_description":"Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint. While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":924,"name":"Improper Enforcement of Message Integrity During Transmission in a Communication Channel","description":"The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.","extended_description":"Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":925,"name":"Improper Verification of Intent by Broadcast Receiver","description":"The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.","extended_description":"Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":926,"name":"Improper Export of Android Application Components","description":"The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.","extended_description":"The attacks and consequences of improperly exporting a component may depend on the exported component: If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application. If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application. If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported.","likelihood_of_exploit":"","background_details":["There are three types of components that can be exported in an Android application. An Activity is an application component that provides a UI for users to interact with. A typical application will have multiple Activity screens that perform different functions, such as a main Activity screen and a separate settings Activity screen. A Service is an application component that is started by another component to execute an operation in the background, even after the invoking component is terminated. Services do not have a UI component visible to the user. The Content Provider mechanism can be used to share data with other applications or internally within the same application."],"potential_mitigations":[{"description":"If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.","effectiveness":"","effectiveness_notes":""},{"description":"If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.","effectiveness":"","effectiveness_notes":""},{"description":"Limit Content Provider permissions (read/write) as appropriate.","effectiveness":"","effectiveness_notes":""},{"description":"Limit Content Provider permissions (read/write) as appropriate.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":927,"name":"Use of Implicit Intent for Sensitive Communication","description":"The Android application uses an implicit intent for transmitting sensitive data to other applications.","extended_description":"Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky. Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain. Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents. In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":93,"name":"Improper Neutralization of CRLF Sequences ('CRLF Injection')","description":"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid using CRLF as a special sequence.","effectiveness":"","effectiveness_notes":""},{"description":"Appropriately filter or quote CRLF sequences in user-controlled input.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":939,"name":"Improper Authorization in Handler for Custom URL Scheme","description":"The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.","extended_description":"Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":94,"name":"Improper Control of Generation of Code ('Code Injection')","description":"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.","extended_description":"When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"Refactor your program so that you do not have to dynamically generate code.","effectiveness":"","effectiveness_notes":""},{"description":"Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().","effectiveness":"","effectiveness_notes":""},{"description":"Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.","effectiveness":"","effectiveness_notes":""},{"description":"Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).","effectiveness":"","effectiveness_notes":""},{"description":"For Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].","effectiveness":"discouraged common practice","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":940,"name":"Improper Verification of Source of a Communication Channel","description":"The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.","extended_description":"When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":941,"name":"Incorrectly Specified Destination in a Communication Channel","description":"The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.","extended_description":"Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service. There are at least two distinct weaknesses that can cause the product to communicate with an unintended destination: If the product allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions. If the product incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the product might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a \"sticky broadcast\" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":942,"name":"Permissive Cross-domain Policy with Untrusted Domains","description":"The product uses a cross-domain policy file that includes domains that should not be trusted.","extended_description":"A cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made. Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains. An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. In many cases, the attack can be launched without the victim even being aware of it.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.","effectiveness":"","effectiveness_notes":""},{"description":"For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.","effectiveness":"","effectiveness_notes":""},{"description":"For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":943,"name":"Improper Neutralization of Special Elements in Data Query Logic","description":"The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.","extended_description":"Depending on the capabilities of the query language, an attacker could inject additional logic into the query to: Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated Append additional commands to the query Return more entities than intended Return fewer entities than intended Cause entities to be sorted in an unexpected way The ability to execute additional commands or change which entities are returned has obvious risks. But when the product logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges. While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages.","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":95,"name":"Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").","extended_description":"This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.","likelihood_of_exploit":"medium","background_details":[],"potential_mitigations":[{"description":"If possible, refactor your code so that it does not need to use eval() at all.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.","effectiveness":"","effectiveness_notes":""},{"description":"For Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].","effectiveness":"discouraged common practice","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]},{"cwe_id":96,"name":"Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""},{"description":"Perform proper output validation and escaping to neutralize all code syntax from data written to code files.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[]},{"cwe_id":97,"name":"Improper Neutralization of Server-Side Includes (SSI) Within a Web Page","description":"The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.","extended_description":"","likelihood_of_exploit":"","background_details":[],"potential_mitigations":[],"detection_methods":[]},{"cwe_id":98,"name":"Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')","description":"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.","extended_description":"In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.","effectiveness":"","effectiveness_notes":""},{"description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.","effectiveness":"","effectiveness_notes":""},{"description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.","effectiveness":"","effectiveness_notes":""},{"description":"Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.","effectiveness":"limited","effectiveness_notes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.","effectiveness":"","effectiveness_notes":""},{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.","effectiveness":"high","effectiveness_notes":""},{"description":"Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.","effectiveness":"","effectiveness_notes":""},{"description":"Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.","effectiveness":"","effectiveness_notes":""},{"description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","effectiveness":"moderate","effectiveness_notes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"description":"Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.","effectiveness":"","effectiveness_notes":""},{"description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.","effectiveness":"","effectiveness_notes":""},{"description":"Set allow_url_fopen to false, which limits the ability to include files from remote locations.","effectiveness":"high","effectiveness_notes":"Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion."}],"detection_methods":[{"method":"Manual Analysis","description":"Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.","effectiveness":"high"},{"method":"Automated Static Analysis","description":"The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.","effectiveness":""}]},{"cwe_id":99,"name":"Improper Control of Resource Identifiers ('Resource Injection')","description":"The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.","extended_description":"A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources.","likelihood_of_exploit":"high","background_details":[],"potential_mitigations":[{"description":"Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.","effectiveness":"","effectiveness_notes":""}],"detection_methods":[{"method":"Automated Static Analysis","description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","effectiveness":"high"}]}]